Dim objArgs
Set objArgs = Wscript.Arguments

Const configFileName = "download_new_indicator_config"
'Const config_settingfile_FileName = "download_new_indicator_config_setting_file_name"
'Private Declare PtrSafe Function SafeArrayGetDim Lib "oleaut32" (ByRef psa() As Any) As Long

Const PriceMtxRowIdeal = 5

Const inIndiIDCol = 0
Const inIndiDateCol = 1
Const inIndiTimeCol = 2
Const inIndiAshiCol = 3
Const inIndiPriceCol = 4
Const inIndiColNum = 4


Const btIndiIDcol = 0
Const btIndiDatecol = 1
Const btIndiAshicol = 2
Const btIndiPricecol = 3
Const btIndiColNum = 3

Const tmpIndiDatecol = 0
Const tmpIndiPricecol = 1
Const tmpIndiColNum = 1

Const inPriceOpenRow = 1
Const inPriceHighRow = 2
Const inPriceLowRow = 3
Const inPriceCloseRow = 4
Const inPriceMedianRow = 5
Const inPriceRowNum = 5

Const inPriceDateCol = 0
Const inPriceTimeCol = 1
Const inPriceAshiCol = 2
Const inPricePriceCol = 3

Const inSetNoCol = 0
Const inSetName1Col = 1
Const inSetName2Col = 2
Const inSetAsi1Col = 3
Const inSetAsi2Col = 4
Const inSetPriceCol = 5
Const inSetTypeCol = 6
Const inSetThreCol = 7
Const inSetMemoCol = 8
Const inSetKairiCol = 9
Const inSetCodeCol = 10
Const inSetHmodeCol = 11
Const inSetSubSettingCol = 12
Const inSetKaisouCol = 13
Const inSetNumberCol = 14

Dim inDir1
Dim inDir2
Dim inDir3
Dim inIndiFil
Dim inPriceFil
Dim maxPeriodSet
Dim PeriodArraySet

Dim inSetDir
Dim inSetFil
Dim inSetFullFil
Dim setAsi
Dim outDir1
Dim outDir2
Dim outDir3
Dim combiDir1
Dim combiDir2
Dim combiDir3
Dim outFil

Dim pips1
Dim pips2
Dim pips3

Dim watchInterval
Dim logPath
Dim ErrPath

Dim countstart
Dim childNumber
Dim zerofile
Dim pairset
Dim daymode
Dim rewritemode

Dim filenumber

Const MAX_BT = 100000
Dim BTmode
Dim start_date
Dim end_date
Dim inMtx_row
Dim stopFlg

Const FunctionRatio = "Ratio"
Const FunctionAbsIchi = "AbsIchi"
Const FunctionAbs = "Abs"
Const FunctionJita = "Jita"
Const FunctionJvalue = "Jvalue"
Const FunctionTvalue = "Tvalue"
Const FunctionJTvalue = "JTvalue"
Const FunctionSabun = "Sabun"
Const FunctionSabunDougyaku = "SabunDougyaku"
Const FunctionSabunDougyaku2 = "SabunDougyaku2"
Const FunctionMaehenka = "Maehenka"
Const FunctionLeaderDirection = "LeaderDirection"
Const FunctionLeaderNum = "LeaderNum"
Const FunctionLeaderShukiNum = "LeaderShukiNum"
Const FunctionMaxRatioPairNum = "MaxRatioPairNum"
Const FunctionOSum = "OSum"
Const FunctionPlus = "Plus"
Const FunctionRSum = "RSum"
Const FunctionHeiken = "Heiken"
Const FunctionHeOsUD = "HeOsUD"
Const FunctionHeOsZG = "HeOsZG"
Const FunctionDualKairi = "DualKairi"
Const FunctionDualDirection = "DualDirection"
Const FunctionRyouP = "RyouP"
Const FunctionRyouM = "RyouM"
Const FunctionRyouPM = "RyouPM"
Const FunctionRyou = "Ryou"
Const FunctionGoalPredict = "GoalPredict"
Const FunctionMinus = "Minus"
Const FunctionZGMinus = "ZGMinus"
Const FunctionZGAbsMinus = "ZGAbsMinus"
Const FunctionTwoValueDiff = "TwoValueDiff"
Const FunctionSingleValueDiff = "SingleValueDiff"
Const FunctionSingleDDiff = "SingleDDiff"
Const FunctionSingleVDiffAve = "SingleVDiffAve"
Const FunctionSingleDDiffAve = "SingleDDiffAve"
Const FunctionPredictOre0 = "PredictOre0"
Const FunctionPredictOre1 = "PredictOre1"
Const FunctionPredictOre2 = "PredictOre2"
Const FunctionPredictOre = "PredictOre" 
Const FunctionPredictOre21 = "PredictOre21"
Const FunctionPredictSoroi = "PredictSoroi"
Const FunctionPredictSoroiSabun = "PredictSoroiSabun"
Const FunctionPredictSoroiSabun2 = "PredictSoroiSabun2"
Const FunctionPredictSoroiSabun3 = "PredictSoroiSabun3"
Const FunctionPredictSoroiSetsuzoku = "PredictSoroiSetsuzoku"
Const FunctionPredictSoroiSetsuzoku3 = "PredictSoroiSetsuzoku3"
Const FunctionPredictSoroiSabunPairs = "PredictSoroiSabunPairs"
Const FunctionJisseiTrace = "JisseiTrace"
Const FunctionJisseiTrace2 = "JisseiTrace2"
Const FunctionJisseiTraceMini = "JisseiTraceMini"
Const FunctionJisseiTraceFull = "JisseiTraceFull"
Const FunctionJisseiTraceFull3 = "JisseiTraceFull3"
Const FunctionJisseiTraceFull5 = "JisseiTraceFull5"
Const FunctionJisseiTraceFull5Abs = "JisseiTraceFull5Abs"
Const FunctionJisseiTraceSabun = "JisseiTraceSabun"
Const FunctionJisseiTraceSabun3 = "JisseiTraceSabun3"
Const FunctionJisseiTraceSabun4 = "JisseiTraceSabun4"
Const FunctionJisseiTraceSabun5 = "JisseiTraceSabun5"
Const FunctionJisseiTraceTime = "JisseiTraceTime"
Const FunctionJisseiTraceTimeHendou = "JisseiTraceTimeHendou"
Const FunctionNamasiFullBlockNamasi = "NamasiFullBlockNamasi"
Const FunctionNamasiFullBlockDirection = "NamasiFullBlockDirection"
Const FunctionNamasiFullBlockBar = "NamasiFullBlockBar"
Const FunctionNamasiFullPrices = "NamasiFullPrices"
Const FunctionNamasiFullBlockNumber = "NamasiFullBlockNumber"
Const FunctionDivide = "Divide"
Const FunctionMultiple = "Multiple"
Const FunctionTradeVolume = "TradeVolume"
Const FunctionTradeVolume2 = "TradeVolume2"
Const FunctionGoalPredict100 = "GoalPredict100"
Const FunctionFractalCount = "FractalCount"
Const FunctionFractalPercent = "FractalPercent"
Const FunctionFractalSinchoku = "FractalSinchoku"
Const FunctionFractalTiming = "FractalTiming"
Const FunctionHeikenReal = "HeikenReal"
Const FunctionRousokuIkiKaeri = "RousokuIkiKaeri"
Const FunctionRousokuIkiKaeriVariable = "RousokuIkiKaeriVariable"
Const FunctionAverage = "Average"
Const FunctionAverageHeiken = "AverageHeiken"
Const FunctionAverageRousokuIkiKaeriVariable = "AverageRousokuIkiKaeriVariable"
Const FunctionFractalAnaume = "FractalAnaume"

'関数の管理番号保持用（出力ファイルの枝番に使用）
Dim functionNumberRatio
Dim FunctionNumberAbsIchi
Dim FunctionNumberAbs
Dim FunctionNumberJita
Dim FunctionNumberJvalue
Dim FunctionNumberTvalue
Dim FunctionNumberJTvalue
Dim FunctionNumberSabun
Dim FunctionNumberSabunDougyaku
Dim FunctionNumberSabunDougyaku2
Dim FunctionNumberMaehenka
Dim FunctionNumberLeaderDirection
Dim FunctionNumberLeaderNum
Dim FunctionNumberLeaderShukiNum
Dim FunctionNumberMaxRatioPairNum
Dim FunctionNumberOSum
Dim FunctionNumberPlus
Dim FunctionNumberRSum
Dim FunctionNumberHeiken
Dim FunctionNumberHeOsUD
Dim FunctionNumberHeOsZG
Dim FunctionNumberDualKairi
Dim FunctionNumberDualDirection
Dim FunctionNumberRyouP
Dim FunctionNumberRyouM
Dim FunctionNumberRyouPM
Dim FunctionNumberRyou
Dim FunctionNumberGoalPredict
Dim FunctionNumberMinus
Dim FunctionNumberZGMinus
Dim FunctionNumberZGAbsMinus
Dim FunctionNumberTwoValueDiff
Dim FunctionNumberSingleValueDiff
Dim FunctionNumberSingleDDiff
Dim FunctionNumberSingleVDiffAve
Dim FunctionNumberSingleDDiffAve
Dim FunctionNumberPredictOre0
Dim FunctionNumberPredictOre1
Dim FunctionNumberPredictOre2
Dim FunctionNumberPredictOre
Dim FunctionNumberPredictOre21
Dim FunctionNumberPredictSoroi
Dim FunctionNumberPredictSoroiSabun
Dim FunctionNumberPredictSoroiSabun2
Dim FunctionNumberPredictSoroiSabun3
Dim FunctionNumberPredictSoroiSetsuzoku
Dim FunctionNumberPredictSoroiSetsuzoku3
Dim FunctionNumberPredictSoroiSabunPairs
Dim FunctionNumberJisseiTrace
Dim FunctionNumberJisseiTrace2
Dim FunctionNumberJisseiTraceMini
Dim FunctionNumberJisseiTraceFull
Dim FunctionNumberJisseiTraceFull3
Dim FunctionNumberJisseiTraceFull5
Dim FunctionNumberJisseiTraceFull5Abs
Dim FunctionNumberJisseiTraceSabun
Dim FunctionNumberJisseiTraceSabun3
Dim FunctionNumberJisseiTraceSabun4
Dim FunctionNumberJisseiTraceSabun5
Dim FunctionNumberJisseiTraceTime
Dim FunctionNumberJisseiTraceTimeHendou
Dim FunctionNumberNamasiFullBlockNamasi
Dim FunctionNumberNamasiFullBlockDirection
Dim FunctionNumberNamasiFullBlockBar
Dim FunctionNumberNamasiFullPrices
Dim FunctionNumberNamasiFullBlockNumber
Dim FunctionNumberDivide
Dim FunctionNumberMultiple
Dim FunctionNumberTradeVolume
Dim FunctionNumberTradeVolume2
Dim FunctionNumberGoalPredict100
Dim FunctionNumberFractalCount
Dim FunctionNumberFractalPercent
Dim FunctionNumberFractalSinchoku
Dim FunctionNumberFractalTiming
Dim FunctionNumberHeikenReal
Dim FunctionNumberRousokuIkiKaeri
Dim FunctionNumberRousokuIkiKaeriVariable
Dim FunctionNumberAverage
Dim FunctionNumberAverageHeiken
Dim FunctionNumberAverageRousokuIkiKaeriVariable
Dim FunctionNumberFractalAnaume

Const MaxPeriod = 7 '時間足の最大
Const MaxPair = 3 'ペアの最大
Const MaxPairSet = 3 'ペアの最大設定値

'初期設定ファイル用
Dim inSetMtx  '初期設定ファイル内容保持用
Dim inSetFullMtx  '初期設定ファイル内容保持用

'各入力ファイル用
Dim inIndiMtx1  '第1指標入力ファイル格納用配列
Dim inPriceMtx1  '第1価格入力ファイル格納用配列
Dim inIndiMtx2  '第2指標入力ファイル格納用配列
Dim inPriceMtx2  '第2価格入力ファイル格納用配列
Dim inIndiMtx3  '第3指標入力ファイル格納用配列
Dim inPriceMtx3  '第3価格入力ファイル格納用配列
Dim inIndiSakiMtx1  '第1指標入力ファイル格納用配列
Dim inPriceSakiMtx1  '第1価格入力ファイル格納用配列
Dim inIndiSakiMtx2  '第2指標入力ファイル格納用配列
Dim inPriceSakiMtx2  '第2価格入力ファイル格納用配列
Dim inIndiSakiMtx3  '第3指標入力ファイル格納用配列
Dim inPriceSakiMtx3  '第3価格入力ファイル格納用配列
Dim inIndiSSakiMtx1  '第1指標入力ファイル格納用配列
Dim inPriceSSakiMtx1  '第1価格入力ファイル格納用配列
Dim inIndiSSakiMtx2  '第2指標入力ファイル格納用配列
Dim inPriceSSakiMtx2  '第2価格入力ファイル格納用配列
Dim inIndiSSakiMtx3  '第3指標入力ファイル格納用配列
Dim inPriceSSakiMtx3  '第3価格入力ファイル格納用配列
Dim inIndiMtxBT1  '第1指標入力ファイル格納用配列（BT）
Dim inIndiMtxBT2  '第2指標入力ファイル格納用配列（BT）
Dim inIndiMtxBT3  '第3指標入力ファイル格納用配列（BT）
Dim inIndiMtxRL1  '第1指標入力ファイル格納用配列（RL）
Dim inIndiMtxRL2  '第2指標入力ファイル格納用配列（RL）
Dim inIndiMtxRL3  '第3指標入力ファイル格納用配列（RL）
Dim inIndiSakiMtxBT1  '第1指標入力ファイル格納用配列（BT）
Dim inIndiSakiMtxBT2  '第2指標入力ファイル格納用配列（BT）
Dim inIndiSakiMtxBT3  '第3指標入力ファイル格納用配列（BT）
Dim inIndiSakiMtxRL1  '第1指標入力ファイル格納用配列（RL）
Dim inIndiSakiMtxRL2  '第2指標入力ファイル格納用配列（RL）
Dim inIndiSakiMtxRL3  '第3指標入力ファイル格納用配列（RL）
Dim inIndiSSakiMtxBT1  '第1指標入力ファイル格納用配列（BT）
Dim inIndiSSakiMtxBT2  '第2指標入力ファイル格納用配列（BT）
Dim inIndiSSakiMtxBT3  '第3指標入力ファイル格納用配列（BT）
Dim inIndiSSakiMtxRL1  '第1指標入力ファイル格納用配列（RL）
Dim inIndiSSakiMtxRL2  '第2指標入力ファイル格納用配列（RL）
Dim inIndiSSakiMtxRL3  '第3指標入力ファイル格納用配列（RL）

Dim inIndiPreMtx1  '第1指標入力ファイル格納用配列
Dim inPricePreMtx1  '第1価格入力ファイル格納用配列
Dim inIndiPreMtx2  '第2指標入力ファイル格納用配列
Dim inPricePreMtx2  '第2価格入力ファイル格納用配列
Dim inIndiPreMtx3  '第3指標入力ファイル格納用配列
Dim inPricePreMtx3  '第3価格入力ファイル格納用配列

Dim holdOutAllIndicatorMtx1 '全指標保持用配列（出力）
Dim holdOutAllIndicatorMtx2 '全指標保持用配列（出力）
Dim holdOutAllIndicatorMtx3 '全指標保持用配列（出力）
Dim holdInAllIndicatorMtx1 '全指標保持用配列（入力）
Dim holdInAllIndicatorMtx2 '全指標保持用配列（入力）
Dim holdInAllIndicatorMtx3 '全指標保持用配列（入力）
Dim holdInAllIndicatorSakiMtx1 '全指標保持用配列（入力）
Dim holdInAllIndicatorSakiMtx2 '全指標保持用配列（入力）
Dim holdInAllIndicatorSakiMtx3 '全指標保持用配列（入力）
Dim holdInAllIndicatorSSakiMtx1 '全指標保持用配列（入力）
Dim holdInAllIndicatorSSakiMtx2 '全指標保持用配列（入力）
Dim holdInAllIndicatorSSakiMtx3 '全指標保持用配列（入力）

Const holdAllIndiDateCol = 0
Const holdAllIndiRowNum = 1441
Const holdAllIndiRowRLNum = 1
Const holdAllIndiNameRow = 0

'ファイル出力用の結果保持配列
Const outflag_on = 1
Const outflag_off = 0
Const writeflag_on = 1
Const writeflag_off = 0
Dim outRatio  'Ratio関数結果出力用配列
Dim outAbsIchi  'AbsIchi関数結果出力用配列
Dim outAbs  'Abs関数結果出力用配列
Dim outJita  'Jita関数結果出力用配列
Dim outJvalue  'Jvalue関数結果出力用配列
Dim outTvalue  'Tvalue関数結果出力用配列
Dim outJTvalue  'JTvalue関数結果出力用配列
Dim outSabun  'Sabun関数結果出力用配列
Dim outSabunDougyaku  'SabunDougyaku関数結果出力用配列
Dim outSabunDougyaku2  'SabunDougyaku2関数結果出力用配列
Dim outMaehenka  'Maehenka関数結果出力用配列
Dim outLeaderDirection  'LeaderDirection関数用変数
Dim outLeaderNum  'LeaderNum関数用変数
Dim outLeaderShukiNum  'LeaderShukiNum関数用変数
Dim outMaxRatioPairNum  'MaxRatioPairNum関数用変数
Dim outOSum  'outOSum関数用変数
Dim outPlus  'outPlus関数用変数
Dim outRSum  'outRSum関数用変数
Dim outHeiken 'Heiken関数用変数
Dim outHeOsUD 'HeOsUD関数用変数
Dim outHeOsZG 'HeOsZG関数用変数
Dim outDualKairi 'DualKairi関数用変数
Dim outDualDirection 'DualDirection関数用変数
Dim outRyouP 'RyouP関数用変数
Dim outRyouM 'RyouM関数用変数
Dim outRyouPM 'RyouPM関数用変数
Dim outRyou 'Ryou関数用変数
Dim outGoalPredict 'GoalPredict関数用変数
Dim outMinus 'Minus関数用変数
Dim outZGMinus 'ZGMinus関数用変数
Dim outZGAbsMinus 'ZGAbsMinus関数用変数
Dim outTwoValueDiff 'TwoValueDiff関数用変数
Dim outSingleValueDiff 'SingleValueDiff関数用変数
Dim outSingleDDiff 'SingleDDiff関数用変数
Dim outSingleVDiffAve 'SingleVDiffAve関数用変数
Dim outSingleDDiffAve 'SingleDDiffAve関数用変数
Dim outPredictOre0 'PredictOre0関数用変数
Dim outPredictOre1 'PredictOre1関数用変数
Dim outPredictOre2 'PredictOre2関数用変数
Dim outPredictOre 'PredictOre関数用変数
Dim outPredictOre21 'PredictOre21関数用変数
Dim outPredictSoroi 'PredictSoroi関数用変数
Dim outPredictSoroiSabun 'PredictSoroiSabun関数用変数
Dim outPredictSoroiSabun2 'PredictSoroiSabun2関数用変数
Dim outPredictSoroiSabun3 'PredictSoroiSabun3関数用変数
Dim outPredictSoroiSetsuzoku 'PredictSoroiSetsuzoku関数用変数
Dim outPredictSoroiSetsuzoku3 'PredictSoroiSetsuzoku3関数用変数
Dim outPredictSoroiSabunPairs 'PredictSoroiSabunPairs関数用変数
Dim outJisseiTrace 'JisseiTrace関数用変数
Dim outJisseiTrace2 'JisseiTrace2関数用変数
Dim outJisseiTraceMini 'JisseiTraceMini関数用変数
Dim outJisseiTraceFull 'JisseiTraceFull関数用変数
Dim outJisseiTraceFull3 'JisseiTraceFull3関数用変数
Dim outJisseiTraceFull5 'JisseiTraceFull5関数用変数
Dim outJisseiTraceFull5Abs 'JisseiTraceFull5Abs関数用変数
Dim outJisseiTraceSabun 'JisseiTraceSabun関数用変数
Dim outJisseiTraceSabun3 'JisseiTraceSabun3関数用変数
Dim outJisseiTraceSabun4 'JisseiTraceSabun4関数用変数
Dim outJisseiTraceSabun5 'JisseiTraceSabun5関数用変数
Dim outJisseiTraceTime 'JisseiTraceTime関数用変数
Dim outJisseiTraceTimeHendou 'JisseiTraceTimeHendou関数用変数
Dim outNamasiFullBlockNamasi 'NamasiFullBlockNamasi関数用変数
Dim outNamasiFullBlockDirection 'NamasiFullBlockDirection関数用変数
Dim outNamasiFullBlockBar 'NamasiFullBlockBar関数用変数
Dim outNamasiFullPrices 'NamasiFullPrices関数用変数
Dim outNamasiFullBlockNumber 'NamasiFullBlockNumber関数用変数
Dim outDivide 'Divide関数用変数
Dim outMultiple 'Multiple関数用変数
Dim outTradeVolume 'TradeVolume関数用変数
Dim outTradeVolume2 'TradeVolume2関数用変数
Dim outGoalPredict100 'GoalPredict100関数用変数
Dim outFractalCount 'FractalCount関数用変数
Dim outFractalPercent 'FractalPercent関数用変数
Dim outFractalSinchoku 'FractalSinchoku関数用変数
Dim outFractalTiming 'FractalTiming関数用変数
Dim outHeikenReal 'HeikenReal関数用変数
Dim outRousokuIkiKaeri 'RousokuIkiKaeri関数用変数
Dim outRousokuIkiKaeriVariable 'RousokuIkiKaeriVariable関数用変数
Dim outAverage 'Average関数用変数
Dim outAverageRousokuIkiKaeriVariable 'AverageRousokuIkiKaeriVariable関数用変数
Dim outAverageHeiken 'AverageHeiken関数用変数
Dim outFractalAnaume 'FractalAnaume関数用変数

Const outIDCol = 0
Const outDayCol = 1
Const outTimeCol = 2
Const outAshiCol = 3
Const outPriceCol = 4
Const outPutColNum = 5 '出力ファイルの列数
Const outPutRowNum = 1200 '出力ファイルの行数

Const outIDBTCol = 0
Const outDateBTCol = 1
Const outAshiBTCol = 3
Const outPriceBTCol = 4
Const outPutBTColNum = 4 '出力ファイルの列数

Dim holdRatio  'Ratio関数用変数
Const RatioOMaxCol = 1
Const RatioOStCol = 2
Const RatioPMaxCol = 3
Const RatioPStCol = 4
Const RatioOnowCol = 5
Const RatioOpreCol = 6
Const RatioPnowCol = 7
Const RatioPpreCol = 8
Const RatioRatioCol = 9
Const RatioObliCol = 10
Const RatioAvecountCol = 11
Const RatioAvevalCol = 12
Const holdRatioColNum = 12

Dim holdAbsIchi  'AbsIchi関数用変数
Const AbsIchiAnsCol = 1
Const holdAbsIchiColNum = 1

Dim holdAbs  'Abs関数用変数
Const AbsAnsCol = 1
Const holdAbsColNum = 1

Dim holdJita  'Jita関数用変数
Const JitaAnsCol = 1
Const holdJitaColNum = 1

Dim holdJvalue  'Jvalue関数用変数
Const JvalueAnsCol = 1
Const holdJvalueColNum = 1

Dim holdTvalue  'Tvalue関数用変数
Const TvalueAnsCol = 1
Const holdTvalueColNum = 1

Dim holdJTvalue  'JTvalue関数用変数
Const JTvalueAnsCol = 1
Const holdJTvalueColNum = 1

Dim holdSabun  'Sabun関数用変数
Const SabunAnsCol = 1
Const SabunOnow1_1Col = 2
Const SabunOpre1_1Col = 3
Const SabunOnow1_2Col = 4
Const SabunOpre1_2Col = 5
Const SabunOnow2_1Col = 6
Const SabunOpre2_1Col = 7
Const SabunOnow2_2Col = 8
Const SabunOpre2_2Col = 9
Const SabunOnow3_1Col = 10
Const SabunOpre3_1Col = 11
Const SabunOnow3_2Col = 12
Const SabunOpre3_2Col = 13
Const holdSabunColNum = 13

Dim holdSabunDougyaku  'SabunDougyaku関数用変数（カラム構成はSabunと同じ）
Dim holdSabunDougyaku2  'SabunDougyaku2関数用変数（カラム構成はSabunと同じ）

Dim holdMaehenka  'Maehenka関数用変数
Const MaehenkaAnsCol = 1
Const MaehenkaVnow1Col = 2
Const MaehenkaVpre1Col = 3
Const MaehenkaVnow2Col = 4
Const MaehenkaVpre2Col = 5
Const holdMaehenkaColNum = 5

Dim holdLeaderDirection  'LeaderDirection関数用変数
Const LeaderDirectionAnsCol = 1
Const holdLeaderDirectionColNum = 1

Dim holdLeaderNum  'LeaderNum関数用変数
Const LeaderNumAnsCol = 1
Const LeaderNumOnow11Col = 2
Const LeaderNumOnow21Col = 3
Const LeaderNumOnow31Col = 4
Const LeaderNumOnow12Col = 5
Const LeaderNumOnow22Col = 6
Const LeaderNumOnow32Col = 7
Const holdLeaderNumColNum = 7

Dim holdLeaderShukiNum  'LeaderShuki関数用変数
Const LeaderShukiNumAnsCol = 1
Const LeaderShukiNumOnow1Col = 2
Const LeaderShukiNumOpre1Col = 3
Const holdLeaderShukiNumColNum = 3

Dim holdMaxRatioPairNum  'LeaderDirection関数用変数
Const MaxRatioPairNumAnsCol = 1
Const holdMaxRatioPairNumColNum = 1

Dim holdOSum  'OSum関数用変数
Const OSumAnsCol = 1
Const OSumVnow1Col = 2
Const OSumVnow2Col = 3
Const OSumVnow3Col = 4
Const holdOSumColNum = 4

Dim holdPlus  'Plus関数用変数
Const PlusAnsCol = 1
Const holdPlusColNum = 1

Dim holdRSum  'LeaderDirection関数用変数
Const RSumAnsCol = 1
Const holdRsumColNum = 1

Dim holdHeiken 'Heiken関数用変数
Const HeikenOpenCol = 1
Const HeikenHighCol = 2
Const HeikenLowCol = 3
Const HeikenCloseCol = 4
Const holdHeikenColNum = 4

Dim holdHeOsUD 'HeOsUD関数用変数
Const HeOsUDOpenCol = 1
Const HeOsUDHighCol = 2
Const HeOsUDLowCol = 3
Const HeOsUDCloseCol = 4
Const holdHeOsUDColNum = 4

Dim holdHeOsZG 'HeOsZG関数用変数
Const HeOsZGOpenCol = 1
Const HeOsZGHighCol = 2
Const HeOsZGLowCol = 3
Const HeOsZGCloseCol = 4
Const holdHeOsZGColNum = 4

Dim holdDualKairi 'DualKairi関数用変数
Const DualKairiAnsCol = 1
Const DualKairiVnow1Col = 2
Const DualKairiVpre1Col = 3
Const DualKairiVnow2Col = 4
Const DualKairiVpre2Col = 5
Const holdDualKairiColNum = 5
Const KairiAri = 1
Const KairiNasi = -1

Dim holdDualDirection 'DualDirection関数用変数
Const DualDirectionAnsCol = 1
Const DualDirectionVnow1Col = 2
Const DualDirectionVpre1Col = 3
Const DualDirectionVnow2Col = 4
Const DualDirectionVpre2Col = 5
Const DualDirectionVnow3Col = 6
Const DualDirectionVpre3Col = 7
Const holdDualDirectionColNum = 7

Dim holdRyouP 'RyouP関数用変数
Const RyouPAnsCol = 1
Const holdRyouPColNum = 1

Dim holdRyouM 'RyouM関数用変数
Const RyouMAnsCol = 1
Const holdRyouMColNum = 1

Dim holdRyouPM 'RyouPM関数用変数
Const RyouPMAnsCol = 1
Const holdRyouPMColNum = 1

Dim holdRyou 'Ryou関数用変数
Const RyouAnsCol = 1
Const holdRyouColNum = 1

Dim holdGoalPredict 'GoalPredict関数用変数
Const GoalPredictAnsHighCol = 1
Const GoalPredictAnsLowCol = 2
Const GoalPredictHeOsSignalNowCol = 3
Const GoalPredictHeOsSignalPreCol = 4
Const GoalPredictHeOsSignalLogCol = 5
Const GoalPredictHeOsOpenNowCol = 6
Const GoalPredictHeOsOpenPreCol = 7
Const GoalPredictHeOsOpenLogCol = 8
Const GoalPredictHeOsSabunNowCol = 9
Const GoalPredictHeOsSabunPreCol = 10
Const GoalPredictHeOsSabunLogCol = 11
Const GoalPredictOpenPriceCol = 12
Const GoalPredictHighPrice0Col = 13
Const GoalPredictHighPrice1Col = 14
Const GoalPredictLowPrice0Col = 15
Const GoalPredictLowPrice1Col = 16
Const GoalPredictCrossPointNowCol = 17
Const GoalPredictCrossPointPreCol = 18
Const GoalPredictCrossTypeCol = 19
Const GoalPredictCrossTypeLogCol = 20
Const holdGoalPredictColNum = 20

Dim holdMinus 'Minus関数用変数
Const MinusAnsCol = 1
Const MinusValue1Col = 2
Const MinusValue2Col = 3
Const holdMinusColNum = 3

Dim holdZGMinus 'ZGMinus関数用変数
Const ZGMinusAnsCol = 1
Const ZGMinusValue1Col = 2
Const ZGMinusValue2Col = 3
Const holdZGMinusColNum = 3

Dim holdZGAbsMinus 'ZGAbsMinus関数用変数
Const ZGAbsMinusAnsCol = 1
Const ZGAbsMinusValue1Col = 2
Const ZGAbsMinusValue2Col = 3
Const holdZGAbsMinusColNum = 3

Dim holdTwoValueDiff 'TwoValueDiff関数用変数
Const TwoValueDiffAnsCol = 1
Const TwoValueDiffValue1Col = 2
Const TwoValueDiffValue2Col = 3
Const holdTwoValueDiffColNum = 3

Dim holdSingleValueDiff 'SingleValueDiff関数用変数
Const SingleValueDiffAnsCol = 1
Const SingleValueDiffValue1Col = 2
Const holdSingleValueDiffColNum = 2

Dim holdSingleDDiff 'SingleDDiff関数用変数
Const SingleDDiffAnsCol = 1
Const SingleDDiffValue1Col = 2
Const SingleDDiffDiff1Col = 3
Const holdSingleDDiffColNum = 3

Dim holdSingleVDiffAve 'SingleVDiffAve関数用変数
Const SingleVDiffAveAnsCol = 1
Const SingleVDiffAveValue1Col = 2
Const SingleVDiffAveDiff1Col = 3
Const holdSingleVDiffAveColNum = 3

Dim holdSingleDDiffAve 'SingleDDiffAve関数用変数
Const SingleDDiffAveAnsCol = 1
Const SingleDDiffAveValue1Col = 2
Const SingleDDiffAveDiff1Col = 3
Const SingleDDiffAveDiff2Col = 4
Const SingleDDiffAveDiff3Col = 5
Const holdSingleDDiffAveColNum = 5

Dim holdPredictOre0 'PredictOre0関数用変数
Const PredictOreAnsCol = 1
Const PredictOrePeriodCol = 2
Const PredictOreKatamukiCol = 3
Const PredictOrePriceCol = 4
Const PredictOreOre0Col = 5
Const PredictOreOre1Col = 6
Const PredictOreTenkanDirectCol = 7
Const PredictOreOValueCol = 8
Const PredictOreVValueCol = 9
Const PredictOreTenkanDateCol = 10
Const PredictOreTenkanTimeCol = 11
Const PredictOrePeakDateCol = 12
Const PredictOrePeakTimeCol = 13
Const PredictOrePeakValueCol = 14
Const holdPredictOreColNum = 14

Dim holdPredictOre1 'PredictOre1関数用変数
Dim holdPredictOre2 'PredictOre2関数用変数
Dim holdPredictOre 'PredictOre関数用変数
Dim holdPredictOre21 'PredictOre21関数用変数

Dim holdPredictSoroi 'PredictSoroi関数用変数
Const PredictSoroiAnsCol = 1
Const PredictSoroiPeriodCol = 2
Const PredictSoroiPriceCol = 3
Const PredictSoroiOre0Col = 4
Const PredictSoroiOre1Col = 5
Const PredictSoroiTenkanDirectCol = 6
Const PredictSoroiOValueCol = 7
Const PredictSoroiTenkanDateCol = 8
Const PredictSoroiTenkanTimeCol = 9
Const PredictSoroiPeakDateCol = 10
Const PredictSoroiPeakTimeCol = 11
Const PredictSoroiPeakValueCol = 12
Const PredictSoroiMassSumCol = 13
Const holdPredictSoroiColNum = 13

Dim holdPredictSoroiSabun 'PredictSoroiSabun関数用変数
Const PredictSoroiSabunAnsCol = 1
Const PredictSoroiSabunPeriodCol = 2
Const PredictSoroiSabunPriceCol = 3
Const PredictSoroiSabunOre0Col = 4
Const PredictSoroiSabunOre1Col = 5
Const PredictSoroiSabunTenkanDirectCol = 6
Const PredictSoroiSabunOValueCol = 7
Const PredictSoroiSabunTenkanDateCol = 8
Const PredictSoroiSabunTenkanTimeCol = 9
Const PredictSoroiSabunPeakDateCol = 10
Const PredictSoroiSabunPeakTimeCol = 11
Const PredictSoroiSabunPeakValueCol = 12
Const PredictSoroiSabunMassSumCol = 13
Const PredictSoroiSabunOValue2Col = 14
Const PredictSoroiSabunCValueCol = 15
Const holdPredictSoroiSabunColNum = 15

Dim holdJisseiTrace 'JisseiTrace関数用変数
Dim holdJisseiTrace2 'JisseiTrace2関数用変数
Const JisseiTraceAnsCol = 1
Const JisseiTracePeriodCol = 2
Const JisseiTracePriceCol = 3
Const JisseiTraceOre0Col = 4
Const JisseiTraceOre1Col = 5
Const JisseiTraceOre2Col = 6
Const JisseiTraceTenkanDirectCol = 7
Const JisseiTraceOValueCol = 8
Const JisseiTraceTenkanDateCol = 9
Const JisseiTraceTenkanTimeCol = 10
Const JisseiTracePeakDateCol = 11
Const JisseiTracePeakTimeCol = 12
Const JisseiTracePeakValueCol = 13
Const JisseiTracePeakPriceCol = 14
Const JisseiTraceTenkanPriceCol = 15
Const JisseiTracePreWidthCol = 16
Const JisseiTracePrePeakPriceCol = 17
Const JisseiTracePreTenkanPriceCol = 18
Const JisseiTracePrePeakValueCol = 19
Const holdJisseiTraceColNum = 19

Dim holdJisseiTraceMini 'JisseiTraceMini関数用変数
Const JisseiTraceMiniAnsCol = 1
Const JisseiTraceMiniPeriodCol = 2
Const JisseiTraceMiniPriceCol = 3
Const JisseiTraceMiniOre0Col = 4
Const JisseiTraceMiniOre1Col = 5
Const JisseiTraceMiniOre2Col = 6
Const JisseiTraceMiniTenkanDirectCol = 7
Const JisseiTraceMiniOValueCol = 8
Const JisseiTraceMiniTenkanDateCol = 9
Const JisseiTraceMiniTenkanTimeCol = 10
Const JisseiTraceMiniPeakDateCol = 11
Const JisseiTraceMiniPeakTimeCol = 12
Const JisseiTraceMiniPeakValueCol = 13
Const JisseiTraceMiniPeakPriceCol = 14
Const JisseiTraceMiniTenkanPriceCol = 15
Const JisseiTraceMiniPeakMiniValueCol = 16
Const JisseiTraceMiniPeakMiniPriceCol = 17
Const JisseiTraceMiniPeakMiniDateCol = 18
Const JisseiTraceMiniPeakMiniTimeCol = 19
Const holdJisseiTraceMiniColNum = 19

Dim holdJisseiTraceFull 'JisseiTraceFull関数用変数
Const JisseiTraceFullAnsCol = 1
Const JisseiTraceFullPeriodCol = 2
Const JisseiTraceFullPriceCol = 3
Const JisseiTraceFullTenkanDirectCol = 4
Const JisseiTraceFullOValueCol = 5
Const JisseiTraceFullTenkanDateCol = 6
Const JisseiTraceFullTenkanTimeCol = 7
Const JisseiTraceFullTenkanValueCol = 8
Const JisseiTraceFullTenkanPriceCol = 9
Const JisseiTraceFullPeakDateCol = 10
Const JisseiTraceFullPeakTimeCol = 11
Const JisseiTraceFullPeakValueCol = 12
Const JisseiTraceFullPeakPriceCol = 13
Const JisseiTraceFullMiniPeakDateCol = 14
Const JisseiTraceFullMiniPeakTimeCol = 15
Const JisseiTraceFullMiniPeakValueCol = 16
Const JisseiTraceFullMiniPeakPriceCol = 17
Const JisseiTraceFullPreTenkanDateCol = 18
Const JisseiTraceFullPreTenkanTimeCol = 19
Const JisseiTraceFullPreTenkanValueCol = 20
Const JisseiTraceFullPreTenkanPriceCol = 21
Const JisseiTraceFullPrePeakDateCol = 22
Const JisseiTraceFullPrePeakTimeCol = 23
Const JisseiTraceFullPrePeakValueCol = 24
Const JisseiTraceFullPrePeakPriceCol = 25
Const JisseiTraceFullPreMiniPeakDateCol = 26
Const JisseiTraceFullPreMiniPeakTimeCol = 27
Const JisseiTraceFullPreMiniPeakValueCol = 28
Const JisseiTraceFullPreMiniPeakPriceCol = 29
Const JisseiTraceFullOre1Col = 30
Const JisseiTraceFullOre2Col = 31
Const JisseiTraceFullPgr0Col = 32
Const JisseiTraceFullPgr2Col = 33
Const JisseiTraceFullOPgr2Col = 34
Const JisseiTraceFullOPznCol = 35
Const JisseiTraceFullOgr0Col = 36
Const JisseiTraceFullOgr2Col = 37
Const JisseiTraceFullOwdCol = 38
Const JisseiTraceFullOmvCol = 39
Const JisseiTraceFullMinOre1Col = 40
Const JisseiTraceFullMinOre2Col = 41
Const JisseiTraceFullMinPgr0Col = 42
Const JisseiTraceFullMinPgr2Col = 43
Const JisseiTraceFullMinOPgr2Col = 44
Const JisseiTraceFullMinOPznCol = 45
Const JisseiTraceFullMinOgr0Col = 46
Const JisseiTraceFullMinOgr2Col = 47
Const JisseiTraceFullMinOwdCol = 48
Const JisseiTraceFullMinOmvCol = 49
Const holdJisseiTraceFullColNum = 49

Dim holdJisseiTraceFull3 'JisseiTraceFull3関数用変数
Const JisseiTraceFull3AnsCol = 1
Const JisseiTraceFull3PeriodCol = 2
Const JisseiTraceFull3PriceCol = 3
Const JisseiTraceFull3TenkanDirectCol = 4
Const JisseiTraceFull3OValueCol = 5
Const JisseiTraceFull3TenkanDateCol = 6
Const JisseiTraceFull3TenkanTimeCol = 7
Const JisseiTraceFull3TenkanValueCol = 8
Const JisseiTraceFull3TenkanPriceCol = 9
Const JisseiTraceFull3PeakDateCol = 10
Const JisseiTraceFull3PeakTimeCol = 11
Const JisseiTraceFull3PeakValueCol = 12
Const JisseiTraceFull3PeakPriceCol = 13
Const JisseiTraceFull3MiniPeakDateCol = 14
Const JisseiTraceFull3MiniPeakTimeCol = 15
Const JisseiTraceFull3MiniPeakValueCol = 16
Const JisseiTraceFull3MiniPeakPriceCol = 17
Const JisseiTraceFull3PreTenkanDateCol = 18
Const JisseiTraceFull3PreTenkanTimeCol = 19
Const JisseiTraceFull3PreTenkanValueCol = 20
Const JisseiTraceFull3PreTenkanPriceCol = 21
Const JisseiTraceFull3PrePeakDateCol = 22
Const JisseiTraceFull3PrePeakTimeCol = 23
Const JisseiTraceFull3PrePeakValueCol = 24
Const JisseiTraceFull3PrePeakPriceCol = 25
Const JisseiTraceFull3PreMiniPeakDateCol = 26
Const JisseiTraceFull3PreMiniPeakTimeCol = 27
Const JisseiTraceFull3PreMiniPeakValueCol = 28
Const JisseiTraceFull3PreMiniPeakPriceCol = 29
Const JisseiTraceFull3Ore1Col = 30
Const JisseiTraceFull3Ore2Col = 31
Const JisseiTraceFull3Pgr0Col = 32
Const JisseiTraceFull3Pgr2Col = 33
Const JisseiTraceFull3OPgr2Col = 34
Const JisseiTraceFull3OPznCol = 35
Const JisseiTraceFull3Ogr0Col = 36
Const JisseiTraceFull3Ogr2Col = 37
Const JisseiTraceFull3OwdCol = 38
Const JisseiTraceFull3OmvCol = 39
Const JisseiTraceFull3MinOre1Col = 40
Const JisseiTraceFull3MinOre2Col = 41
Const JisseiTraceFull3MinPgr0Col = 42
Const JisseiTraceFull3MinPgr2Col = 43
Const JisseiTraceFull3MinOPgr2Col = 44
Const JisseiTraceFull3MinOPznCol = 45
Const JisseiTraceFull3MinOgr0Col = 46
Const JisseiTraceFull3MinOgr2Col = 47
Const JisseiTraceFull3MinOwdCol = 48
Const JisseiTraceFull3MinOmvCol = 49
Const holdJisseiTraceFull3ColNum = 49

Dim holdJisseiTraceFull5 'JisseiTraceFull5関数用変数
Const JisseiTraceFull5AnsCol = 1
Const JisseiTraceFull5PeriodCol = 2
Const JisseiTraceFull5PriceCol = 3
Const JisseiTraceFull5TenkanDirectCol = 4
Const JisseiTraceFull5OValueCol = 5
Const JisseiTraceFull5TenkanDateCol = 6
Const JisseiTraceFull5TenkanTimeCol = 7
Const JisseiTraceFull5TenkanValueCol = 8
Const JisseiTraceFull5TenkanPriceCol = 9
Const JisseiTraceFull5PeakDateCol = 10
Const JisseiTraceFull5PeakTimeCol = 11
Const JisseiTraceFull5PeakValueCol = 12
Const JisseiTraceFull5PeakPriceCol = 13
Const JisseiTraceFull5MiniPeakDateCol = 14
Const JisseiTraceFull5MiniPeakTimeCol = 15
Const JisseiTraceFull5MiniPeakValueCol = 16
Const JisseiTraceFull5MiniPeakPriceCol = 17
Const JisseiTraceFull5PreTenkanDateCol = 18
Const JisseiTraceFull5PreTenkanTimeCol = 19
Const JisseiTraceFull5PreTenkanValueCol = 20
Const JisseiTraceFull5PreTenkanPriceCol = 21
Const JisseiTraceFull5PrePeakDateCol = 22
Const JisseiTraceFull5PrePeakTimeCol = 23
Const JisseiTraceFull5PrePeakValueCol = 24
Const JisseiTraceFull5PrePeakPriceCol = 25
Const JisseiTraceFull5PreMiniPeakDateCol = 26
Const JisseiTraceFull5PreMiniPeakTimeCol = 27
Const JisseiTraceFull5PreMiniPeakValueCol = 28
Const JisseiTraceFull5PreMiniPeakPriceCol = 29
Const JisseiTraceFull5Ogr0Col = 30
Const JisseiTraceFull5Ogr1Col = 31
Const JisseiTraceFull5Ogr2ol = 32
Const JisseiTraceFull5OPgr1Col = 33
Const JisseiTraceFull5OPgr2Col = 34
Const JisseiTraceFull5OznCol = 35
Const JisseiTraceFull5PznCol = 36
Const JisseiTraceFull5Left0Col = 37
Const JisseiTraceFull5Left1Col = 38
Const JisseiTraceFull5Left2Col = 39
Const JisseiTraceFull5MinOgr0Col = 40
Const JisseiTraceFull5MinOgr1Col = 41
Const JisseiTraceFull5MinOgr2Col = 42
Const JisseiTraceFull5MinOPgr1Col = 43
Const JisseiTraceFull5MinOPgr2Col = 44
Const JisseiTraceFull5MinOznCol = 45
Const JisseiTraceFull5MinPznCol = 46
Const JisseiTraceFull5MinLeft0Col = 47
Const JisseiTraceFull5MinLeft1Col = 48
Const JisseiTraceFull5MinLeft2Col = 49
Const holdJisseiTraceFull5ColNum = 49

Dim holdJisseiTraceFull5Abs 'JisseiTraceFull5Abs関数用変数
Const JisseiTraceFull5AbsAnsCol = 1
Const JisseiTraceFull5AbsPeriodCol = 2
Const JisseiTraceFull5AbsPriceCol = 3
Const JisseiTraceFull5AbsTenkanDirectCol = 4
Const JisseiTraceFull5AbsOValueCol = 5
Const JisseiTraceFull5AbsTenkanDateCol = 6
Const JisseiTraceFull5AbsTenkanTimeCol = 7
Const JisseiTraceFull5AbsTenkanValueCol = 8
Const JisseiTraceFull5AbsTenkanPriceCol = 9
Const JisseiTraceFull5AbsPeakDateCol = 10
Const JisseiTraceFull5AbsPeakTimeCol = 11
Const JisseiTraceFull5AbsPeakValueCol = 12
Const JisseiTraceFull5AbsPeakPriceCol = 13
Const JisseiTraceFull5AbsMiniPeakDateCol = 14
Const JisseiTraceFull5AbsMiniPeakTimeCol = 15
Const JisseiTraceFull5AbsMiniPeakValueCol = 16
Const JisseiTraceFull5AbsMiniPeakPriceCol = 17
Const JisseiTraceFull5AbsPreTenkanDateCol = 18
Const JisseiTraceFull5AbsPreTenkanTimeCol = 19
Const JisseiTraceFull5AbsPreTenkanValueCol = 20
Const JisseiTraceFull5AbsPreTenkanPriceCol = 21
Const JisseiTraceFull5AbsPrePeakDateCol = 22
Const JisseiTraceFull5AbsPrePeakTimeCol = 23
Const JisseiTraceFull5AbsPrePeakValueCol = 24
Const JisseiTraceFull5AbsPrePeakPriceCol = 25
Const JisseiTraceFull5AbsPreMiniPeakDateCol = 26
Const JisseiTraceFull5AbsPreMiniPeakTimeCol = 27
Const JisseiTraceFull5AbsPreMiniPeakValueCol = 28
Const JisseiTraceFull5AbsPreMiniPeakPriceCol = 29
Const JisseiTraceFull5AbsOgr0Col = 30
Const JisseiTraceFull5AbsOgr1Col = 31
Const JisseiTraceFull5AbsOgr2ol = 32
Const JisseiTraceFull5AbsOPgr1Col = 33
Const JisseiTraceFull5AbsOPgr2Col = 34
Const JisseiTraceFull5AbsOznCol = 35
Const JisseiTraceFull5AbsPznCol = 36
Const JisseiTraceFull5AbsLeft0Col = 37
Const JisseiTraceFull5AbsLeft1Col = 38
Const JisseiTraceFull5AbsLeft2Col = 39
Const JisseiTraceFull5AbsMinOgr0Col = 40
Const JisseiTraceFull5AbsMinOgr1Col = 41
Const JisseiTraceFull5AbsMinOgr2Col = 42
Const JisseiTraceFull5AbsMinOPgr1Col = 43
Const JisseiTraceFull5AbsMinOPgr2Col = 44
Const JisseiTraceFull5AbsMinOznCol = 45
Const JisseiTraceFull5AbsMinPznCol = 46
Const JisseiTraceFull5AbsMinLeft0Col = 47
Const JisseiTraceFull5AbsMinLeft1Col = 48
Const JisseiTraceFull5AbsMinLeft2Col = 49
Const holdJisseiTraceFull5AbsColNum = 49

Dim holdJisseiTraceSabun 'JisseiTraceSabun関数用変数
Const JisseiTraceSabunAnsCol = 1
Const JisseiTraceSabunPeriodCol = 2
Const JisseiTraceSabunPriceCol = 3
Const JisseiTraceSabunTenkanDirectCol = 4
Const JisseiTraceSabunOValueCol = 5
Const JisseiTraceSabunOValue2Col = 6
Const JisseiTraceSabunTenkanDateCol = 7
Const JisseiTraceSabunTenkanTimeCol = 8
Const JisseiTraceSabunTenkanValueCol = 9
Const JisseiTraceSabunTenkanPriceCol = 10
Const JisseiTraceSabunPeakDateCol = 11
Const JisseiTraceSabunPeakTimeCol = 12
Const JisseiTraceSabunPeakValueCol = 13
Const JisseiTraceSabunPeakPriceCol = 14
Const JisseiTraceSabunMiniPeakDateCol = 15
Const JisseiTraceSabunMiniPeakTimeCol = 16
Const JisseiTraceSabunMiniPeakValueCol = 17
Const JisseiTraceSabunMiniPeakPriceCol = 18
Const JisseiTraceSabunPreTenkanDateCol = 19
Const JisseiTraceSabunPreTenkanTimeCol = 20
Const JisseiTraceSabunPreTenkanValueCol = 21
Const JisseiTraceSabunPreTenkanPriceCol = 22
Const JisseiTraceSabunPrePeakDateCol = 23
Const JisseiTraceSabunPrePeakTimeCol = 24
Const JisseiTraceSabunPrePeakValueCol = 25
Const JisseiTraceSabunPrePeakPriceCol = 26
Const JisseiTraceSabunPreMiniPeakDateCol = 27
Const JisseiTraceSabunPreMiniPeakTimeCol = 28
Const JisseiTraceSabunPreMiniPeakValueCol = 29
Const JisseiTraceSabunPreMiniPeakPriceCol = 30
Const JisseiTraceSabunOre1Col = 31
Const JisseiTraceSabunOre2Col = 32
Const JisseiTraceSabunPgr0Col = 33
Const JisseiTraceSabunPgr2Col = 34
Const JisseiTraceSabunOPgr2Col = 35
Const JisseiTraceSabunOPznCol = 36
Const JisseiTraceSabunOgr0Col = 37
Const JisseiTraceSabunOgr2Col = 38
Const JisseiTraceSabunOwdCol = 39
Const JisseiTraceSabunOmvCol = 40
Const JisseiTraceSabunMinOre1Col = 41
Const JisseiTraceSabunMinOre2Col = 42
Const JisseiTraceSabunMinPgr0Col = 43
Const JisseiTraceSabunMinPgr2Col = 44
Const JisseiTraceSabunMinOPgr2Col = 45
Const JisseiTraceSabunMinOPznCol = 46
Const JisseiTraceSabunMinOgr0Col = 47
Const JisseiTraceSabunMinOgr2Col = 48
Const JisseiTraceSabunMinOwdCol = 49
Const JisseiTraceSabunMinOmvCol = 50
Const JisseiTraceSabunCValue2Col = 51
Const holdJisseiTraceSabunColNum = 51

Dim holdJisseiTraceSabun3 'JisseiTraceSabun3関数用変数
Const JisseiTraceSabun3AnsCol = 1
Const JisseiTraceSabun3PeriodCol = 2
Const JisseiTraceSabun3PriceCol = 3
Const JisseiTraceSabun3TenkanDirectCol = 4
Const JisseiTraceSabun3OValueCol = 5
Const JisseiTraceSabun3OValue2Col = 6
Const JisseiTraceSabun3TenkanDateCol = 7
Const JisseiTraceSabun3TenkanTimeCol = 8
Const JisseiTraceSabun3TenkanValueCol = 9
Const JisseiTraceSabun3TenkanPriceCol = 10
Const JisseiTraceSabun3PeakDateCol = 11
Const JisseiTraceSabun3PeakTimeCol = 12
Const JisseiTraceSabun3PeakValueCol = 13
Const JisseiTraceSabun3PeakPriceCol = 14
Const JisseiTraceSabun3MiniPeakDateCol = 15
Const JisseiTraceSabun3MiniPeakTimeCol = 16
Const JisseiTraceSabun3MiniPeakValueCol = 17
Const JisseiTraceSabun3MiniPeakPriceCol = 18
Const JisseiTraceSabun3PreTenkanDateCol = 19
Const JisseiTraceSabun3PreTenkanTimeCol = 20
Const JisseiTraceSabun3PreTenkanValueCol = 21
Const JisseiTraceSabun3PreTenkanPriceCol = 22
Const JisseiTraceSabun3PrePeakDateCol = 23
Const JisseiTraceSabun3PrePeakTimeCol = 24
Const JisseiTraceSabun3PrePeakValueCol = 25
Const JisseiTraceSabun3PrePeakPriceCol = 26
Const JisseiTraceSabun3PreMiniPeakDateCol = 27
Const JisseiTraceSabun3PreMiniPeakTimeCol = 28
Const JisseiTraceSabun3PreMiniPeakValueCol = 29
Const JisseiTraceSabun3PreMiniPeakPriceCol = 30
Const JisseiTraceSabun3Ore1Col = 31
Const JisseiTraceSabun3Ore2Col = 32
Const JisseiTraceSabun3Pgr0Col = 33
Const JisseiTraceSabun3Pgr2Col = 34
Const JisseiTraceSabun3OPgr2Col = 35
Const JisseiTraceSabun3OPznCol = 36
Const JisseiTraceSabun3Ogr0Col = 37
Const JisseiTraceSabun3Ogr2Col = 38
Const JisseiTraceSabun3OwdCol = 39
Const JisseiTraceSabun3OmvCol = 40
Const JisseiTraceSabun3MinOre1Col = 41
Const JisseiTraceSabun3MinOre2Col = 42
Const JisseiTraceSabun3MinPgr0Col = 43
Const JisseiTraceSabun3MinPgr2Col = 44
Const JisseiTraceSabun3MinOPgr2Col = 45
Const JisseiTraceSabun3MinOPznCol = 46
Const JisseiTraceSabun3MinOgr0Col = 47
Const JisseiTraceSabun3MinOgr2Col = 48
Const JisseiTraceSabun3MinOwdCol = 49
Const JisseiTraceSabun3MinOmvCol = 50
Const JisseiTraceSabun3CValueCol = 51
Const JisseiTraceSabun3OPgr1Col = 52
Const JisseiTraceSabun3MinOPgr1Col = 53
Const holdJisseiTraceSabun3ColNum = 53

Dim holdJisseiTraceSabun4 'JisseiTraceSabun4関数用変数
Const JisseiTraceSabun4AnsCol = 1
Const JisseiTraceSabun4PeriodCol = 2
Const JisseiTraceSabun4PriceCol = 3
Const JisseiTraceSabun4TenkanDirectCol = 4
Const JisseiTraceSabun4OValueCol = 5
Const JisseiTraceSabun4OValue2Col = 6
Const JisseiTraceSabun4TenkanDateCol = 7
Const JisseiTraceSabun4TenkanTimeCol = 8
Const JisseiTraceSabun4TenkanValueCol = 9
Const JisseiTraceSabun4TenkanPriceCol = 10
Const JisseiTraceSabun4PeakDateCol = 11
Const JisseiTraceSabun4PeakTimeCol = 12
Const JisseiTraceSabun4PeakValueCol = 13
Const JisseiTraceSabun4PeakPriceCol = 14
Const JisseiTraceSabun4MiniPeakDateCol = 15
Const JisseiTraceSabun4MiniPeakTimeCol = 16
Const JisseiTraceSabun4MiniPeakValueCol = 17
Const JisseiTraceSabun4MiniPeakPriceCol = 18
Const JisseiTraceSabun4PreTenkanDateCol = 19
Const JisseiTraceSabun4PreTenkanTimeCol = 20
Const JisseiTraceSabun4PreTenkanValueCol = 21
Const JisseiTraceSabun4PreTenkanPriceCol = 22
Const JisseiTraceSabun4PrePeakDateCol = 23
Const JisseiTraceSabun4PrePeakTimeCol = 24
Const JisseiTraceSabun4PrePeakValueCol = 25
Const JisseiTraceSabun4PrePeakPriceCol = 26
Const JisseiTraceSabun4PreMiniPeakDateCol = 27
Const JisseiTraceSabun4PreMiniPeakTimeCol = 28
Const JisseiTraceSabun4PreMiniPeakValueCol = 29
Const JisseiTraceSabun4PreMiniPeakPriceCol = 30
Const JisseiTraceSabun4Ore1Col = 31
Const JisseiTraceSabun4Ore2Col = 32
Const JisseiTraceSabun4Pgr0Col = 33
Const JisseiTraceSabun4Pgr2Col = 34
Const JisseiTraceSabun4OPgr2Col = 35
Const JisseiTraceSabun4OPznCol = 36
Const JisseiTraceSabun4Ogr0Col = 37
Const JisseiTraceSabun4Ogr2Col = 38
Const JisseiTraceSabun4OwdCol = 39
Const JisseiTraceSabun4OmvCol = 40
Const JisseiTraceSabun4MinOre1Col = 41
Const JisseiTraceSabun4MinOre2Col = 42
Const JisseiTraceSabun4MinPgr0Col = 43
Const JisseiTraceSabun4MinPgr2Col = 44
Const JisseiTraceSabun4MinOPgr2Col = 45
Const JisseiTraceSabun4MinOPznCol = 46
Const JisseiTraceSabun4MinOgr0Col = 47
Const JisseiTraceSabun4MinOgr2Col = 48
Const JisseiTraceSabun4MinOwdCol = 49
Const JisseiTraceSabun4MinOmvCol = 50
Const JisseiTraceSabun4CValue2Col = 51
Const JisseiTraceSabun4Ans2Col = 52
Const holdJisseiTraceSabun4ColNum = 52

Dim holdJisseiTraceSabun5 'JisseiTraceSabun5関数用変数
Const JisseiTraceSabun5AnsCol = 1
Const JisseiTraceSabun5PeriodCol = 2
Const JisseiTraceSabun5PriceCol = 3
Const JisseiTraceSabun5TenkanDirectCol = 4
Const JisseiTraceSabun5OValueCol = 5
Const JisseiTraceSabun5OValue2Col = 6
Const JisseiTraceSabun5TenkanDateCol = 7
Const JisseiTraceSabun5TenkanTimeCol = 8
Const JisseiTraceSabun5TenkanValueCol = 9
Const JisseiTraceSabun5TenkanPriceCol = 10
Const JisseiTraceSabun5PeakDateCol = 11
Const JisseiTraceSabun5PeakTimeCol = 12
Const JisseiTraceSabun5PeakValueCol = 13
Const JisseiTraceSabun5PeakPriceCol = 14
Const JisseiTraceSabun5MiniPeakDateCol = 15
Const JisseiTraceSabun5MiniPeakTimeCol = 16
Const JisseiTraceSabun5MiniPeakValueCol = 17
Const JisseiTraceSabun5MiniPeakPriceCol = 18
Const JisseiTraceSabun5PreTenkanDateCol = 19
Const JisseiTraceSabun5PreTenkanTimeCol = 20
Const JisseiTraceSabun5PreTenkanValueCol = 21
Const JisseiTraceSabun5PreTenkanPriceCol = 22
Const JisseiTraceSabun5PrePeakDateCol = 23
Const JisseiTraceSabun5PrePeakTimeCol = 24
Const JisseiTraceSabun5PrePeakValueCol = 25
Const JisseiTraceSabun5PrePeakPriceCol = 26
Const JisseiTraceSabun5PreMiniPeakDateCol = 27
Const JisseiTraceSabun5PreMiniPeakTimeCol = 28
Const JisseiTraceSabun5PreMiniPeakValueCol = 29
Const JisseiTraceSabun5PreMiniPeakPriceCol = 30
Const JisseiTraceSabun5Ogr0Col = 31
Const JisseiTraceSabun5Ogr1Col = 32
Const JisseiTraceSabun5Ogr2Col = 33
Const JisseiTraceSabun5OPgr1Col = 34
Const JisseiTraceSabun5OPgr2Col = 35
Const JisseiTraceSabun5Pgr1Col = 36
Const JisseiTraceSabun5Pgr2Col = 37
Const JisseiTraceSabun5Left0Col = 38
Const JisseiTraceSabun5Left1Col = 39
Const JisseiTraceSabun5Left2Col = 40
Const JisseiTraceSabun5MinOgr0Col = 41
Const JisseiTraceSabun5MinOgr1Col = 42
Const JisseiTraceSabun5MinOgr2Col = 43
Const JisseiTraceSabun5MinOPgr1Col = 44
Const JisseiTraceSabun5MinOPgr2Col = 45
Const JisseiTraceSabun5MinPgr1Col = 46
Const JisseiTraceSabun5MinPgr2Col = 47
Const JisseiTraceSabun5MinLeft0Col = 48
Const JisseiTraceSabun5MinLeft1Col = 49
Const JisseiTraceSabun5MinLeft2Col = 50
Const JisseiTraceSabun5CValue2Col = 51
Const JisseiTraceSabun5Ans2Col = 52
Const holdJisseiTraceSabun5ColNum = 52

Dim holdJisseiTraceTime 'JisseiTraceTime関数用変数
Const JisseiTraceTimeAnsCol = 1
Const JisseiTraceTimePeriodCol = 2
Const JisseiTraceTimePriceCol = 3
Const JisseiTraceTimeTenkanDirectCol = 4
Const JisseiTraceTimeOValueCol = 5
Const JisseiTraceTimeOValue2Col = 6
Const JisseiTraceTimeTenkanDateCol = 7
Const JisseiTraceTimeTenkanTimeCol = 8
Const JisseiTraceTimeTenkanValueCol = 9
Const JisseiTraceTimeTenkanPriceCol = 10
Const JisseiTraceTimePeakDateCol = 11
Const JisseiTraceTimePeakTimeCol = 12
Const JisseiTraceTimePeakValueCol = 13
Const JisseiTraceTimePeakPriceCol = 14
Const JisseiTraceTimeMiniPeakDateCol = 15
Const JisseiTraceTimeMiniPeakTimeCol = 16
Const JisseiTraceTimeMiniPeakValueCol = 17
Const JisseiTraceTimeMiniPeakPriceCol = 18
Const JisseiTraceTimePreTenkanDateCol = 19
Const JisseiTraceTimePreTenkanTimeCol = 20
Const JisseiTraceTimePreTenkanValueCol = 21
Const JisseiTraceTimePreTenkanPriceCol = 22
Const JisseiTraceTimePrePeakDateCol = 23
Const JisseiTraceTimePrePeakTimeCol = 24
Const JisseiTraceTimePrePeakValueCol = 25
Const JisseiTraceTimePrePeakPriceCol = 26
Const JisseiTraceTimePreMiniPeakDateCol = 27
Const JisseiTraceTimePreMiniPeakTimeCol = 28
Const JisseiTraceTimePreMiniPeakValueCol = 29
Const JisseiTraceTimePreMiniPeakPriceCol = 30
Const JisseiTraceTimeOre0Col = 31
Const JisseiTraceTimeBnowCol = 32
Const JisseiTraceTimeMinOre0Col = 33
Const JisseiTraceTimeMinBnowCol = 34
COnst JisseiTraceTimeCValueCol = 35
Const holdJisseiTraceTimeColNum = 35

Dim holdJisseiTraceTimeHendou 'JisseiTraceTimeHendou関数用変数
Const JisseiTraceTimeHendouAnsCol = 1
Const JisseiTraceTimeHendouPeriodCol = 2
Const JisseiTraceTimeHendouPriceCol = 3
Const JisseiTraceTimeHendouTenkanDirectCol = 4
Const JisseiTraceTimeHendouOValueCol = 5
Const JisseiTraceTimeHendouOValue2Col = 6
Const JisseiTraceTimeHendouTenkanDateCol = 7
Const JisseiTraceTimeHendouTenkanTimeCol = 8
Const JisseiTraceTimeHendouTenkanValueCol = 9
Const JisseiTraceTimeHendouTenkanPriceCol = 10
Const JisseiTraceTimeHendouPeakDateCol = 11
Const JisseiTraceTimeHendouPeakTimeCol = 12
Const JisseiTraceTimeHendouPeakValueCol = 13
Const JisseiTraceTimeHendouPeakPriceCol = 14
Const JisseiTraceTimeHendouMiniPeakDateCol = 15
Const JisseiTraceTimeHendouMiniPeakTimeCol = 16
Const JisseiTraceTimeHendouMiniPeakValueCol = 17
Const JisseiTraceTimeHendouMiniPeakPriceCol = 18
Const JisseiTraceTimeHendouPreTenkanDateCol = 19
Const JisseiTraceTimeHendouPreTenkanTimeCol = 20
Const JisseiTraceTimeHendouPreTenkanValueCol = 21
Const JisseiTraceTimeHendouPreTenkanPriceCol = 22
Const JisseiTraceTimeHendouPrePeakDateCol = 23
Const JisseiTraceTimeHendouPrePeakTimeCol = 24
Const JisseiTraceTimeHendouPrePeakValueCol = 25
Const JisseiTraceTimeHendouPrePeakPriceCol = 26
Const JisseiTraceTimeHendouPreMiniPeakDateCol = 27
Const JisseiTraceTimeHendouPreMiniPeakTimeCol = 28
Const JisseiTraceTimeHendouPreMiniPeakValueCol = 29
Const JisseiTraceTimeHendouPreMiniPeakPriceCol = 30
Const JisseiTraceTimeHendouOre0Col = 31
Const JisseiTraceTimeHendouBnowCol = 32
Const JisseiTraceTimeHendouMinOre0Col = 33
Const JisseiTraceTimeHendouMinBnowCol = 34
Const JisseiTraceTimeHendouCValueCol = 35
Const holdJisseiTraceTimeHendouColNum = 35

Dim holdPredictSoroiSabun2 'PredictSoroiSabun2関数用変数
Const PredictSoroiSabun2AnsCol = 1
Const PredictSoroiSabun2PeriodCol = 2
Const PredictSoroiSabun2PriceCol = 3
Const PredictSoroiSabun2TenkanDirectCol = 4
Const PredictSoroiSabun2OValueCol = 5
Const PredictSoroiSabun2OValue2Col = 6
Const PredictSoroiSabun2TenkanDateCol = 7
Const PredictSoroiSabun2TenkanTimeCol = 8
Const PredictSoroiSabun2TenkanValueCol = 9
Const PredictSoroiSabun2TenkanPriceCol = 10
Const PredictSoroiSabun2PeakDateCol = 11
Const PredictSoroiSabun2PeakTimeCol = 12
Const PredictSoroiSabun2PeakValueCol = 13
Const PredictSoroiSabun2PeakPriceCol = 14
Const PredictSoroiSabun2MiniPeakDateCol = 15
Const PredictSoroiSabun2MiniPeakTimeCol = 16
Const PredictSoroiSabun2MiniPeakValueCol = 17
Const PredictSoroiSabun2MiniPeakPriceCol = 18
Const PredictSoroiSabun2PreTenkanDateCol = 19
Const PredictSoroiSabun2PreTenkanTimeCol = 20
Const PredictSoroiSabun2PreTenkanValueCol = 21
Const PredictSoroiSabun2PreTenkanPriceCol = 22
Const PredictSoroiSabun2PrePeakDateCol = 23
Const PredictSoroiSabun2PrePeakTimeCol = 24
Const PredictSoroiSabun2PrePeakValueCol = 25
Const PredictSoroiSabun2PrePeakPriceCol = 26
Const PredictSoroiSabun2PreMiniPeakDateCol = 27
Const PredictSoroiSabun2PreMiniPeakTimeCol = 28
Const PredictSoroiSabun2PreMiniPeakValueCol = 29
Const PredictSoroiSabun2PreMiniPeakPriceCol = 30
Const PredictSoroiSabun2Ore1Col = 31
Const PredictSoroiSabun2Ore2Col = 32
Const PredictSoroiSabun2Pgr0Col = 33
Const PredictSoroiSabun2Pgr2Col = 34
Const PredictSoroiSabun2OPgr2Col = 35
Const PredictSoroiSabun2OPznCol = 36
Const PredictSoroiSabun2Ogr0Col = 37
Const PredictSoroiSabun2Ogr2Col = 38
Const PredictSoroiSabun2OwdCol = 39
Const PredictSoroiSabun2OmvCol = 40
Const PredictSoroiSabun2MinOre1Col = 41
Const PredictSoroiSabun2MinOre2Col = 42
Const PredictSoroiSabun2MinPgr0Col = 43
Const PredictSoroiSabun2MinPgr2Col = 44
Const PredictSoroiSabun2MinOPgr2Col = 45
Const PredictSoroiSabun2MinOPznCol = 46
Const PredictSoroiSabun2MinOgr0Col = 47
Const PredictSoroiSabun2MinOgr2Col = 48
Const PredictSoroiSabun2MinOwdCol = 49
Const PredictSoroiSabun2MinOmvCol = 50
Const PredictSoroiSabun2CValueCol = 51
Const PredictSoroiSabun2MassSumCol = 52
Const PredictSoroiSabun2MassSumZGCol = 53
Const holdPredictSoroiSabun2ColNum = 53

Dim holdPredictSoroiSabun3 'PredictSoroiSabun3関数用変数
Const PredictSoroiSabun3AnsCol = 1
Const PredictSoroiSabun3PeriodCol = 2
Const PredictSoroiSabun3PriceCol = 3
Const PredictSoroiSabun3TenkanDirectCol = 4
Const PredictSoroiSabun3OValueCol = 5
Const PredictSoroiSabun3OValue2Col = 6
Const PredictSoroiSabun3TenkanDateCol = 7
Const PredictSoroiSabun3TenkanTimeCol = 8
Const PredictSoroiSabun3TenkanValueCol = 9
Const PredictSoroiSabun3TenkanPriceCol = 10
Const PredictSoroiSabun3PeakDateCol = 11
Const PredictSoroiSabun3PeakTimeCol = 12
Const PredictSoroiSabun3PeakValueCol = 13
Const PredictSoroiSabun3PeakPriceCol = 14
Const PredictSoroiSabun3MiniPeakDateCol = 15
Const PredictSoroiSabun3MiniPeakTimeCol = 16
Const PredictSoroiSabun3MiniPeakValueCol = 17
Const PredictSoroiSabun3MiniPeakPriceCol = 18
Const PredictSoroiSabun3PreTenkanDateCol = 19
Const PredictSoroiSabun3PreTenkanTimeCol = 20
Const PredictSoroiSabun3PreTenkanValueCol = 21
Const PredictSoroiSabun3PreTenkanPriceCol = 22
Const PredictSoroiSabun3PrePeakDateCol = 23
Const PredictSoroiSabun3PrePeakTimeCol = 24
Const PredictSoroiSabun3PrePeakValueCol = 25
Const PredictSoroiSabun3PrePeakPriceCol = 26
Const PredictSoroiSabun3PreMiniPeakDateCol = 27
Const PredictSoroiSabun3PreMiniPeakTimeCol = 28
Const PredictSoroiSabun3PreMiniPeakValueCol = 29
Const PredictSoroiSabun3PreMiniPeakPriceCol = 30
Const PredictSoroiSabun3Ore1Col = 31
Const PredictSoroiSabun3Ore2Col = 32
Const PredictSoroiSabun3Pgr0Col = 33
Const PredictSoroiSabun3Pgr2Col = 34
Const PredictSoroiSabun3OPgr2Col = 35
Const PredictSoroiSabun3OPznCol = 36
Const PredictSoroiSabun3Ogr0Col = 37
Const PredictSoroiSabun3Ogr2Col = 38
Const PredictSoroiSabun3OwdCol = 39
Const PredictSoroiSabun3OmvCol = 40
Const PredictSoroiSabun3MinOre1Col = 41
Const PredictSoroiSabun3MinOre2Col = 42
Const PredictSoroiSabun3MinPgr0Col = 43
Const PredictSoroiSabun3MinPgr2Col = 44
Const PredictSoroiSabun3MinOPgr2Col = 45
Const PredictSoroiSabun3MinOPznCol = 46
Const PredictSoroiSabun3MinOgr0Col = 47
Const PredictSoroiSabun3MinOgr2Col = 48
Const PredictSoroiSabun3MinOwdCol = 49
Const PredictSoroiSabun3MinOmvCol = 50
Const PredictSoroiSabun3CValueCol = 51
Const PredictSoroiSabun3MassSumCol = 52
Const PredictSoroiSabun3MassSumZGCol = 53
Const holdPredictSoroiSabun3ColNum = 53

Dim holdPredictSoroiSetsuzoku 'PredictSoroiSetsuzoku関数用変数
Const PredictSoroiSetsuzokuAnsCol = 1
Const PredictSoroiSetsuzokuPeriodCol = 2
Const PredictSoroiSetsuzokuPriceCol = 3
Const PredictSoroiSetsuzokuTenkanDirectCol = 4
Const PredictSoroiSetsuzokuOValueCol = 5
Const PredictSoroiSetsuzokuOValue2Col = 6
Const PredictSoroiSetsuzokuTenkanDateCol = 7
Const PredictSoroiSetsuzokuTenkanTimeCol = 8
Const PredictSoroiSetsuzokuTenkanValueCol = 9
Const PredictSoroiSetsuzokuTenkanPriceCol = 10
Const PredictSoroiSetsuzokuPeakDateCol = 11
Const PredictSoroiSetsuzokuPeakTimeCol = 12
Const PredictSoroiSetsuzokuPeakValueCol = 13
Const PredictSoroiSetsuzokuPeakPriceCol = 14
Const PredictSoroiSetsuzokuMiniPeakDateCol = 15
Const PredictSoroiSetsuzokuMiniPeakTimeCol = 16
Const PredictSoroiSetsuzokuMiniPeakValueCol = 17
Const PredictSoroiSetsuzokuMiniPeakPriceCol = 18
Const PredictSoroiSetsuzokuPreTenkanDateCol = 19
Const PredictSoroiSetsuzokuPreTenkanTimeCol = 20
Const PredictSoroiSetsuzokuPreTenkanValueCol = 21
Const PredictSoroiSetsuzokuPreTenkanPriceCol = 22
Const PredictSoroiSetsuzokuPrePeakDateCol = 23
Const PredictSoroiSetsuzokuPrePeakTimeCol = 24
Const PredictSoroiSetsuzokuPrePeakValueCol = 25
Const PredictSoroiSetsuzokuPrePeakPriceCol = 26
Const PredictSoroiSetsuzokuPreMiniPeakDateCol = 27
Const PredictSoroiSetsuzokuPreMiniPeakTimeCol = 28
Const PredictSoroiSetsuzokuPreMiniPeakValueCol = 29
Const PredictSoroiSetsuzokuPreMiniPeakPriceCol = 30
Const PredictSoroiSetsuzokuOre1Col = 31
Const PredictSoroiSetsuzokuOre2Col = 32
Const PredictSoroiSetsuzokuPgr0Col = 33
Const PredictSoroiSetsuzokuPgr2Col = 34
Const PredictSoroiSetsuzokuOPgr2Col = 35
Const PredictSoroiSetsuzokuOPznCol = 36
Const PredictSoroiSetsuzokuOgr0Col = 37
Const PredictSoroiSetsuzokuOgr2Col = 38
Const PredictSoroiSetsuzokuOwdCol = 39
Const PredictSoroiSetsuzokuOmvCol = 40
Const PredictSoroiSetsuzokuMinOre1Col = 41
Const PredictSoroiSetsuzokuMinOre2Col = 42
Const PredictSoroiSetsuzokuMinPgr0Col = 43
Const PredictSoroiSetsuzokuMinPgr2Col = 44
Const PredictSoroiSetsuzokuMinOPgr2Col = 45
Const PredictSoroiSetsuzokuMinOPznCol = 46
Const PredictSoroiSetsuzokuMinOgr0Col = 47
Const PredictSoroiSetsuzokuMinOgr2Col = 48
Const PredictSoroiSetsuzokuMinOwdCol = 49
Const PredictSoroiSetsuzokuMinOmvCol = 50
Const PredictSoroiSetsuzokuCValueCol = 51
Const PredictSoroiSetsuzokuMassSumCol = 52
Const PredictSoroiSetsuzokuMassSumZGCol = 53
Const holdPredictSoroiSetsuzokuColNum = 53

Dim holdPredictSoroisetsuzoku3 'PredictSoroisetsuzoku3関数用変数
Const PredictSoroisetsuzoku3AnsCol = 1
Const PredictSoroisetsuzoku3PeriodCol = 2
Const PredictSoroisetsuzoku3PriceCol = 3
Const PredictSoroisetsuzoku3TenkanDirectCol = 4
Const PredictSoroisetsuzoku3OValueCol = 5
Const PredictSoroisetsuzoku3OValue2Col = 6
Const PredictSoroisetsuzoku3TenkanDateCol = 7
Const PredictSoroisetsuzoku3TenkanTimeCol = 8
Const PredictSoroisetsuzoku3TenkanValueCol = 9
Const PredictSoroisetsuzoku3TenkanPriceCol = 10
Const PredictSoroisetsuzoku3PeakDateCol = 11
Const PredictSoroisetsuzoku3PeakTimeCol = 12
Const PredictSoroisetsuzoku3PeakValueCol = 13
Const PredictSoroisetsuzoku3PeakPriceCol = 14
Const PredictSoroisetsuzoku3MiniPeakDateCol = 15
Const PredictSoroisetsuzoku3MiniPeakTimeCol = 16
Const PredictSoroisetsuzoku3MiniPeakValueCol = 17
Const PredictSoroisetsuzoku3MiniPeakPriceCol = 18
Const PredictSoroisetsuzoku3PreTenkanDateCol = 19
Const PredictSoroisetsuzoku3PreTenkanTimeCol = 20
Const PredictSoroisetsuzoku3PreTenkanValueCol = 21
Const PredictSoroisetsuzoku3PreTenkanPriceCol = 22
Const PredictSoroisetsuzoku3PrePeakDateCol = 23
Const PredictSoroisetsuzoku3PrePeakTimeCol = 24
Const PredictSoroisetsuzoku3PrePeakValueCol = 25
Const PredictSoroisetsuzoku3PrePeakPriceCol = 26
Const PredictSoroisetsuzoku3PreMiniPeakDateCol = 27
Const PredictSoroisetsuzoku3PreMiniPeakTimeCol = 28
Const PredictSoroisetsuzoku3PreMiniPeakValueCol = 29
Const PredictSoroisetsuzoku3PreMiniPeakPriceCol = 30
Const PredictSoroisetsuzoku3Ore1Col = 31
Const PredictSoroisetsuzoku3Ore2Col = 32
Const PredictSoroisetsuzoku3Pgr0Col = 33
Const PredictSoroisetsuzoku3Pgr2Col = 34
Const PredictSoroisetsuzoku3OPgr2Col = 35
Const PredictSoroisetsuzoku3OPznCol = 36
Const PredictSoroisetsuzoku3Ogr0Col = 37
Const PredictSoroisetsuzoku3Ogr2Col = 38
Const PredictSoroisetsuzoku3OwdCol = 39
Const PredictSoroisetsuzoku3OmvCol = 40
Const PredictSoroisetsuzoku3MinOre1Col = 41
Const PredictSoroisetsuzoku3MinOre2Col = 42
Const PredictSoroisetsuzoku3MinPgr0Col = 43
Const PredictSoroisetsuzoku3MinPgr2Col = 44
Const PredictSoroisetsuzoku3MinOPgr2Col = 45
Const PredictSoroisetsuzoku3MinOPznCol = 46
Const PredictSoroisetsuzoku3MinOgr0Col = 47
Const PredictSoroisetsuzoku3MinOgr2Col = 48
Const PredictSoroisetsuzoku3MinOwdCol = 49
Const PredictSoroisetsuzoku3MinOmvCol = 50
Const PredictSoroisetsuzoku3CValueCol = 51
Const PredictSoroisetsuzoku3MassSumCol = 52
Const PredictSoroisetsuzoku3MassSumZGCol = 53
Const holdPredictSoroisetsuzoku3ColNum = 53

Dim holdPredictSoroiSabunPairs 'PredictSoroiSabunPairs関数用変数
Const PredictSoroiSabunPairsAnsCol = 1
Const PredictSoroiSabunPairsPeriodCol = 2
Const PredictSoroiSabunPairsPriceCol1 = 3
Const PredictSoroiSabunPairsTenkanDirectCol1 = 4
Const PredictSoroiSabunPairsOValueCol11 = 5
Const PredictSoroiSabunPairsOValueCol12 = 6
Const PredictSoroiSabunPairsTenkanDateCol1 = 7
Const PredictSoroiSabunPairsTenkanTimeCol1 = 8
Const PredictSoroiSabunPairsTenkanValueCol1 = 9
Const PredictSoroiSabunPairsTenkanPriceCol1 = 10
Const PredictSoroiSabunPairsPeakDateCol1 = 11
Const PredictSoroiSabunPairsPeakTimeCol1 = 12
Const PredictSoroiSabunPairsPeakValueCol1 = 13
Const PredictSoroiSabunPairsPeakPriceCol1 = 14
Const PredictSoroiSabunPairsPreTenkanDateCol1 = 15
Const PredictSoroiSabunPairsPreTenkanTimeCol1 = 16
Const PredictSoroiSabunPairsPreTenkanValueCol1 = 17
Const PredictSoroiSabunPairsPreTenkanPriceCol1 = 18
Const PredictSoroiSabunPairsPrePeakDateCol1 = 19
Const PredictSoroiSabunPairsPrePeakTimeCol1 = 20
Const PredictSoroiSabunPairsPrePeakValueCol1 = 21
Const PredictSoroiSabunPairsPrePeakPriceCol1 = 22
Const PredictSoroiSabunPairsOre1Col1 = 23
Const PredictSoroiSabunPairsOre2Col1 = 24
Const PredictSoroiSabunPairsPgr0Col1 = 25
Const PredictSoroiSabunPairsPgr2Col1 = 26
Const PredictSoroiSabunPairsOPgr2Col1 = 27
Const PredictSoroiSabunPairsOPznCol1 = 28
Const PredictSoroiSabunPairsOgr0Col1 = 29
Const PredictSoroiSabunPairsOgr2Col1 = 30
Const PredictSoroiSabunPairsOwdCol1 = 31
Const PredictSoroiSabunPairsOmvCol1 = 32
Const PredictSoroiSabunPairsCValueCol11 = 33
Const PredictSoroiSabunPairsMassSumCol1 = 34
Const PredictSoroiSabunPairsMassSumZGCol1 = 35

Const PredictSoroiSabunPairsPriceCol2 = 36
Const PredictSoroiSabunPairsTenkanDirectCol2 = 37
Const PredictSoroiSabunPairsOValueCol21 = 38
Const PredictSoroiSabunPairsOValueCol22 = 39
Const PredictSoroiSabunPairsTenkanDateCol2 = 40
Const PredictSoroiSabunPairsTenkanTimeCol2 = 41
Const PredictSoroiSabunPairsTenkanValueCol2 = 42
Const PredictSoroiSabunPairsTenkanPriceCol2 = 43
Const PredictSoroiSabunPairsPeakDateCol2 = 44
Const PredictSoroiSabunPairsPeakTimeCol2 = 45
Const PredictSoroiSabunPairsPeakValueCol2 = 46
Const PredictSoroiSabunPairsPeakPriceCol2 = 47
Const PredictSoroiSabunPairsPreTenkanDateCol2 = 48
Const PredictSoroiSabunPairsPreTenkanTimeCol2 = 49
Const PredictSoroiSabunPairsPreTenkanValueCol2 = 50
Const PredictSoroiSabunPairsPreTenkanPriceCol2 = 51
Const PredictSoroiSabunPairsPrePeakDateCol2 = 52
Const PredictSoroiSabunPairsPrePeakTimeCol2 = 53
Const PredictSoroiSabunPairsPrePeakValueCol2 = 54
Const PredictSoroiSabunPairsPrePeakPriceCol2 = 55
Const PredictSoroiSabunPairsOre1Col2 = 56
Const PredictSoroiSabunPairsOre2Col2 = 57
Const PredictSoroiSabunPairsPgr0Col2 = 58
Const PredictSoroiSabunPairsPgr2Col2 = 59
Const PredictSoroiSabunPairsOPgr2Col2 = 60
Const PredictSoroiSabunPairsOPznCol2 = 61
Const PredictSoroiSabunPairsOgr0Col2 = 62
Const PredictSoroiSabunPairsOgr2Col2 = 63
Const PredictSoroiSabunPairsOwdCol2 = 64
Const PredictSoroiSabunPairsOmvCol2 = 65
Const PredictSoroiSabunPairsCValueCol21 = 66
Const PredictSoroiSabunPairsMassSumCol2 = 67
Const PredictSoroiSabunPairsMassSumZGCol2 = 68

Const PredictSoroiSabunPairsPriceCol3 = 69
Const PredictSoroiSabunPairsTenkanDirectCol3 = 70
Const PredictSoroiSabunPairsOValueCol31 = 71
Const PredictSoroiSabunPairsOValueCol32 = 72
Const PredictSoroiSabunPairsTenkanDateCol3 = 73
Const PredictSoroiSabunPairsTenkanTimeCol3 = 74
Const PredictSoroiSabunPairsTenkanValueCol3 = 75
Const PredictSoroiSabunPairsTenkanPriceCol3 = 76
Const PredictSoroiSabunPairsPeakDateCol3 = 77
Const PredictSoroiSabunPairsPeakTimeCol3 = 78
Const PredictSoroiSabunPairsPeakValueCol3 = 79
Const PredictSoroiSabunPairsPeakPriceCol3 = 80
Const PredictSoroiSabunPairsPreTenkanDateCol3 = 81
Const PredictSoroiSabunPairsPreTenkanTimeCol3 = 82
Const PredictSoroiSabunPairsPreTenkanValueCol3 = 83
Const PredictSoroiSabunPairsPreTenkanPriceCol3 = 84
Const PredictSoroiSabunPairsPrePeakDateCol3 = 85
Const PredictSoroiSabunPairsPrePeakTimeCol3 = 86
Const PredictSoroiSabunPairsPrePeakValueCol3 = 87
Const PredictSoroiSabunPairsPrePeakPriceCol3 = 88
Const PredictSoroiSabunPairsOre1Col3 = 89
Const PredictSoroiSabunPairsOre2Col3 = 90
Const PredictSoroiSabunPairsPgr0Col3 = 91
Const PredictSoroiSabunPairsPgr2Col3 = 92
Const PredictSoroiSabunPairsOPgr2Col3 = 93
Const PredictSoroiSabunPairsOPznCol3 = 94
Const PredictSoroiSabunPairsOgr0Col3 = 95
Const PredictSoroiSabunPairsOgr2Col3 = 96
Const PredictSoroiSabunPairsOwdCol3 = 97
Const PredictSoroiSabunPairsOmvCol3 = 98
Const PredictSoroiSabunPairsCValueCol31 = 99
Const PredictSoroiSabunPairsMassSumCol3 = 100
Const PredictSoroiSabunPairsMassSumZGCol3 = 101

Const PredictSoroiSabunPairsMassSumCol = 102
Const PredictSoroiSabunPairsMassSumZGCol = 103

Const PredictSoroiSabunPairsBnowCol1 = 104
Const PredictSoroiSabunPairsOPratioCol1 = 105
Const PredictSoroiSabunPairsOgr1Col1 = 106
Const PredictSoroiSabunPairsPmvCol1 = 107
Const PredictSoroiSabunPairsOznCol1 = 116

Const PredictSoroiSabunPairsBnowCol2 = 108
Const PredictSoroiSabunPairsOPratioCol2 = 109
Const PredictSoroiSabunPairsOgr1Col2 = 110
Const PredictSoroiSabunPairsPmvCol2 = 111
Const PredictSoroiSabunPairsOznCol2 = 117

Const PredictSoroiSabunPairsBnowCol3 = 112
Const PredictSoroiSabunPairsOPratioCol3 = 113
Const PredictSoroiSabunPairsOgr1Col3 = 114
Const PredictSoroiSabunPairsPmvCol3 = 115
Const PredictSoroiSabunPairsOznCol3 = 118

Const holdPredictSoroiSabunPairsColNum = 118


Dim holdNamasiFullBlockNamasi 'NamasiFullBlockNamasi関数用変数
Const NamasiFullBlockNamasiAnsCol = 1
Const NamasiFullBlockNamasiPeriodCol = 2
Const NamasiFullBlockNamasiPriceCol = 3
Const NamasiFullBlockNamasiTenkanDirectCol = 4
Const NamasiFullBlockNamasiOValueCol = 5
Const NamasiFullBlockNamasiOValue2Col = 6
Const NamasiFullBlockNamasiTenkanDateCol = 7
Const NamasiFullBlockNamasiTenkanTimeCol = 8
Const NamasiFullBlockNamasiTenkanValueCol = 9
Const NamasiFullBlockNamasiTenkanPriceCol = 10
Const NamasiFullBlockNamasiPeakDateCol = 11
Const NamasiFullBlockNamasiPeakTimeCol = 12
Const NamasiFullBlockNamasiPeakValueCol = 13
Const NamasiFullBlockNamasiPeakPriceCol = 14
Const NamasiFullBlockNamasiMiniPeakDateCol = 15
Const NamasiFullBlockNamasiMiniPeakTimeCol = 16
Const NamasiFullBlockNamasiMiniPeakValueCol = 17
Const NamasiFullBlockNamasiMiniPeakPriceCol = 18
Const NamasiFullBlockNamasiPreTenkanDateCol = 19
Const NamasiFullBlockNamasiPreTenkanTimeCol = 20
Const NamasiFullBlockNamasiPreTenkanValueCol = 21
Const NamasiFullBlockNamasiPreTenkanPriceCol = 22
Const NamasiFullBlockNamasiPrePeakDateCol = 23
Const NamasiFullBlockNamasiPrePeakTimeCol = 24
Const NamasiFullBlockNamasiPrePeakValueCol = 25
Const NamasiFullBlockNamasiPrePeakPriceCol = 26
Const NamasiFullBlockNamasiPreMiniPeakDateCol = 27
Const NamasiFullBlockNamasiPreMiniPeakTimeCol = 28
Const NamasiFullBlockNamasiPreMiniPeakValueCol = 29
Const NamasiFullBlockNamasiPreMiniPeakPriceCol = 30
Const NamasiFullBlockNamasiTenkanDate00Col = 31
Const NamasiFullBlockNamasiTenkanTime00Col = 32
Const NamasiFullBlockNamasiTenkanValue00Col = 33
Const NamasiFullBlockNamasiPeakDate00Col = 34
Const NamasiFullBlockNamasiPeakTime00Col = 35
Const NamasiFullBlockNamasiPeakValue00Col = 36
Const NamasiFullBlockNamasiPreTenkanDate00Col = 37
Const NamasiFullBlockNamasiPreTenkanTime00Col = 38
Const NamasiFullBlockNamasiPreTenkanValue00Col = 39
Const NamasiFullBlockNamasiPrePeakDate00Col = 40
Const NamasiFullBlockNamasiPrePeakTime00Col = 41
Const NamasiFullBlockNamasiPrePeakValue00Col = 42
Const NamasiFullBlockNamasiOre00Col = 43
Const NamasiFullBlockNamasiOre0Col = 44
Const NamasiFullBlockNamasiPwdCol = 45
Const NamasiFullBlockNamasiPmvCol = 46
Const NamasiFullBlockNamasiBnowCol = 47
Const NamasiFullBlockNamasiStandardCol = 48
Const NamasiFullBlockNamasiPwdBlockCol = 49
Const NamasiFullBlockNamasiOre0BlockCol = 50
Const NamasiFullBlockNamasiBlockForecastCol = 51
Const NamasiFullBlockNamasiBlockNowCol = 52
Const NamasiFullBlockNamasiBlockNumberCol = 53
Const NamasiFullBlockNamasiUpperRangeCol = 54
Const NamasiFullBlockNamasiLowerRangeCol = 55
Const NamasiFullBlockNamasiGoalPriceCol = 56
Const NamasiFullBlockNamasiGoalBarCol = 57
Const NamasiFullBlockNamasiBlockBarCol = 58
Const NamasiFullBlockNamasiMinOre0Col = 59
Const NamasiFullBlockNamasiMinPwdCol = 60
Const NamasiFullBlockNamasiMinPmvCol = 61
Const NamasiFullBlockNamasiMinBnowCol = 62
Const NamasiFullBlockNamasiMinStandardCol = 63
Const NamasiFullBlockNamasiMinPwdBlockCol = 64
Const NamasiFullBlockNamasiMinOre0BlockCol = 65
Const NamasiFullBlockNamasiMinBlockForecastCol = 66
Const NamasiFullBlockNamasiMinBlockNowCol = 67
Const NamasiFullBlockNamasiMinBlockNumberCol = 68
Const NamasiFullBlockNamasiMinUpperRangeCol = 69
Const NamasiFullBlockNamasiMinLowerRangeCol = 70
Const NamasiFullBlockNamasiMinGoalPriceCol = 71
Const NamasiFullBlockNamasiMinGoalBarCol = 72
Const NamasiFullBlockNamasiMinBlockBarCol = 73
Const NamasiFullBlockNamasiDirectionCol = 74
Const NamasiFullBlockNamasiNamasiCol = 75
Const holdNamasiFullBlockNamasiColNum = 75

Dim holdNamasiFullBlockDirection 'NamasiFullBlockDirection関数用変数
Const NamasiFullBlockDirectionAnsCol = 1
Const NamasiFullBlockDirectionPeriodCol = 2
Const NamasiFullBlockDirectionPriceCol = 3
Const NamasiFullBlockDirectionTenkanDirectCol = 4
Const NamasiFullBlockDirectionOValueCol = 5
Const NamasiFullBlockDirectionOValue2Col = 6
Const NamasiFullBlockDirectionTenkanDateCol = 7
Const NamasiFullBlockDirectionTenkanTimeCol = 8
Const NamasiFullBlockDirectionTenkanValueCol = 9
Const NamasiFullBlockDirectionTenkanPriceCol = 10
Const NamasiFullBlockDirectionPeakDateCol = 11
Const NamasiFullBlockDirectionPeakTimeCol = 12
Const NamasiFullBlockDirectionPeakValueCol = 13
Const NamasiFullBlockDirectionPeakPriceCol = 14
Const NamasiFullBlockDirectionMiniPeakDateCol = 15
Const NamasiFullBlockDirectionMiniPeakTimeCol = 16
Const NamasiFullBlockDirectionMiniPeakValueCol = 17
Const NamasiFullBlockDirectionMiniPeakPriceCol = 18
Const NamasiFullBlockDirectionPreTenkanDateCol = 19
Const NamasiFullBlockDirectionPreTenkanTimeCol = 20
Const NamasiFullBlockDirectionPreTenkanValueCol = 21
Const NamasiFullBlockDirectionPreTenkanPriceCol = 22
Const NamasiFullBlockDirectionPrePeakDateCol = 23
Const NamasiFullBlockDirectionPrePeakTimeCol = 24
Const NamasiFullBlockDirectionPrePeakValueCol = 25
Const NamasiFullBlockDirectionPrePeakPriceCol = 26
Const NamasiFullBlockDirectionPreMiniPeakDateCol = 27
Const NamasiFullBlockDirectionPreMiniPeakTimeCol = 28
Const NamasiFullBlockDirectionPreMiniPeakValueCol = 29
Const NamasiFullBlockDirectionPreMiniPeakPriceCol = 30
Const NamasiFullBlockDirectionTenkanDate00Col = 31
Const NamasiFullBlockDirectionTenkanTime00Col = 32
Const NamasiFullBlockDirectionTenkanValue00Col = 33
Const NamasiFullBlockDirectionPeakDate00Col = 34
Const NamasiFullBlockDirectionPeakTime00Col = 35
Const NamasiFullBlockDirectionPeakValue00Col = 36
Const NamasiFullBlockDirectionPreTenkanDate00Col = 37
Const NamasiFullBlockDirectionPreTenkanTime00Col = 38
Const NamasiFullBlockDirectionPreTenkanValue00Col = 39
Const NamasiFullBlockDirectionPrePeakDate00Col = 40
Const NamasiFullBlockDirectionPrePeakTime00Col = 41
Const NamasiFullBlockDirectionPrePeakValue00Col = 42
Const NamasiFullBlockDirectionOre00Col = 43
Const NamasiFullBlockDirectionOre0Col = 44
Const NamasiFullBlockDirectionPwdCol = 45
Const NamasiFullBlockDirectionPmvCol = 46
Const NamasiFullBlockDirectionBnowCol = 47
Const NamasiFullBlockDirectionStandardCol = 48
Const NamasiFullBlockDirectionPwdBlockCol = 49
Const NamasiFullBlockDirectionOre0BlockCol = 50
Const NamasiFullBlockDirectionBlockForecastCol = 51
Const NamasiFullBlockDirectionBlockNowCol = 52
Const NamasiFullBlockDirectionBlockNumberCol = 53
Const NamasiFullBlockDirectionUpperRangeCol = 54
Const NamasiFullBlockDirectionLowerRangeCol = 55
Const NamasiFullBlockDirectionGoalPriceCol = 56
Const NamasiFullBlockDirectionGoalBarCol = 57
Const NamasiFullBlockDirectionBlockBarCol = 58
Const NamasiFullBlockDirectionMinOre0Col = 59
Const NamasiFullBlockDirectionMinPwdCol = 60
Const NamasiFullBlockDirectionMinPmvCol = 61
Const NamasiFullBlockDirectionMinBnowCol = 62
Const NamasiFullBlockDirectionMinStandardCol = 63
Const NamasiFullBlockDirectionMinPwdBlockCol = 64
Const NamasiFullBlockDirectionMinOre0BlockCol = 65
Const NamasiFullBlockDirectionMinBlockForecastCol = 66
Const NamasiFullBlockDirectionMinBlockNowCol = 67
Const NamasiFullBlockDirectionMinBlockNumberCol = 68
Const NamasiFullBlockDirectionMinUpperRangeCol = 69
Const NamasiFullBlockDirectionMinLowerRangeCol = 70
Const NamasiFullBlockDirectionMinGoalPriceCol = 71
Const NamasiFullBlockDirectionMinGoalBarCol = 72
Const NamasiFullBlockDirectionMinBlockBarCol = 73
Const NamasiFullBlockDirectionDirectionCol = 74
Const NamasiFullBlockDirectionNamasiCol = 75
Const holdNamasiFullBlockDirectionColNum = 75

Dim holdNamasiFullBlockBar 'NamasiFullBlockBar関数用変数
Const NamasiFullBlockBarAnsCol = 1
Const NamasiFullBlockBarPeriodCol = 2
Const NamasiFullBlockBarPriceCol = 3
Const NamasiFullBlockBarTenkanDirectCol = 4
Const NamasiFullBlockBarOValueCol = 5
Const NamasiFullBlockBarOValue2Col = 6
Const NamasiFullBlockBarTenkanDateCol = 7
Const NamasiFullBlockBarTenkanTimeCol = 8
Const NamasiFullBlockBarTenkanValueCol = 9
Const NamasiFullBlockBarTenkanPriceCol = 10
Const NamasiFullBlockBarPeakDateCol = 11
Const NamasiFullBlockBarPeakTimeCol = 12
Const NamasiFullBlockBarPeakValueCol = 13
Const NamasiFullBlockBarPeakPriceCol = 14
Const NamasiFullBlockBarMiniPeakDateCol = 15
Const NamasiFullBlockBarMiniPeakTimeCol = 16
Const NamasiFullBlockBarMiniPeakValueCol = 17
Const NamasiFullBlockBarMiniPeakPriceCol = 18
Const NamasiFullBlockBarPreTenkanDateCol = 19
Const NamasiFullBlockBarPreTenkanTimeCol = 20
Const NamasiFullBlockBarPreTenkanValueCol = 21
Const NamasiFullBlockBarPreTenkanPriceCol = 22
Const NamasiFullBlockBarPrePeakDateCol = 23
Const NamasiFullBlockBarPrePeakTimeCol = 24
Const NamasiFullBlockBarPrePeakValueCol = 25
Const NamasiFullBlockBarPrePeakPriceCol = 26
Const NamasiFullBlockBarPreMiniPeakDateCol = 27
Const NamasiFullBlockBarPreMiniPeakTimeCol = 28
Const NamasiFullBlockBarPreMiniPeakValueCol = 29
Const NamasiFullBlockBarPreMiniPeakPriceCol = 30
Const NamasiFullBlockBarTenkanDate00Col = 31
Const NamasiFullBlockBarTenkanTime00Col = 32
Const NamasiFullBlockBarTenkanValue00Col = 33
Const NamasiFullBlockBarPeakDate00Col = 34
Const NamasiFullBlockBarPeakTime00Col = 35
Const NamasiFullBlockBarPeakValue00Col = 36
Const NamasiFullBlockBarPreTenkanDate00Col = 37
Const NamasiFullBlockBarPreTenkanTime00Col = 38
Const NamasiFullBlockBarPreTenkanValue00Col = 39
Const NamasiFullBlockBarPrePeakDate00Col = 40
Const NamasiFullBlockBarPrePeakTime00Col = 41
Const NamasiFullBlockBarPrePeakValue00Col = 42
Const NamasiFullBlockBarOre00Col = 43
Const NamasiFullBlockBarOre0Col = 44
Const NamasiFullBlockBarPwdCol = 45
Const NamasiFullBlockBarPmvCol = 46
Const NamasiFullBlockBarBnowCol = 47
Const NamasiFullBlockBarStandardCol = 48
Const NamasiFullBlockBarPwdBlockCol = 49
Const NamasiFullBlockBarOre0BlockCol = 50
Const NamasiFullBlockBarBlockForecastCol = 51
Const NamasiFullBlockBarBlockNowCol = 52
Const NamasiFullBlockBarBlockNumberCol = 53
Const NamasiFullBlockBarUpperRangeCol = 54
Const NamasiFullBlockBarLowerRangeCol = 55
Const NamasiFullBlockBarGoalPriceCol = 56
Const NamasiFullBlockBarGoalBarCol = 57
Const NamasiFullBlockBarBlockBarCol = 58
Const NamasiFullBlockBarMinOre0Col = 59
Const NamasiFullBlockBarMinPwdCol = 60
Const NamasiFullBlockBarMinPmvCol = 61
Const NamasiFullBlockBarMinBnowCol = 62
Const NamasiFullBlockBarMinStandardCol = 63
Const NamasiFullBlockBarMinPwdBlockCol = 64
Const NamasiFullBlockBarMinOre0BlockCol = 65
Const NamasiFullBlockBarMinBlockForecastCol = 66
Const NamasiFullBlockBarMinBlockNowCol = 67
Const NamasiFullBlockBarMinBlockNumberCol = 68
Const NamasiFullBlockBarMinUpperRangeCol = 69
Const NamasiFullBlockBarMinLowerRangeCol = 70
Const NamasiFullBlockBarMinGoalPriceCol = 71
Const NamasiFullBlockBarMinGoalBarCol = 72
Const NamasiFullBlockBarMinBlockBarCol = 73
Const NamasiFullBlockBarDirectionCol = 74
Const NamasiFullBlockBarNamasiCol = 75
Const holdNamasiFullBlockBarColNum = 75

Dim holdNamasiFullPrices 'NamasiFullPrices関数用変数
Const NamasiFullPricesAnsCol = 1
Const NamasiFullPricesPeriodCol = 2
Const NamasiFullPricesPriceCol = 3
Const NamasiFullPricesTenkanDirectCol = 4
Const NamasiFullPricesOValueCol = 5
Const NamasiFullPricesOValue2Col = 6
Const NamasiFullPricesTenkanDateCol = 7
Const NamasiFullPricesTenkanTimeCol = 8
Const NamasiFullPricesTenkanValueCol = 9
Const NamasiFullPricesTenkanPriceCol = 10
Const NamasiFullPricesPeakDateCol = 11
Const NamasiFullPricesPeakTimeCol = 12
Const NamasiFullPricesPeakValueCol = 13
Const NamasiFullPricesPeakPriceCol = 14
Const NamasiFullPricesMiniPeakDateCol = 15
Const NamasiFullPricesMiniPeakTimeCol = 16
Const NamasiFullPricesMiniPeakValueCol = 17
Const NamasiFullPricesMiniPeakPriceCol = 18
Const NamasiFullPricesPreTenkanDateCol = 19
Const NamasiFullPricesPreTenkanTimeCol = 20
Const NamasiFullPricesPreTenkanValueCol = 21
Const NamasiFullPricesPreTenkanPriceCol = 22
Const NamasiFullPricesPrePeakDateCol = 23
Const NamasiFullPricesPrePeakTimeCol = 24
Const NamasiFullPricesPrePeakValueCol = 25
Const NamasiFullPricesPrePeakPriceCol = 26
Const NamasiFullPricesPreMiniPeakDateCol = 27
Const NamasiFullPricesPreMiniPeakTimeCol = 28
Const NamasiFullPricesPreMiniPeakValueCol = 29
Const NamasiFullPricesPreMiniPeakPriceCol = 30
Const NamasiFullPricesTenkanDate00Col = 31
Const NamasiFullPricesTenkanTime00Col = 32
Const NamasiFullPricesTenkanValue00Col = 33
Const NamasiFullPricesPeakDate00Col = 34
Const NamasiFullPricesPeakTime00Col = 35
Const NamasiFullPricesPeakValue00Col = 36
Const NamasiFullPricesPreTenkanDate00Col = 37
Const NamasiFullPricesPreTenkanTime00Col = 38
Const NamasiFullPricesPreTenkanValue00Col = 39
Const NamasiFullPricesPrePeakDate00Col = 40
Const NamasiFullPricesPrePeakTime00Col = 41
Const NamasiFullPricesPrePeakValue00Col = 42
Const NamasiFullPricesOre00Col = 43
Const NamasiFullPricesOre0Col = 44
Const NamasiFullPricesPwdCol = 45
Const NamasiFullPricesPmvCol = 46
Const NamasiFullPricesBnowCol = 47
Const NamasiFullPricesStandardCol = 48
Const NamasiFullPricesPwdBlockCol = 49
Const NamasiFullPricesOre0BlockCol = 50
Const NamasiFullPricesBlockForecastCol = 51
Const NamasiFullPricesBlockNowCol = 52
Const NamasiFullPricesBlockNumberCol = 53
Const NamasiFullPricesUpperRangeCol = 54
Const NamasiFullPricesLowerRangeCol = 55
Const NamasiFullPricesGoalPriceCol = 56
Const NamasiFullPricesGoalBarCol = 57
Const NamasiFullPricesBlockBarCol = 58
Const NamasiFullPricesMinOre0Col = 59
Const NamasiFullPricesMinPwdCol = 60
Const NamasiFullPricesMinPmvCol = 61
Const NamasiFullPricesMinBnowCol = 62
Const NamasiFullPricesMinStandardCol = 63
Const NamasiFullPricesMinPwdBlockCol = 64
Const NamasiFullPricesMinOre0BlockCol = 65
Const NamasiFullPricesMinBlockForecastCol = 66
Const NamasiFullPricesMinBlockNowCol = 67
Const NamasiFullPricesMinBlockNumberCol = 68
Const NamasiFullPricesMinUpperRangeCol = 69
Const NamasiFullPricesMinLowerRangeCol = 70
Const NamasiFullPricesMinGoalPriceCol = 71
Const NamasiFullPricesMinGoalBarCol = 72
Const NamasiFullPricesMinBlockBarCol = 73
Const NamasiFullPricesDirectionCol = 74
Const NamasiFullPricesNamasiCol = 75
Const holdNamasiFullPricesColNum = 75

Dim holdNamasiFullBlockNumber 'NamasiFullBlockNumber関数用変数
Const NamasiFullBlockNumberAnsCol = 1
Const NamasiFullBlockNumberPeriodCol = 2
Const NamasiFullBlockNumberPriceCol = 3
Const NamasiFullBlockNumberTenkanDirectCol = 4
Const NamasiFullBlockNumberOValueCol = 5
Const NamasiFullBlockNumberOValue2Col = 6
Const NamasiFullBlockNumberTenkanDateCol = 7
Const NamasiFullBlockNumberTenkanTimeCol = 8
Const NamasiFullBlockNumberTenkanValueCol = 9
Const NamasiFullBlockNumberTenkanPriceCol = 10
Const NamasiFullBlockNumberPeakDateCol = 11
Const NamasiFullBlockNumberPeakTimeCol = 12
Const NamasiFullBlockNumberPeakValueCol = 13
Const NamasiFullBlockNumberPeakPriceCol = 14
Const NamasiFullBlockNumberMiniPeakDateCol = 15
Const NamasiFullBlockNumberMiniPeakTimeCol = 16
Const NamasiFullBlockNumberMiniPeakValueCol = 17
Const NamasiFullBlockNumberMiniPeakPriceCol = 18
Const NamasiFullBlockNumberPreTenkanDateCol = 19
Const NamasiFullBlockNumberPreTenkanTimeCol = 20
Const NamasiFullBlockNumberPreTenkanValueCol = 21
Const NamasiFullBlockNumberPreTenkanPriceCol = 22
Const NamasiFullBlockNumberPrePeakDateCol = 23
Const NamasiFullBlockNumberPrePeakTimeCol = 24
Const NamasiFullBlockNumberPrePeakValueCol = 25
Const NamasiFullBlockNumberPrePeakPriceCol = 26
Const NamasiFullBlockNumberPreMiniPeakDateCol = 27
Const NamasiFullBlockNumberPreMiniPeakTimeCol = 28
Const NamasiFullBlockNumberPreMiniPeakValueCol = 29
Const NamasiFullBlockNumberPreMiniPeakPriceCol = 30
Const NamasiFullBlockNumberTenkanDate00Col = 31
Const NamasiFullBlockNumberTenkanTime00Col = 32
Const NamasiFullBlockNumberTenkanValue00Col = 33
Const NamasiFullBlockNumberPeakDate00Col = 34
Const NamasiFullBlockNumberPeakTime00Col = 35
Const NamasiFullBlockNumberPeakValue00Col = 36
Const NamasiFullBlockNumberPreTenkanDate00Col = 37
Const NamasiFullBlockNumberPreTenkanTime00Col = 38
Const NamasiFullBlockNumberPreTenkanValue00Col = 39
Const NamasiFullBlockNumberPrePeakDate00Col = 40
Const NamasiFullBlockNumberPrePeakTime00Col = 41
Const NamasiFullBlockNumberPrePeakValue00Col = 42
Const NamasiFullBlockNumberOre00Col = 43
Const NamasiFullBlockNumberOre0Col = 44
Const NamasiFullBlockNumberPwdCol = 45
Const NamasiFullBlockNumberPmvCol = 46
Const NamasiFullBlockNumberBnowCol = 47
Const NamasiFullBlockNumberStandardCol = 48
Const NamasiFullBlockNumberPwdBlockCol = 49
Const NamasiFullBlockNumberOre0BlockCol = 50
Const NamasiFullBlockNumberBlockForecastCol = 51
Const NamasiFullBlockNumberBlockNowCol = 52
Const NamasiFullBlockNumberBlockNumberCol = 53
Const NamasiFullBlockNumberUpperRangeCol = 54
Const NamasiFullBlockNumberLowerRangeCol = 55
Const NamasiFullBlockNumberGoalPriceCol = 56
Const NamasiFullBlockNumberGoalBarCol = 57
Const NamasiFullBlockNumberBlockBarCol = 58
Const NamasiFullBlockNumberMinOre0Col = 59
Const NamasiFullBlockNumberMinPwdCol = 60
Const NamasiFullBlockNumberMinPmvCol = 61
Const NamasiFullBlockNumberMinBnowCol = 62
Const NamasiFullBlockNumberMinStandardCol = 63
Const NamasiFullBlockNumberMinPwdBlockCol = 64
Const NamasiFullBlockNumberMinOre0BlockCol = 65
Const NamasiFullBlockNumberMinBlockForecastCol = 66
Const NamasiFullBlockNumberMinBlockNowCol = 67
Const NamasiFullBlockNumberMinBlockNumberCol = 68
Const NamasiFullBlockNumberMinUpperRangeCol = 69
Const NamasiFullBlockNumberMinLowerRangeCol = 70
Const NamasiFullBlockNumberMinGoalPriceCol = 71
Const NamasiFullBlockNumberMinGoalBarCol = 72
Const NamasiFullBlockNumberMinBlockBarCol = 73
Const NamasiFullBlockNumberDirectionCol = 74
Const NamasiFullBlockNumberNamasiCol = 75
Const holdNamasiFullBlockNumberColNum = 75

Dim holdDivide 'Divide関数用変数
Const DivideAnsCol = 1
Const DivideOValueCol = 2
Const DivideOValue2Col = 3
Const holdDivideColNum = 3

Dim holdMultiple 'Multiple関数用変数
Const MultipleAnsCol = 1
Const MultipleOValueCol = 2
Const MultipleOValue2Col = 3
Const holdMultipleColNum = 3

Dim holdTradeVolume 'TradeVolume関数用変数
Const TradeVolumeAnsCol = 1
Const TradeVolumePeriodCol = 2
Const TradeVolumePriceCol = 3
Const TradeVolumeTenkanDirectCol = 4
Const TradeVolumeOValueCol = 5
Const TradeVolumeOValue2Col = 6
Const TradeVolumeTenkanDateCol = 7
Const TradeVolumeTenkanTimeCol = 8
Const TradeVolumeTenkanValueCol = 9
Const TradeVolumeTenkanPriceCol = 10
Const TradeVolumePeakDateCol = 11
Const TradeVolumePeakTimeCol = 12
Const TradeVolumePeakValueCol = 13
Const TradeVolumePeakPriceCol = 14
Const TradeVolumePreTenkanDateCol = 15
Const TradeVolumePreTenkanTimeCol = 16
Const TradeVolumePreTenkanValueCol = 17
Const TradeVolumePreTenkanPriceCol = 18
Const TradeVolumePrePeakDateCol = 19
Const TradeVolumePrePeakTimeCol = 20
Const TradeVolumePrePeakValueCol = 21
Const TradeVolumePrePeakPriceCol = 22
Const TradeVolumeTenkanDate00Col = 23
Const TradeVolumeTenkanTime00Col = 24
Const TradeVolumeTenkanValue00Col = 25
Const TradeVolumePeakDate00Col = 26
Const TradeVolumePeakTime00Col = 27
Const TradeVolumePeakValue00Col = 28
Const TradeVolumePreTenkanDate00Col = 29
Const TradeVolumePreTenkanTime00Col = 30
Const TradeVolumePreTenkanValue00Col = 31
Const TradeVolumePrePeakDate00Col = 32
Const TradeVolumePrePeakTime00Col = 33
Const TradeVolumePrePeakValue00Col = 34

Const TradeVolumeIncreaseMaxValueCol = 35
Const TradeVolumeIncreaseMaxValue_SubCol = 36
Const TradeVolumeDecreaseMinValueCol = 37
Const TradeVolumeDecreaseMinValue_SubCol = 38
Const TradeVolumeIncreaseMaxPriceCol = 39
Const TradeVolumeIncreaseMaxPrice_SubCol = 40
Const TradeVolumeDecreaseMinPriceCol = 41
Const TradeVolumeDecreaseMinPrice_SubCol = 42
Const TradeVolumePreIncreaseMaxValueCol = 43
Const TradeVolumePreIncreaseMaxValue_SubCol = 44
Const TradeVolumePreDecreaseMinValueCol = 45
Const TradeVolumePreDecreaseMinValue_SubCol = 46
Const TradeVolumePreIncreaseMaxPriceCol = 47
Const TradeVolumePreIncreaseMaxPrice_SubCol = 48
Const TradeVolumePreDecreaseMinPriceCol = 49
Const TradeVolumePreDecreaseMinPrice_SubCol = 50
Const TradeVolumeVolumeLogCol = 51
Const TradeVolumeOLogCol = 52
Const TradeVolumeOre0Col = 53
Const TradeVolumeOwdCol = 54
Const TradeVolumeOperCol = 55
Const TradeVolumeOzureCol = 56
Const TradeVolumeVperCol = 57
Const TradeVolumeVzureCol = 58
Const TradeVolumeBznCol = 59
Const TradeVolumeO1sumCol = 60
Const TradeVolumeO2sumCol = 61
Const TradeVolumeO3sumCol = 62
Const TradeVolumeO1perCol = 63
Const TradeVolumeO2perCol = 64
Const TradeVolumeO3perCol = 65
Const holdTradeVolumeColNum = 65

Dim holdTradeVolume2 'TradeVolume2関数用変数
Const TradeVolume2Owd2Col = 1
Const TradeVolume2TenkanmavalueCol = 2
Const TradeVolume2PeakmavalueCol = 3
Const TradeVolume2O1sumCol = 4
Const TradeVolume2Ozn2Col = 5
Const TradeVolume2O1perCol = 6
Const TradeVolume2Osnow2Col = 7
Const holdTradeVolume2ColNum = 7

Dim holdGoalPredict100 'GoalPredict100関数用変数
Const GoalPredict100AnsCol = 1
Const GoalPredict100PeriodCol = 2
Const GoalPredict100PriceCol = 3
Const GoalPredict100TenkanDirectCol = 4
Const GoalPredict100OValueCol = 5
Const GoalPredict100OValue2Col = 6
Const GoalPredict100TenkanDateCol = 7
Const GoalPredict100TenkanTimeCol = 8
Const GoalPredict100TenkanValueCol = 9
Const GoalPredict100TenkanPriceCol = 10
Const GoalPredict100PeakDateCol = 11
Const GoalPredict100PeakTimeCol = 12
Const GoalPredict100PeakValueCol = 13
Const GoalPredict100PeakPriceCol = 14
Const GoalPredict100PreTenkanDateCol = 15
Const GoalPredict100PreTenkanTimeCol = 16
Const GoalPredict100PreTenkanValueCol = 17
Const GoalPredict100PreTenkanPriceCol = 18
Const GoalPredict100PrePeakDateCol = 19
Const GoalPredict100PrePeakTimeCol = 20
Const GoalPredict100PrePeakValueCol = 21
Const GoalPredict100PrePeakPriceCol = 22
Const GoalPredict100TenkanDate00Col = 23
Const GoalPredict100TenkanTime00Col = 24
Const GoalPredict100TenkanValue00Col = 25
Const GoalPredict100PeakDate00Col = 26
Const GoalPredict100PeakTime00Col = 27
Const GoalPredict100PeakValue00Col = 28
Const GoalPredict100PreTenkanDate00Col = 29
Const GoalPredict100PreTenkanTime00Col = 30
Const GoalPredict100PreTenkanValue00Col = 31
Const GoalPredict100PrePeakDate00Col = 32
Const GoalPredict100PrePeakTime00Col = 33
Const GoalPredict100PrePeakValue00Col = 34

Const GoalPredict100Ore0Col = 35
Const GoalPredict100OwdCol = 36
Const GoalPredict100OperCol = 37
Const GoalPredict100OzureCol = 38
Const GoalPredict100VperCol = 39
Const GoalPredict100VzureCol = 40
Const GoalPredict100BznCol = 41
Const GoalPredict100O1sumCol = 42
Const GoalPredict100O2sumCol = 43
Const GoalPredict100O3sumCol = 44
Const GoalPredict100O1perCol = 45
Const GoalPredict100O2perCol = 46
Const GoalPredict100O3perCol = 47

Const GoalPredict100UpCountCol = 48
Const GoalPredict100UpCountAfterCol = 49
Const GoalPredict100PreUpCountAfterCol = 50
Const GoalPredict100PreUpCountCol = 51
Const GoalPredict100Ore1Col = 52
Const holdGoalPredict100ColNum = 52

Dim holdFractalCount 'FractalCount関数用変数
Const FractalCountAnsBarHCol = 1
Const FractalCountAnsBarLCol = 2
Const FractalCountAnsMainHCol = 3
Const FractalCountAnsMainLCol = 4
Const FractalCountAnsSubHCol = 5
Const FractalCountAnsSubLCol = 6
Const FractalCountOpen0Col = 7
Const FractalCountHigh1Col = 8
Const FractalCountHigh2Col = 9
Const FractalCountHigh3Col = 10
Const FractalCountHigh4Col = 11
Const FractalCountHigh5Col = 12
Const FractalCountLow1Col = 13
Const FractalCountLow2Col = 14
Const FractalCountLow3Col = 15
Const FractalCountLow4Col = 16
Const FractalCountLow5Col = 17
Const FractalCountHighBarCol = 18
Const FractalCountLowBarCol = 19
Const holdFractalCountColNum = 19

Dim holdFractalPercent 'FractalPercent関数用変数
Const FractalPercentAnsHCol = 1
Const FractalPercentAnsLCol = 2
Const FractalPercentOpen0Col = 3
Const FractalPercentMainHCol = 4
Const FractalPercentMainLCol = 5
Const FractalPercentSubHCol = 6
Const FractalPercentSubLCol = 7
Const holdFractalPercentColNum = 7

Dim holdFractalSinchoku 'FractalSinchoku関数用変数
Const FractalSinchokuAnsCol = 1
Const FractalSinchokuOpen0Col = 2
Const holdFractalSinchokuColNum = 2

Dim holdFractalTiming 'FractalTiming関数用変数
Const FractalTimingAnshCol = 1
Const FractalTimingAnslCol = 2
Const FractalTimingHigh1Col = 3
Const FractalTimingLow1Col = 4
Const FractalTimingHigh2Col = 5
Const FractalTimingLow2Col = 6
Const holdFractalTimingColNum = 6

Dim holdHeikenReal 'HeikenReal関数用変数
Const HeikenRealOpenCol = 1
Const HeikenRealHighCol = 2
Const HeikenRealLowCol = 3
Const HeikenRealCloseCol = 4
Const holdHeikenRealColNum = 4

Dim holdRousokuIkiKaeri 'RousokuIkiKaeri関数用変数
Const RousokuIkiKaeriPlusCountCol = 1
Const RousokuIkiKaeriMinusCountCol = 2
Const RousokuIkiKaeriPlusStartOpenCol = 3
Const RousokuIkiKaeriMinusStartOpenCol = 4
Const RousokuIkiKaeriOpen0Col = 5
Const RousokuIkiKaeriOpen1Col = 6
Const RousokuIkiKaeriAnswerCol = 7
Const holdRousokuIkiKaeriColNum = 7

Dim holdRousokuIkiKaeriVariable 'RousokuIkiKaeriVariable関数用変数
Const RousokuIkiKaeriVariablePlusCountCol = 1
Const RousokuIkiKaeriVariableMinusCountCol = 2
Const RousokuIkiKaeriVariablePlusStartOpenCol = 3
Const RousokuIkiKaeriVariableMinusStartOpenCol = 4
Const RousokuIkiKaeriVariablePlusOpenGroupCol = 5
Const RousokuIkiKaeriVariableMinusOpenGroupCol = 6
Const RousokuIkiKaeriVariableOpen0Col = 7
Const RousokuIkiKaeriVariableOpen1Col = 8
Const RousokuIkiKaeriVariableAnswerCol = 9
Const holdRousokuIkiKaeriVariableColNum = 9

Dim holdAverage 'Average関数用変数
Const AverageHoldCountCol = 1
Const AverageHoldGroupCol = 2
Const AverageAnswerCol = 3
Const holdAverageColNum = 3

Dim holdAverageRousokuIkiKaeriVariable 'AverageRousokuIkiKaeriVariable関数用変数
Const AverageRousokuIkiKaeriVariablePlusCountCol = 1
Const AverageRousokuIkiKaeriVariableMinusCountCol = 2
Const AverageRousokuIkiKaeriVariablePlusStartOpenCol = 3
Const AverageRousokuIkiKaeriVariablePlusStartCloseCol = 4
Const AverageRousokuIkiKaeriVariableMinusStartOpenCol = 5
Const AverageRousokuIkiKaeriVariableMinusStartCloseCol = 6
Const AverageRousokuIkiKaeriVariablePlusOpenGroupCol = 7
Const AverageRousokuIkiKaeriVariablePlusCloseGroupCol = 8
Const AverageRousokuIkiKaeriVariableMinusOpenGroupCol = 9
Const AverageRousokuIkiKaeriVariableMinusCloseGroupCol = 10
Const AverageRousokuIkiKaeriVariableOpen0Col = 11
Const AverageRousokuIkiKaeriVariableOpen1Col = 12
Const AverageRousokuIkiKaeriVariableAnswerCol = 13
Const AverageRousokuIkiKaeriVariableOp1Col = 14
Const AverageRousokuIkiKaeriVariableCl1Col = 15
Const holdAverageRousokuIkiKaeriVariableColNum = 15

Dim holdAverageHeiken 'AverageHeiken関数用変数
Const AverageHeikenHoldVnow1Col = 1
Const AverageHeikenHoldVnow2Col = 2
Const AverageHeikenHoldVnow3Col = 3
Const AverageHeikenHoldVpre1Col = 4
Const AverageHeikenHoldVpre2Col = 5
Const AverageHeikenHoldVpre3Col = 6
Const AverageHeikenHoldCountNowCol = 7
Const AverageHeikenHoldSumNowCol = 8
Const AverageHeikenHoldCountPreCol = 9
Const AverageHeikenHoldSumPreCol = 10
Const AverageHeikenAnswerNowCol = 11
Const AverageHeikenAnswerPreCol = 12
Const holdAverageHeikenColNum = 12

Dim holdFractalAnaume 'FractalAnaume関数用変数
Const FractalAnaumeAnswer1Col = 1
Const FractalAnaumeAnswer2Col = 2
Const FractalAnaumeFractalFlagCol = 3
Const holdFractalAnaumeColNum = 3

'リーダー時使用変数
Dim holdLeaderRatio1_1  'LeaderRatio用変数
Dim holdLeaderRatio1_2  'LeaderRatio用変数
Dim holdLeaderRatio1_3  'LeaderRatio用変数
Dim holdLeaderRatio1_12  'LeaderRatio用変数2
Dim holdLeaderRatio1_22  'LeaderRatio用変数2
Dim holdLeaderRatio1_32  'LeaderRatio用変数2

Dim holdLeaderRatio2_1  'LeaderRatio用変数
Dim holdLeaderRatio2_2  'LeaderRatio用変数
Dim holdLeaderRatio2_3  'LeaderRatio用変数
Dim holdLeaderRatio2_12  'LeaderRatio用変数2
Dim holdLeaderRatio2_22  'LeaderRatio用変数2
Dim holdLeaderRatio2_32  'LeaderRatio用変数2

Dim holdLeaderRatio3_1  'LeaderRatio用変数
Dim holdLeaderRatio3_2  'LeaderRatio用変数
Dim holdLeaderRatio3_3  'LeaderRatio用変数
Dim holdLeaderRatio3_12  'LeaderRatio用変数2
Dim holdLeaderRatio3_22  'LeaderRatio用変数2
Dim holdLeaderRatio3_32  'LeaderRatio用変数2

'かい離評価時使用変数
Dim holdKairiHeiken1_11 'かい離用変数
Dim holdKairiHeiken1_21 'かい離用変数
Dim holdKairiHeiken1_31 'かい離用変数
Dim holdKairiHeiken1_12 'かい離用変数
Dim holdKairiHeiken1_22 'かい離用変数
Dim holdKairiHeiken1_32 'かい離用変数
Dim holdKairiHeikens1_11 'かい離用変数
Dim holdKairiHeikens1_12 'かい離用変数
Dim holdKairiHeikens1_21 'かい離用変数
Dim holdKairiHeikens1_22 'かい離用変数
Dim holdKairiHeikens1_31 'かい離用変数
Dim holdKairiHeikens1_32 'かい離用変数

Dim holdKairiHeiken2_11 'かい離用変数
Dim holdKairiHeiken2_21 'かい離用変数
Dim holdKairiHeiken2_31 'かい離用変数
Dim holdKairiHeiken2_12 'かい離用変数
Dim holdKairiHeiken2_22 'かい離用変数
Dim holdKairiHeiken2_32 'かい離用変数
Dim holdKairiHeikens2_11 'かい離用変数
Dim holdKairiHeikens2_12 'かい離用変数
Dim holdKairiHeikens2_21 'かい離用変数
Dim holdKairiHeikens2_22 'かい離用変数
Dim holdKairiHeikens2_31 'かい離用変数
Dim holdKairiHeikens2_32 'かい離用変数

Dim holdKairiHeiken3_11 'かい離用変数
Dim holdKairiHeiken3_21 'かい離用変数
Dim holdKairiHeiken3_31 'かい離用変数
Dim holdKairiHeiken3_12 'かい離用変数
Dim holdKairiHeiken3_22 'かい離用変数
Dim holdKairiHeiken3_32 'かい離用変数
Dim holdKairiHeikens3_11 'かい離用変数
Dim holdKairiHeikens3_12 'かい離用変数
Dim holdKairiHeikens3_21 'かい離用変数
Dim holdKairiHeikens3_22 'かい離用変数
Dim holdKairiHeikens3_31 'かい離用変数
Dim holdKairiHeikens3_32 'かい離用変数

'dictionaryの宣言
Dim dic_import


Call makeIndicatorValueMain

Sub makeIndicatorValueMain()
'    MsgBox "Start"

    Call initialize

    If BTmode = 1 Then
        Call MainLoopBT
    Else
        Call MainLoop
    End If
    
'    MsgBox "Finish"
End Sub


Sub MainLoop()
    Dim FunctionName : FunctionName = "MainLoop"
    On Error Resume Next
    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    '指標の読み込み
    Dim loop_period
    Dim loop_setrow
    Dim loop_pair
    
    Dim filePath
    Dim tmpset
    Dim tmpindi
    Dim lastModified
    Dim preLastModified(5)
    Dim preLastModified2(5)
    Dim preLastModified3(5)

    Dim dic_indi
    Dim dic_price
    Dim dic_num

    Set dic_indi = CreateObject("Scripting.Dictionary")
    Set dic_price = CreateObject("Scripting.Dictionary")
'    dic_indi.FileExists(1)
'    dic_indi.Add 1, indiMtx1
'    dic_indi.Item(1) = indiMtx1
'    indiMtx1 = dic_indi.Item(1)
    
    Dim log_d
    Dim log_h
    Dim log_m
    ReDim log_d(MaxPeriod)
    ReDim log_h(MaxPeriod)
    ReDim log_m(MaxPeriod)
    For i=1 to MaxPeriod
        log_d(i) = -1
        log_h(i) = -1
    Next
        
    'Whileループによって5秒間隔でフォルダを監視する
    Dim loop_while: loop_while = 0
    Do While 1
        For loop_period = 1 To maxPeriod
            if CLng(PeriodArraySet(loop_period-1)) >= 0 then
                Dim loop_period_saki : loop_period_saki = loop_period + 1
                Dim loop_period_ssaki : loop_period_ssaki = loop_period + 2
                if loop_period_saki > maxPeriod then
                    loop_period_saki = maxPeriod
                end if
                if loop_period_ssaki > maxPeriod then
                    loop_period_ssaki = maxPeriod
                end if

                Dim asi : asi = GetAsi(loop_period)
                Dim asi_saki : asi_saki = GetAsi(loop_period_saki)
                Dim asi_ssaki : asi_ssaki = GetAsi(loop_period_ssaki)
    
                isPriceFileUpdate = False
                filePath = inDir1 & "\" & inPriceFil & loop_period & ".csv"
                dim filePath2: filePath2 = inDir2 & "\" & inPriceFil & loop_period & ".csv"
                dim filePath3: filePath3 = inDir3 & "\" & inPriceFil & loop_period & ".csv"
                dim filePath_saki : filePath_saki = inDir1 & "\" & inPriceFil & loop_period_saki & ".csv"
                dim filePath_saki2: filePath_saki2 = inDir2 & "\" & inPriceFil & loop_period_saki & ".csv"
                dim filePath_saki3: filePath_saki3 = inDir3 & "\" & inPriceFil & loop_period_saki & ".csv"
                dim filePath_ssaki : filePath_ssaki = inDir1 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                dim filePath_ssaki2: filePath_ssaki2 = inDir2 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                dim filePath_ssaki3: filePath_ssaki3 = inDir3 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                If objFSO.FileExists(filePath) and objFSO.FileExists(filePath2) and objFSO.FileExists(filePath3) Then
                    lastModified = objFSO.GetFile(filePath).DateLastModified
                    lastModified2 = objFSO.GetFile(filePath2).DateLastModified
                    lastModified3 = objFSO.GetFile(filePath3).DateLastModified
                    'ファイルの更新日付が新しくなったら処理を開始する
                    If lastModified <> preLastModified(loop_period) _
                    and lastModified2 <> preLastModified2(loop_period) _
                    and lastModified3 <> preLastModified3(loop_period) Then
                        isPriceFileUpdate = True
                        preLastModified(loop_period) = lastModified
                        preLastModified2(loop_period) = lastModified
                        preLastModified3(loop_period) = lastModified
                        'MT4のファイル出力が完了するまで少し待機する
                        WScript.Sleep WaitSec * 2000
                    End If
                End If
                            
                If isPriceFileUpdate Then
                    '価格データの移動
                    
                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    Dim filePath_moto : filePath_moto = inDir1 & "\" & inPriceFil & loop_period & ".csv"
                    Dim filePath_moto_saki : filePath_moto_saki = inDir1 & "\" & inPriceFil & loop_period_saki & ".csv"
                    Dim filePath_moto_ssaki : filePath_moto_ssaki = inDir1 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "1" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "2" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "3" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "1" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "2" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "3" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "1" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "2" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "3" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & inPriceFil & loop_period_ssaki & ".csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "0" & "\" & inPriceFil & loop_period & ".csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir1 & "\" & inPriceFil & loop_period & ".csv"
                    end if
    
                    Dim pairnum : pairnum = pairset
                    if pairnum = 0 then pairnum = 1
                    filePath = outDir1 & "\" & pairnum & "\" & inPriceFil & loop_period  & ".csv"
'                    inPricePreMtx1 = inPriceMtx1
                    '価格データのインポート
                    Dim tmpmtx : tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inPriceMtx1 = tmpmtx
'                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inPriceMtx1(2) & "ファイル行数：" & Ubound(inPriceMtx1) , logPath)
                    '1足前の情報の引き出し
                    dic_num = (loop_period-1)*MaxPairSet+1
                    if CLng(loop_while) < CLng(maxPeriod) then
                        inPricePreMtx1 = inPriceMtx1
                    else
                        if dic_price.Exists(dic_num) then
                            inPricePreMtx1 = dic_price.Item(dic_num)
                        end if
                    end if
                    
                    '価格データのインポート（先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 1
                    filePath_saki = outDir1 & "\" & pairnum & "\" & inPriceFil & loop_period_saki  & ".csv"
                    '価格データのインポート
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inPriceSakiMtx1 = tmpmtx

                    '価格データのインポート（先先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 1
                    filePath_ssaki = outDir1 & "\" & pairnum & "\" & inPriceFil & loop_period_ssaki  & ".csv"
                    '価格データのインポート
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inPriceSSakiMtx1 = tmpmtx

                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    filePath_moto = inDir1 & "\" & inIndiFil & loop_period & ".csv"
                    filePath_moto_saki = inDir1 & "\" & inIndiFil & loop_period_saki & ".csv"
                    filePath_moto_ssaki = inDir1 & "\" & inIndiFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "1" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "2" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "3" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "1" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "2" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & "3" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "1" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "2" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & "3" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir1 & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir1 & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir1 & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir1 & "\" & "0" & "\" & inIndiFil & loop_period & "_0.csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir1 & "\" & inIndiFil & loop_period & "_0.csv"
                    end if
                                    
                    '指標データのインポート
                    filePath = outDir1 & "\" & pairnum & "\" & inIndiFil & loop_period & "_0.csv"
'                    inIndiPreMtx1 = inIndiMtx1
                    tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inIndiMtxRL1 = tmpmtx
'                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inIndiMtx1(2) & "ファイル行数：" & Ubound(inIndiMtx1) , logPath)

                    '指標データのインポート（先足）
                    filePath_saki = outDir1 & "\" & pairnum & "\" & inIndiFil & loop_period_saki & "_0.csv"
'                    inIndiPreMtx1 = inIndiMtx1
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inIndiSakiMtxRL1 = tmpmtx

                    '指標データのインポート（先先足）
                    filePath_ssaki = outDir1 & "\" & pairnum & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
'                    inIndiPreMtx1 = inIndiMtx1
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inIndiSSakiMtxRL1 = tmpmtx


                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    filePath_moto = inDir2 & "\" & inPriceFil & loop_period & ".csv"
                    filePath_moto_saki = inDir2 & "\" & inPriceFil & loop_period_saki & ".csv"
                    filePath_moto_ssaki = inDir2 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "1" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "2" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "3" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "1" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "2" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "3" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "1" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "2" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "3" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & inPriceFil & loop_period_ssaki & ".csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "0" & "\" & inPriceFil & loop_period & ".csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir2 & "\" & inPriceFil & loop_period & ".csv"
                    end if

                    '価格データのインポート
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 2
                    filePath = outDir2 & "\" & pairnum & "\" & inPriceFil & loop_period & ".csv"
                    tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inPriceMtx2 = tmpmtx
                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inPriceMtx2(2) & "ファイル行数：" & Ubound(inPriceMtx2) , logPath)
                    '1足前の情報の引き出し
                    dic_num = (loop_period-1)*MaxPairSet+2
                    if CLng(loop_while) < CLng(maxPeriod) then
                        inPricePreMtx2 = inPriceMtx2
                    else
                        if dic_price.Exists(dic_num) then
                            inPricePreMtx2 = dic_price.Item(dic_num)
                        end if
                    end if

                    '価格データのインポート(先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 2
                    filePath_saki = outDir2 & "\" & pairnum & "\" & inPriceFil & loop_period_saki & ".csv"
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inPriceSakiMtx2 = tmpmtx
'                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inPriceMtx2(2) & "ファイル行数：" & Ubound(inPriceMtx2) , logPath)

                    '価格データのインポート(先先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 2
                    filePath_ssaki = outDir2 & "\" & pairnum & "\" & inPriceFil & loop_period_ssaki & ".csv"
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inPriceSSakiMtx2 = tmpmtx

                                                    
                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    filePath_moto = inDir2 & "\" & inIndiFil & loop_period & ".csv"
                    filePath_moto_saki = inDir2 & "\" & inIndiFil & loop_period_saki & ".csv"
                    filePath_moto_ssaki = inDir2 & "\" & inIndiFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "1" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "2" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "3" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "1" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "2" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & "3" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "1" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "2" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & "3" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir2 & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir2 & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir2 & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir2 & "\" & "0" & "\" & inIndiFil & loop_period & "_0.csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir2 & "\" & inIndiFil & loop_period & "_0.csv"
                    end if
                                    
                    '指標データのインポート
                    filePath = outDir2 & "\" & pairnum & "\" & inIndiFil & loop_period & "_0.csv"
'                    inIndiPreMtx2 = inIndiMtx2
                    tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inIndiMtxRL2 = tmpmtx
'                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inIndiMtx2(2) & "ファイル行数：" & Ubound(inIndiMtx2) , logPath)

                    '指標データのインポート（先足）
                    filePath_saki = outDir2 & "\" & pairnum & "\" & inIndiFil & loop_period_saki & "_0.csv"
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inIndiSakiMtxRL2 = tmpmtx

                    '指標データのインポート（先先足）
                    filePath_ssaki = outDir2 & "\" & pairnum & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inIndiSSakiMtxRL2 = tmpmtx

                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    filePath_moto = inDir3 & "\" & inPriceFil & loop_period & ".csv"
                    filePath_moto_saki = inDir3 & "\" & inPriceFil & loop_period_saki & ".csv"
                    filePath_moto_ssaki = inDir3 & "\" & inPriceFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "1" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "2" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "3" & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "1" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "2" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "3" & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "1" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "2" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "3" & "\" & inPriceFil & loop_period_ssaki & ".csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & inPriceFil & loop_period & ".csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & inPriceFil & loop_period_saki & ".csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & inPriceFil & loop_period_ssaki & ".csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "0" & "\" & inPriceFil & loop_period & ".csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir3 & "\" & inPriceFil & loop_period & ".csv"
                    end if

                    '価格データのインポート
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 3
                    filePath = outDir3 & "\" & pairnum & "\" & inPriceFil & loop_period & ".csv"
                    tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inPriceMtx3 = tmpmtx
                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inPriceMtx3(2) & "ファイル行数：" & Ubound(inPriceMtx3) , logPath)
                    '1足前の情報の引き出し
                    dic_num = (loop_period-1)*MaxPairSet+3
                    if CLng(loop_while) < CLng(maxPeriod) then
                        inPricePreMtx3 = inPriceMtx3
                    else
                        if dic_price.Exists(dic_num) then
                            inPricePreMtx3 = dic_price.Item(dic_num)
                        end if
                    end if

                    '価格データのインポート（先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 3
                    filePath_saki = outDir3 & "\" & pairnum & "\" & inPriceFil & loop_period_saki & ".csv"
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inPriceSakiMtx3 = tmpmtx

                    '価格データのインポート（先先足）
                    pairnum = pairset
                    if pairnum = 0 then pairnum = 3
                    filePath_ssaki = outDir3 & "\" & pairnum & "\" & inPriceFil & loop_period_ssaki & ".csv"
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(PriceMtxRowIdeal) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inPriceSSakiMtx3 = tmpmtx
                                                                    
                    'ペアセットが1の場合、おおもとのファイルを各通貨用に複製する（同時アクセス対策）
                    filePath_moto = inDir3 & "\" & inIndiFil & loop_period & ".csv"
                    filePath_moto_saki = inDir3 & "\" & inIndiFil & loop_period_saki & ".csv"
                    filePath_moto_ssaki = inDir3 & "\" & inIndiFil & loop_period_ssaki & ".csv"
                    if CInt(pairset) = 1 or CInt(pairset) = 0 then
                        '各パラ処理用のマクロで使用
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "1" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "2" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "3" & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "1" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "2" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & "3" & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "1" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "2" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & "3" & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
                        '最終段階で統合処理時に使用
                        objFSO.CopyFile filePath_moto, outDir3 & "\" & inIndiFil & loop_period & "_0.csv"
                        objFSO.CopyFile filePath_moto_saki, outDir3 & "\" & inIndiFil & loop_period_saki & "_0.csv"
                        objFSO.CopyFile filePath_moto_ssaki, outDir3 & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
'                    elseif CInt(pairset) = 0 then
'                        '各パラ処理用のマクロで使用
'                        objFSO.CopyFile filePath_moto, outDir3 & "\" & "0" & "\" & inIndiFil & loop_period & "_0.csv"
'                        '最終段階で統合処理時に使用
'                        objFSO.CopyFile filePath_moto, outDir3 & "\" & inIndiFil & loop_period & "_0.csv"
                    end if
                                    
                    '指標データのインポート
                    filePath = outDir3 & "\" & pairnum & "\" & inIndiFil & loop_period & "_0.csv"
'                    inIndiPreMtx3 = inIndiMtx3
                    tmpmtx = readCsv(filePath)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto, filePath
                        tmpmtx = readCsv(filePath)
                    Loop
                    inIndiMtxRL3 = tmpmtx
'                    Call OutLog("ファイル読み込み:" & filePath & "ファイル2行目：" & inIndiMtx3(2) & "ファイル行数：" & Ubound(inIndiMtx3) , logPath)

                    '指標データのインポート（先足）
                    filePath_saki = outDir3 & "\" & pairnum & "\" & inIndiFil & loop_period_saki & "_0.csv"
'                    inIndiPreMtx3 = inIndiMtx3
                    tmpmtx = readCsv(filePath_saki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_saki, filePath_saki
                        tmpmtx = readCsv(filePath_saki)
                    Loop
                    inIndiSakiMtxRL3 = tmpmtx

                    '指標データのインポート（先先足）
                    filePath_ssaki = outDir3 & "\" & pairnum & "\" & inIndiFil & loop_period_ssaki & "_0.csv"
'                    inIndiPreMtx3 = inIndiMtx3
                    tmpmtx = readCsv(filePath_ssaki)
                    'データサイズが規定値未満の場合再度実行
                    Do While 1
                        if Ubound(tmpmtx) >= CInt(inMtx_row) then
                            Exit Do
                        end if
                        objFSO.CopyFile filePath_moto_ssaki, filePath_ssaki
                        tmpmtx = readCsv(filePath_ssaki)
                    Loop
                    inIndiSSakiMtxRL3 = tmpmtx

                    DIm tmp_indi : tmp_indi = Split(inIndiMtxRL1(1),",")
                    Dim indi_day : indi_day = tmp_indi(inIndiDateCol)
                    Dim indi_time : indi_time = tmp_indi(inIndiTimeCol)
                    Dim now_day: now_day = Day(indi_day)
                    Dim now_hour: now_hour = Hour(indi_time)
                    Dim now_min: now_min = Minute(indi_time)
                    Dim loop_time: loop_time = 1

                    For loop_setrow = 1 To UBound(inSetMtx, 1) - 1
                        tmpset = Split(inSetMtx(loop_setrow), ",")

                        'ディクショナリのリセット（設定ファイル行に合わせての更新）
                        Call holdInMtxReset(loop_setrow)
                        '配列の変換用の事前処理
                        Call ImportRLFiles()
                        '時間足毎のデータかつ1分刻みのデータに分割する
                        Call inputMtxReload(loop_time, loop_period)
                

                        '1足前の情報の引き出し
                        dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 1
                        if CLng(loop_while) < CLng(maxPeriod) then
                            inIndiPreMtx1 = inIndiMtx1
                        else
                            if dic_indi.Exists(dic_num) then
                                inIndiPreMtx1 = dic_indi.Item(dic_num)
                            end if
                        end if


                        '1足前の情報の引き出し
                        dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 2
                        if CLng(loop_while) < CLng(maxPeriod) then
                            inIndiPreMtx2 = inIndiMtx2
                        else
                            if dic_indi.Exists(dic_num) then
                                inIndiPreMtx2 = dic_indi.Item(dic_num)
                            end if
                        end if


                        '1足前の情報の引き出し
                        dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 3
                        if CLng(loop_while) < CLng(maxPeriod) then
                            inIndiPreMtx3 = inIndiMtx3
                        else
                            if dic_indi.Exists(dic_num) then
                                inIndiPreMtx3 = dic_indi.Item(dic_num)
                            end if
                        end if

                
                        '別途階層としての役割
                        For loop_pair = 1 To MaxPairSet
                            Dim writeflag : writeflag = writeflag_off
                            if log_d(loop_period) <> now_day or log_h(loop_period) <> now_hour or log_m(loop_period) <> Int(now_min/asi) then
                                writeflag = writeflag_on
                            end if

                            '通貨ペア毎に出力用配列の中身をリセットする
    '                        Call outputMtxReset
                            
                            if CInt(pairset) = loop_pair or CInt(pairset) = 0 then
                                If loop_pair = 1 Then
'                                For loop_setrow = 1 To UBound(inSetMtx, 1) - 1
        '                        For loop_setrow = 1 To UBound(inSetMtx, 1)
'                                    tmpset = Split(inSetMtx(loop_setrow), ",")
                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJita, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJvalue, holdKairiHeiken1_11, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTvalue, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJTvalue, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabun, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, holdKairiHeiken1_12, holdKairiHeiken1_22, holdKairiHeiken1_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku2, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, holdKairiHeiken1_12, holdKairiHeiken1_22, holdKairiHeiken1_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderDirection, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderNum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdLeaderShukiNum, holdKairiHeikens1_11, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaxRatioPairNum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdOSum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPlus, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeikens1_11, holdKairiHeikens1_21, holdKairiHeikens1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRSum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        Dim inset_code : inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, -1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdGoalPredict, holdKairiHeiken1_11, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, inIndiSSakiMtx1, inPriceSSakiMtx1, holdMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdZGMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdZGAbsMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2,pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2,pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre0, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre1, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre2, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre21, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroi, holdKairiHeikens1_11, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun2, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun3, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSetsuzoku, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabunPairs, holdKairiHeikens1_11, holdKairiHeikens1_12,holdKairiHeikens1_21, holdKairiHeikens1_22,holdKairiHeikens1_31, holdKairiHeikens1_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroisetsuzoku3, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTrace, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTrace2, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceMini, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull3, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull5, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull5Abs, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun3, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun4, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun5, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceTime, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceTimeHendou, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockNamasi, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockDirection, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockBar, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullPrices, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockNumber, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdDivide, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdMultiple, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, inIndiSSakiMtx1, inPriceSSakiMtx1, holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    End If
                            
'                                Next

'                                'ファイル出力
'                                Call OutLog("時間足:" & loop_period & " ファイル出力1:" & outDir1, logPath)
'                                Call OutputFiles(outDir1, loop_period)
'                                'ファイル結合
'                                Dim tmp_fcount: tmp_fcount = 0
'                                tmp_fcount = CombineFile(outDir1, combiDir1, loop_period)
'                                Call OutLog("時間足:" & loop_period & " ファイル結合1:" & outDir1 & "結合ファイル数：" & tmp_fcount, logPath)
'                        
                    
                                ElseIf loop_pair = 2 Then
 '                               For loop_setrow = 1 To UBound(inSetMtx, 1) - 1
        '                        For loop_setrow = 1 To UBound(inSetMtx, 1)
'                                    tmpset = Split(inSetMtx(loop_setrow), ",")
                        
                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJita, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJvalue, holdKairiHeiken2_21, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTvalue, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJTvalue, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabun, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, holdKairiHeiken2_22, holdKairiHeiken2_12, holdKairiHeiken2_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku2, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, holdKairiHeiken2_22, holdKairiHeiken2_12, holdKairiHeiken2_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderDirection, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderNum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderShukiNum, holdKairiHeikens2_21, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaxRatioPairNum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdOSum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPlus, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeikens2_21, holdKairiHeikens2_11, holdKairiHeikens2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRSum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, -1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdGoalPredict, holdKairiHeiken2_21, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, inIndiSSakiMtx2, inPriceSSakiMtx2, holdMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdZGMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdZGAbsMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre0, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre1, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre2, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroi, holdKairiHeikens2_21, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun2, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun3, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSetsuzoku, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabunPairs, holdKairiHeikens2_21, holdKairiHeikens2_22,holdKairiHeikens2_11, holdKairiHeikens2_12,holdKairiHeikens2_31, holdKairiHeikens2_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroisetsuzoku3, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTrace, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTrace2, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceMini, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull3, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull5, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull5Abs, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun3, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun4, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun5, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceTime, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceTimeHendou, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockNamasi, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockDirection, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockBar, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullPrices, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockNumber, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDivide, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMultiple, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, inIndiSSakiMtx2, inPriceSSakiMtx2, holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    End If
  '                              Next

'                                'ファイル出力
'                                Call OutLog("時間足:" & loop_period & " ファイル出力2:" & outDir2, logPath)
'                                Call OutputFiles(outDir2, loop_period)
'                                'ファイル結合
'                                tmp_fcount = 0
'                                tmp_fcount = CombineFile(outDir2, combiDir2, loop_period)
'                                Call OutLog("時間足:" & loop_period & " ファイル結合2:" & outDir2 & "結合ファイル数：" & tmp_fcount, logPath)

                    
                                ElseIf loop_pair = 3 Then
'                                For loop_setrow = 1 To UBound(inSetMtx, 1) - 1
        '                        For loop_setrow = 1 To UBound(inSetMtx, 1)
'                                    tmpset = Split(inSetMtx(loop_setrow), ",")
                            
                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJita, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJvalue, holdKairiHeiken3_31, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTvalue, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJTvalue, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabun, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabunDougyaku, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, holdKairiHeiken3_32, holdKairiHeiken3_12, holdKairiHeiken3_22, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabunDougyaku2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, holdKairiHeiken3_32, holdKairiHeiken3_12, holdKairiHeiken3_22, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderDirection, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderNum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderShukiNum, holdKairiHeikens3_31, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMaxRatioPairNum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdOSum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPlus, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeikens3_31, holdKairiHeikens3_11, holdKairiHeikens3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRSum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict, holdKairiHeiken3_31, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, inIndiSSakiMtx3, inPriceSSakiMtx3, holdMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdZGMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdZGAbsMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre0, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre1, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre2, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre21, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroi, holdKairiHeikens3_31, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun2, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun3, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSetsuzoku, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroisetsuzoku3, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabunPairs, holdKairiHeikens3_31, holdKairiHeikens3_32,holdKairiHeikens3_11, holdKairiHeikens3_12,holdKairiHeikens3_21, holdKairiHeikens3_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTrace, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTrace2, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceMini, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull3, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull5, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull5Abs, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun3, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun4, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun5, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceTime, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceTimeHendou, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockNamasi, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockDirection, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockBar, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullPrices, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockNumber, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDivide, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMultiple, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3,  holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3,  holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3,  holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3,  holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, inIndiSSakiMtx3, inPriceSSakiMtx3,  holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3,  holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    End If
'                                Next

'                                'ファイル出力
'                                Call OutLog("時間足:" & loop_period & " ファイル出力3:" & outDir3, logPath)
'                                Call OutputFiles(outDir3, loop_period)
'                                'ファイル結合
'                                tmp_fcount = 0
'                                tmp_fcount = CombineFile(outDir3, combiDir3, loop_period)
'                                Call OutLog("時間足:" & loop_period & " ファイル結合3:" & outDir3 & "結合ファイル数：" & tmp_fcount, logPath)
                        
                                End If
                            end if
                        Next

                        '時間足に応じて１足前の情報保持処理のタイミングを判定
                        if log_d(loop_period) <> now_day or log_h(loop_period) <> now_hour or log_m(loop_period) <> Int(now_min/asi) then
'                            log_d(loop_period) = now_day
'                            log_h(loop_period) = now_hour
'                            log_m(loop_period) = Int(now_min/asi)

                            '第1通貨ペア
                            dic_num = (loop_period-1)*MaxPairSet+1
                            if dic_price.Exists(dic_num) then
                                dic_price.Item(dic_num) = inPriceMtx1
                            else
                                dic_price.Add dic_num, inPriceMtx1
                            end if
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 1
                            if dic_indi.Exists(dic_num) then
                                dic_indi.Item(dic_num) = inIndiMtx1
                            else
                                dic_indi.Add dic_num, inIndiMtx1
                            end if

                            '第2通貨ペア
                            dic_num = (loop_period-1)*MaxPairSet+2
                            if dic_price.Exists(dic_num) then
                                dic_price.Item(dic_num) = inPriceMtx2
                            else
                                dic_price.Add dic_num, inPriceMtx2
                            end if
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 2
                            if dic_indi.Exists(dic_num) then
                                dic_indi.Item(dic_num) = inIndiMtx2
                            else
                                dic_indi.Add dic_num, inIndiMtx2
                            end if

                            '第3通貨ペア
                            dic_num = (loop_period-1)*MaxPairSet+3
                            if dic_price.Exists(dic_num) then
                                dic_price.Item(dic_num) = inPriceMtx3
                            else
                                dic_price.Add dic_num, inPriceMtx3
                            end if
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1) + (loop_setrow-1)*MaxPairSet + 3
                            if dic_indi.Exists(dic_num) then
                                dic_indi.Item(dic_num) = inIndiMtx3
                            else
                                dic_indi.Add dic_num, inIndiMtx3
                            end if
                        end if
                    Next

                    'ファイル出力
                    if pairset = 1 or pairset = 0 then
                        Call OutputFilesRL(outDir1,combiDir1,inIndiMtxRL1,holdOutAllIndicatorMtx1,loop_period)
                    end if
                    if pairset = 2 or pairset = 0 then
                        Call OutputFilesRL(outDir2,combiDir2,inIndiMtxRL2,holdOutAllIndicatorMtx2,loop_period)
                    end if
                    if pairset = 3 or pairset = 0 then
                        Call OutputFilesRL(outDir3,combiDir3,inIndiMtxRL3,holdOutAllIndicatorMtx3,loop_period)
                    end if
                        
                    '時間足に応じて１足前の情報保持処理のタイミングを判定用保持値の更新
                    if log_d(loop_period) <> now_day or log_h(loop_period) <> now_hour or log_m(loop_period) <> Int(now_min/asi) then
                        log_d(loop_period) = now_day
                        log_h(loop_period) = now_hour
                        log_m(loop_period) = Int(now_min/asi)
                    end if
                End If
            end if
            loop_while = loop_while + 1
        Next

        '監視間隔分待機する
        For i = 1 To watchInterval
            'WScript.Echo("監視中..." & Now())
            WScript.Sleep WaitSec * 1000
        Next

        if loop_while>0 then
            loop_while = loop_while + 1
        end if
    Loop
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

Sub MainLoopBT()
    Dim FunctionName : FunctionName = "MainLoopBT"
    On Error Resume Next
    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    '指標の読み込み
    Dim loop_period
    Dim loop_setrow
    Dim loop_pair
    
    Dim filePath
    Dim tmpset
    Dim tmpindi
    
    Dim dic_indi
    Dim dic_price
    Dim dic_num 

    Set dic_indi = CreateObject("Scripting.Dictionary")
    Set dic_price = CreateObject("Scripting.Dictionary")

    '別途階層としての役割
    
    'バックテスト対象期間に対して処理を行う
    
    Dim now_date: now_date = start_date
    
    Dim loop_bt: loop_bt = 0
    Do While now_date <= end_date
        '無限ループにはまってしまった時用
        If loop_bt > MAX_BT Then
            Exit Do
        End If
        
        '取得対象のファイル用の日時
        Dim date_str: date_str = CStr(now_date)
        date_str = Replace(date_str, "/", "")
        
        For tmp_loop_period = 1 To maxPeriod
            loop_period = maxPeriod - tmp_loop_period + 1
            Dim loop_period_saki : loop_period_saki = loop_period + 1
            Dim loop_period_ssaki : loop_period_ssaki = loop_period + 2
            if loop_period_saki > maxPeriod then
                loop_period_saki = maxPeriod
            end if
            if loop_period_ssaki > maxPeriod then
                loop_period_ssaki = maxPeriod
            end if
            '出力用配列リセット
            Call holdMtxReset()
            if CLng(PeriodArraySet(loop_period-1)) >= 0 then

                Dim asi : asi = GetAsi(loop_period)
                Dim asi_saki : asi_saki = GetAsi(loop_period_saki)
                Dim asi_ssaki : asi_ssaki = GetAsi(loop_period_ssaki)

                Dim log_d
                Dim log_h
                Dim log_m
                ReDim log_d(MaxPeriod)
                ReDim log_h(MaxPeriod)
                ReDim log_m(MaxPeriod)
                For i=1 to MaxPeriod
                    log_d(i) = -1
                    log_h(i) = -1
                Next

                For loop_setrow = 1 To UBound(inSetMtx, 1)-1
                    'インポート用配列及びディクショナリのリセット
                    Call holdInMtxReset(loop_setrow)
                    'ファイル読込
                    Dim Max_Row: Max_Row = 0
                    Dim file_flag : file_flag = true
                    
                    '先足が必要か否か
                    Dim tmp_set : tmp_set = Split(inSetMtx(loop_setrow),",")
                    Dim tmp_asi1 : tmp_asi1 = Split(tmp_set(inSetAsi1Col),"|")
                    Dim max_asi : max_asi = tmp_asi1(0)
                    For loop_asi = 0 To Ubound(tmp_asi1,1)
                        if CLng(max_asi) < CLng(tmp_asi1(loop_asi)) then
                            max_asi = tmp_asi1(loop_asi)
                        end if
                    Next
                    if max_asi>1 or tmp_set(inSetAsi2Col)>1 then
                        Call ImportBTFiles(Max_Row, file_flag, asi, asi_saki, asi_ssaki, date_str)
                    else
                        Call ImportBTFiles(Max_Row, file_flag, asi, asi, asi, date_str)
                    end if

                    'ファイルフラグがtrueのとき（読み込みファイルが存在していた時）
                    if file_flag = true then
                        tmpset = Split(inSetMtx(loop_setrow), ",")
                        Dim loop_time : loop_time = 1
                        Do While loop_time < Max_Row

                            '時間足毎のデータかつ1分刻みのデータに分割する
                            Call inputMtxReload(loop_time, loop_period)
                
                            '1足前の情報の引き出し
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 1
                            if loop_time = 1 then
                                inPricePreMtx1 = inPriceMtx1
                                inIndiPreMtx1 = inIndiMtx1
                            else
                                if dic_price.Exists(dic_num) then
                                    inPricePreMtx1 = dic_price.Item(dic_num)
                                end if
                                if dic_indi.Exists(dic_num) then
                                    inIndiPreMtx1 = dic_indi.Item(dic_num)
                                end if
                            end if
                                    
                            '1足前の情報の引き出し
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 2
                            if CLng(loop_bt) < CLng(maxPeriod) then
                                inPricePreMtx2 = inPriceMtx2
                                inIndiPreMtx2 = inIndiMtx2
                            else
                                if dic_price.Exists(dic_num) then
                                    inPricePreMtx2 = dic_price.Item(dic_num)
                                end if
                                if dic_indi.Exists(dic_num) then
                                    inIndiPreMtx2 = dic_indi.Item(dic_num)
                                end if
                            end if

                            '1足前の情報の引き出し
                            dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 3
                            if CLng(loop_bt) < CLng(maxPeriod) then
                                inPricePreMtx3 = inPriceMtx3
                                inIndiPreMtx3 = inIndiMtx3  
                            else
                                if dic_price.Exists(dic_num) then
                                    inPricePreMtx3 = dic_price.Item(dic_num)
                                end if
                                if dic_indi.Exists(dic_num) then
                                    inIndiPreMtx3 = dic_indi.Item(dic_num)
                                end if
                            end if

                            '1足前の情報の引き出し用のディクショナリーへ配列を格納
                            DIm tmp_indi : tmp_indi = Split(inIndiMtx1(2),",")
                            Dim indi_day : indi_day = tmp_indi(inIndiDateCol)
                            Dim indi_time : indi_time = tmp_indi(inIndiTimeCol)
                            Dim now_day: now_day = Day(indi_day)
                            Dim now_hour: now_hour = Hour(indi_time)
                            Dim now_min: now_min = Minute(indi_time)
                
                            For loop_pair = 1 To MaxPairSet
                                '通貨ペア毎に出力用配列の中身をリセットする
    '                            Call outputMtxReset
                                Dim writeflag : writeflag = writeflag_off
                                if log_d(loop_period) <> now_day or log_h(loop_period) <> now_hour or log_m(loop_period) <> Int(now_min/asi) then
                                    writeflag = writeflag_on
                                end if
            
                                If loop_pair = 1 and ( Cint(pairset) =loop_pair or CInt(pairset) = 0) Then
                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJita, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJvalue, holdKairiHeiken1_11, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTvalue, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJTvalue, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabun, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, holdKairiHeiken1_12, holdKairiHeiken1_22, holdKairiHeiken1_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku2, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, holdKairiHeiken1_12, holdKairiHeiken1_22, holdKairiHeiken1_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderDirection, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderNum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdLeaderShukiNum, holdKairiHeikens1_11, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaxRatioPairNum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdOSum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPlus, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeikens1_11, holdKairiHeikens1_21, holdKairiHeikens1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRSum, holdLeaderRatio1_1, holdLeaderRatio1_2, holdLeaderRatio1_3, holdKairiHeiken1_11, holdKairiHeiken1_21, holdKairiHeiken1_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        Dim inset_code : inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, -1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdGoalPredict, holdKairiHeiken1_11, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, inIndiSSakiMtx1, inPriceSSakiMtx1, holdMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdZGMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdZGAbsMinus, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1, 2, pips1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre0, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre1, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre2, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictOre21, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroi, holdKairiHeikens1_11, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun2, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSabun3, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroiSetsuzoku, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabunPairs, holdKairiHeikens1_11, holdKairiHeikens1_12,holdKairiHeikens1_21, holdKairiHeikens1_22,holdKairiHeikens1_31, holdKairiHeikens1_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time, 1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdPredictSoroisetsuzoku3, holdKairiHeikens1_11, holdKairiHeikens1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTrace, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTrace2, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceMini, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull3, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull5, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceFull5Abs, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun3, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun4, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceSabun5, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceTime, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdJisseiTraceTimeHendou, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockNamasi, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockDirection, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockBar, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullPrices, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdNamasiFullBlockNumber, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdDivide, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdMultiple, holdKairiHeiken1_11, holdKairiHeiken1_12, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time,1,2,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1,  holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiSakiMtx1, inPriceSakiMtx1, inIndiSSakiMtx1, inPriceSSakiMtx1, holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx1, loop_time)
                                    End If

                                    'ファイル出力
    '                                Call OutLog("時間足:" & loop_period & " ファイル出力1:" & outDir1, logPath)
    '                                Call OutputFilesBT(outDir1, inIndiMtx1, date_str, loop_time+countstart, loop_period)
            '                        Call OutputFiles(outDir1, loop_period)
                        
                    
                                ElseIf loop_pair = 2 and ( Cint(pairset) =loop_pair or CInt(pairset) = 0) Then
            '                        For loop_setrow = 1 To UBound(inSetMtx, 1)

                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJita, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJvalue, holdKairiHeiken2_21, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTvalue, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJTvalue, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabun, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, holdKairiHeiken2_22, holdKairiHeiken2_12, holdKairiHeiken2_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSabunDougyaku2, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, holdKairiHeiken2_22, holdKairiHeiken2_12, holdKairiHeiken2_32, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderDirection, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderNum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderShukiNum, holdKairiHeikens2_21, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaxRatioPairNum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdOSum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPlus, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeikens2_21, holdKairiHeikens2_11, holdKairiHeikens2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRSum, holdLeaderRatio2_2, holdLeaderRatio2_1, holdLeaderRatio2_3, holdKairiHeiken2_21, holdKairiHeiken2_11, holdKairiHeiken2_31, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeosUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, -1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, -1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, 3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdGoalPredict, holdKairiHeiken2_21, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, inIndiSSakiMtx2, inPriceSSakiMtx2, holdMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdZGMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdZGAbsMinus, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2, 1, pips2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre0, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre1, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre2, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictOre21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroi, holdKairiHeikens2_21, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun2, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabun3, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSetsuzoku, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabunPairs, holdKairiHeikens2_21, holdKairiHeikens2_22,holdKairiHeikens2_11, holdKairiHeikens2_12,holdKairiHeikens2_31, holdKairiHeikens2_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time, 2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroisetsuzoku3, holdKairiHeikens2_21, holdKairiHeikens2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTrace, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTrace2, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceMini, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull3, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull5, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceFull5Abs, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun3, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun4, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceSabun5, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceTime, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJisseiTraceTimeHendou, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockNamasi, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockDirection, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockBar, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullPrices, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdNamasiFullBlockNumber, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDivide, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMultiple, holdKairiHeiken2_21, holdKairiHeiken2_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time,2,1,3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2,  holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, inIndiSakiMtx2, inPriceSakiMtx2, inIndiSSakiMtx2, inPriceSSakiMtx2, holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx2, loop_time)
                                    End If
                    
                                    'ファイル出力
    '                                Call OutLog("時間足:" & loop_period & " ファイル出力2:" & outDir2, logPath)
    '                                Call OutputFilesBT(outDir2, inIndiMtx2, date_str, loop_time+countstart, loop_period)
            '                        Call OutputFiles(outDir2, loop_period)                        
                    
                                ElseIf loop_pair = 3 and ( Cint(pairset) =loop_pair or CInt(pairset) = 0) Then
        '                        For loop_setrow = 1 To UBound(inSetMtx, 1)
                            
                                    '各関数の計算
                                    If tmpset(inSetTypeCol) = FunctionRatio Then
                                        Call calcFunctionRatio(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRatio, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inSetName1Col)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbsIchi Then
                                        Call calcFunctionAbsIchi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAbsIchi, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAbs Then
                                        Call calcFunctionAbs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAbs, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJita Then
                                        Call calcFunctionJita(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJita, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJvalue Then
                                        Call calcFunctionJvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJvalue, holdKairiHeiken3_31, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTvalue Then
                                        Call calcFunctionTvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTvalue, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJTvalue Then
                                        Call calcFunctionJTvalue(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdJTvalue, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabun Then
                                        Call calcFunctionSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabun, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku Then
                                        Call calcFunctionSabunDougyaku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabunDougyaku, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, holdKairiHeiken3_32, holdKairiHeiken3_12, holdKairiHeiken3_22, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSabunDougyaku2 Then
                                        Call calcFunctionSabunDougyaku2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdSabunDougyaku2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, holdKairiHeiken3_32, holdKairiHeiken3_12, holdKairiHeiken3_22, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaehenka Then
                                        Call calcFunctionMaehenka(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMaehenka, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderDirection Then
                                        Call calcFunctionLeaderDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderDirection, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderNum Then
                                        Call calcFunctionLeaderNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdLeaderNum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionLeaderShukiNum Then
                                        Call calcFunctionLeaderShukiNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdLeaderShukiNum, holdKairiHeikens3_31, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMaxRatioPairNum Then
                                        Call calcFunctionMaxRatioPairNum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdMaxRatioPairNum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionOSum Then
                                        Call calcFunctionOSum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdOSum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPlus Then
                                        Call calcFunctionPlus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPlus, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeikens3_31, holdKairiHeikens3_11, holdKairiHeikens3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRSum Then
                                        Call calcFunctionRSum(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdRSum, holdLeaderRatio3_3, holdLeaderRatio3_1, holdLeaderRatio3_2, holdKairiHeiken3_31, holdKairiHeiken3_11, holdKairiHeiken3_21, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                            
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeiken Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeiken(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsUD Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsUD(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeOsUD, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeOsZG Then
                                        inset_code = tmpset(inSetKairiCol)
                                        Call calcFunctionHeOsZG(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdHeOsZG, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, inset_code)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualKairi Then
                                        Call calcFunctionDualKairi(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualKairi, loop_period, loop_setrow, loop_pair, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDualDirection Then
                                        Call calcFunctionDualDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdDualDirection, loop_period, loop_setrow, loop_pair, 1, 1, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, 2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouP Then
                                        Call calcFunctionRyouP(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouP, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouM Then
                                        Call calcFunctionRyouM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouM, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyouPM Then
                                        Call calcFunctionRyouPM(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyouPM, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRyou Then
                                        Call calcFunctionRyou(inSetMtx, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, holdRyou, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)

                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict Then
                                        Call calcFunctionGoalPredict(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdGoalPredict, holdKairiHeiken3_31, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMinus Then
                                        Call calcFunctionMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, inIndiSSakiMtx3, inPriceSSakiMtx3, holdMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGMinus Then
                                        Call calcFunctionZGMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdZGMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionZGAbsMinus Then
                                        Call calcFunctionZGAbsMinus(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdZGAbsMinus, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTwoValueDiff Then
                                        Call calcFunctionTwoValueDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdTwoValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleValueDiff Then
                                        Call calcFunctionSingleValueDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleValueDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiff Then
                                        Call calcFunctionSingleDDiff(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleDDiff, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleVDiffAve Then
                                        Call calcFunctionSingleVDiffAve(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleVDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionSingleDDiffAve Then
                                        Call calcFunctionSingleDDiffAve(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdSingleDDiffAve, loop_period, loop_setrow, loop_pair, 1, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3, 1, pips3)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre0 Then
                                        Call calcFunctionPredictOre0(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre0, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre1 Then
                                        Call calcFunctionPredictOre1(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre1, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre2 Then
                                        Call calcFunctionPredictOre2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre2, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre Then
                                        Call calcFunctionPredictOre(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictOre21 Then
                                        Call calcFunctionPredictOre21(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictOre21, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroi Then
                                        Call calcFunctionPredictSoroi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroi, holdKairiHeikens3_31, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun Then
                                        Call calcFunctionPredictSoroiSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun2 Then
                                        Call calcFunctionPredictSoroiSabun2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun2, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabun3 Then
                                        Call calcFunctionPredictSoroiSabun3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSabun3, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSetsuzoku Then
                                        Call calcFunctionPredictSoroiSetsuzoku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroiSetsuzoku, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroiSabunPairs Then
                                        Call calcFunctionPredictSoroiSabunPairs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdPredictSoroiSabunPairs, holdKairiHeikens3_31, holdKairiHeikens3_32,holdKairiHeikens3_11, holdKairiHeikens3_12,holdKairiHeikens3_21, holdKairiHeikens3_22, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time, 3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionPredictSoroisetsuzoku3 Then
                                        Call calcFunctionPredictSoroisetsuzoku3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdPredictSoroisetsuzoku3, holdKairiHeikens3_31, holdKairiHeikens3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace Then
                                        Call calcFunctionJisseiTrace(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTrace, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTrace2 Then
                                        Call calcFunctionJisseiTrace2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTrace2, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceMini Then
                                        Call calcFunctionJisseiTraceMini(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceMini, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull Then
                                        Call calcFunctionJisseiTraceFull(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull3 Then
                                        Call calcFunctionJisseiTraceFull3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull3, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5 Then
                                        Call calcFunctionJisseiTraceFull5(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull5, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceFull5Abs Then
                                        Call calcFunctionJisseiTraceFull5Abs(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceFull5Abs, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun Then
                                        Call calcFunctionJisseiTraceSabun(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun3 Then
                                        Call calcFunctionJisseiTraceSabun3(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun3, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun4 Then
                                        Call calcFunctionJisseiTraceSabun4(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun4, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceSabun5 Then
                                        Call calcFunctionJisseiTraceSabun5(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceSabun5, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTime Then
                                        Call calcFunctionJisseiTraceTime(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceTime, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionJisseiTraceTimeHendou Then
                                        Call calcFunctionJisseiTraceTimeHendou(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdJisseiTraceTimeHendou, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNamasi Then
                                        Call calcFunctionNamasiFullBlockNamasi(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockNamasi, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockDirection Then
                                        Call calcFunctionNamasiFullBlockDirection(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockDirection, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockBar Then
                                        Call calcFunctionNamasiFullBlockBar(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockBar, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullPrices Then
                                        Call calcFunctionNamasiFullPrices(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullPrices, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionNamasiFullBlockNumber Then
                                        Call calcFunctionNamasiFullBlockNumber(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdNamasiFullBlockNumber, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionDivide Then
                                        Call calcFunctionDivide(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdDivide, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionMultiple Then
                                        Call calcFunctionMultiple(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdMultiple, holdKairiHeiken3_31, holdKairiHeiken3_32, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume Then
                                        Call calcFunctionTradeVolume(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTradeVolume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionTradeVolume2 Then
                                        Call calcFunctionTradeVolume2(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdTradeVolume2, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionGoalPredict100 Then
                                        Call calcFunctionGoalPredict100(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiMtx1, inPriceMtx1, inIndiPreMtx1, inPricePreMtx1, inIndiMtx2, inPriceMtx2, inIndiPreMtx2, inPricePreMtx2, holdGoalPredict100, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time,3,1,2)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalCount Then
                                        Call calcFunctionFractalCount(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalCount, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalPercent Then
                                        Call calcFunctionFractalPercent(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, holdFractalPercent, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalSinchoku Then
                                        Call calcFunctionFractalSinchoku(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalSinchoku, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalTiming Then
                                        Call calcFunctionFractalTiming(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalTiming, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionHeikenReal Then
                                        Call calcFunctionHeikenReal(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, holdHeikenReal, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeri Then
                                        Call calcFunctionRousokuIkiKaeri(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRousokuIkiKaeri, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionRousokuIkiKaeriVariable Then
                                        Call calcFunctionRousokuIkiKaeriVariable(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverage Then
                                        Call calcFunctionAverage(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAverage, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageRousokuIkiKaeriVariable Then
                                        Call calcFunctionAverageRousokuIkiKaeriVariable(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdAverageRousokuIkiKaeriVariable, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionAverageHeiken Then
                                        Call calcFunctionAverageHeiken(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, inIndiSakiMtx3, inPriceSakiMtx3, inIndiSSakiMtx3, inPriceSSakiMtx3, holdAverageHeiken, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    ElseIf tmpset(inSetTypeCol) = FunctionFractalAnaume Then
                                        Call calcFunctionFractalAnaume(inSetMtx, inIndiMtx3, inPriceMtx3, inIndiPreMtx3, inPricePreMtx3, holdFractalAnaume, loop_period, loop_setrow, loop_pair, outflag_on, writeflag, holdOutAllIndicatorMtx3, loop_time)
                                    End If

                                    'ファイル出力
    '                                Call OutLog("時間足:" & loop_period & " ファイル出力3:" & outDir3, logPath)
    '                                Call OutputFilesBT(outDir3, inIndiMtx3, date_str, loop_time+countstart, loop_period)
            '                        Call OutputFiles(outDir3, loop_period)
                        
                                End If
                            Next

                            '時間足に応じて１足前の情報保持処理のタイミングを判定
                            if log_d(loop_period) <> now_day or log_h(loop_period) <> now_hour or log_m(loop_period) <> Int(now_min/asi) then
                                log_h(loop_period) = now_day
                                log_h(loop_period) = now_hour
                                log_m(loop_period) = Int(now_min/asi)

                                '第1通貨ペア
                                dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 1
                
                                if dic_price.Exists(dic_num) then
                                    dic_price.Item(dic_num) = inPriceMtx1
                                else
                                    dic_price.Add dic_num, inPriceMtx1
                                end if
                                if dic_indi.Exists(dic_num) then
                                    dic_indi.Item(dic_num) = inIndiMtx1
                                else
                                    dic_indi.Add dic_num, inIndiMtx1
                                end if

                                '第2通貨ペア
                                dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 2
                                if dic_price.Exists(dic_num) then
                                    dic_price.Item(dic_num) = inPriceMtx2
                                else
                                    dic_price.Add dic_num, inPriceMtx2
                                end if
                                if dic_indi.Exists(dic_num) then
                                    dic_indi.Item(dic_num) = inIndiMtx2
                                else
                                    dic_indi.Add dic_num, inIndiMtx2
                                end if

                                '第3通貨ペア
                                dic_num = (loop_period-1)*MaxPairSet*Ubound(inSetMtx,1)+(loop_setrow-1)*MaxPairSet + 3
                                if dic_price.Exists(dic_num) then
                                    dic_price.Item(dic_num) = inPriceMtx3
                                else
                                    dic_price.Add dic_num, inPriceMtx3
                                end if
                                if dic_indi.Exists(dic_num) then
                                    dic_indi.Item(dic_num) = inIndiMtx3
                                else
                                    dic_indi.Add dic_num, inIndiMtx3
                                end if
                            end if
                            loop_time = loop_time + 1
                        Loop
                        'ファイル出力（1日単位）
                        'ファイル出力
                        Call OutLog("時間足:" & loop_period & " ファイル出力1:" & outDir1, logPath)
                        Call OutputFilesBT(outDir1, holdOutAllIndicatorMtx1, date_str, loop_time+countstart, asi, inSetMtx, loop_setrow)
                        Call OutLog("時間足:" & loop_period & " ファイル出力2:" & outDir2, logPath)
                        Call OutputFilesBT(outDir2, holdOutAllIndicatorMtx2, date_str, loop_time+countstart, asi, inSetMtx, loop_setrow)
                        Call OutLog("時間足:" & loop_period & " ファイル出力3:" & outDir3, logPath)
                        Call OutputFilesBT(outDir3, holdOutAllIndicatorMtx3, date_str, loop_time+countstart, asi, inSetMtx, loop_setrow)
                    end if
                Next
                loop_bt = loop_bt + 1
            end if
        Next
		'ファイル結合
'        Call CombineFileBT(outDir1, combiDir1, date_str)
'        Call CombineFileBT(outDir2, combiDir2, date_str)
'        Call CombineFileBT(outDir3, combiDir3, date_str)
        
        '時刻の積算
        now_date = DateAdd("d", 1, now_date)

    Loop
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

Sub initialize()
    Dim FunctionName :FunctionName = "Initialize"
    
    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    currentDir = objFSO.GetFolder(".")
    
    tmpMtx = readCsv(currentDir & "\" & configFileName & ".csv")
    maxIndex = UBound(tmpMtx)
    Dim configMtx
    ReDim configMtx(maxIndex)
    For i = LBound(configMtx) To UBound(configMtx)
       tmp = Split(tmpMtx(i), ",")
       configMtx(i) = tmp(1)
    Next

    inDir1 = configMtx(1)
    inDir2 = configMtx(2)
    inDir3 = configMtx(3)
    inIndiFil = configMtx(4)
    inPriceFil = configMtx(5)
    outDir1 = configMtx(6)
    outDir2 = configMtx(7)
    outDir3 = configMtx(8)
    combiDir1 = configMtx(9)
    combiDir2 = configMtx(10)
    combiDir3 = configMtx(11)
    outFil = configMtx(12)
    inSetDir = configMtx(13)
    inSetFil = configMtx(14)
    inSetFUllFil = configMtx(15)
    maxPeriodSet = configMtx(16)
    PeriodArraySet = Split(maxPeriodSet,"|")
    BTmode = configMtx(17)
    start_date = CDate(configMtx(18))
    end_date = CDate(configMtx(19))
    inMtx_row = configMtx(20)
    pips1 = configMtx(21)
    pips2 = configMtx(22)
    pips3 = configMtx(23)
    watchInterval = configMtx(24)
    logPath = configMtx(25)
    ErrPath = configMtx(26)
    countstart = configMtx(27)
    childNumber = configMtx(28)
    zerofile = configMtx(29)
    pairset = configMtx(30)
    daymode = configMtx(31)
    rewritemode = configMtx(32)
    
    if objArgs.Count = 0 then
        filenumber = 0
    else
        filenumber = objArgs(0)
    end if

'    '設定ファイル名読み込み用
'    tmpMtx = readCsv(currentDir & "\" & config_settingfile_FileName & ".csv")
'    maxIndex = UBound(tmpMtx)
'    Dim config_setting_Mtx
'    ReDim config_setting_Mtx(maxIndex)
'    For i = LBound(config_setting_Mtx) To UBound(config_setting_Mtx)
'       tmp = Split(tmpMtx(i), ",")
'       config_setting_Mtx(i) = tmp(1)
'    Next

    'ZZフォルダの名称変更
    ChangeFolderNameZZ()
    
    
    '初期設定ファイルの読み込み
    Dim filePath: filePath = inSetDir + "\" + inSetFil + CStr(filenumber) + ".csv"
'    Msgbox filePath
    inSetMtx = readCsv(filePath)

    filePath = inSetDir + "\" + inSetFullFil + ".csv"
    inSetFullMtx = readCsv(filePath)
    
    '関数の管理番号を設定ファイルより取得
    Dim tmp_set
    For i = 1 To UBound(inSetMtx, 1) - 1
'    For i = 1 To UBound(inSetMtx, 1)
        tmp_set = Split(inSetMtx(i), ",")
        Dim num: num = tmp_set(inSetMemoCol)
        Dim func_type: func_type = tmp_set(inSetTypeCol)
        
        If func_type = FunctionRatio Then
            functionNumberRatio = num
        ElseIf func_type = FunctionAbsIchi Then
            FunctionNumberAbsIchi = num
        ElseIf func_type = FunctionAbs Then
            FunctionNumberAbs = num
        ElseIf func_type = FunctionJita Then
            FunctionNumberJita = num
        ElseIf func_type = FunctionJvalue Then
            FunctionNumberJvalue = num
        ElseIf func_type = FunctionTvalue Then
            FunctionNumberTvalue = num
        ElseIf func_type = FunctionJTvalue Then
            FunctionNumberJTvalue = num
        ElseIf func_type = FunctionSabun Then
            FunctionNumberSabun = num
        ElseIf func_type = FunctionSabunDougyaku Then
            FunctionNumberSabunDougyaku = num
        ElseIf func_type = FunctionSabunDougyaku2 Then
            FunctionNumberSabunDougyaku2 = num
        ElseIf func_type = FunctionMaehenka Then
            FunctionNumberMaehenka = num
        ElseIf func_type = FunctionLeaderDirection Then
            FunctionNumberLeaderDirection = num
        ElseIf func_type = FunctionLeaderNum Then
            FunctionNumberLeaderNum = num
        ElseIf func_type = FunctionLeaderShukiNum Then
            FunctionNumberLeaderShukiNum = num
        ElseIf func_type = FunctionMaxRatioPairNum Then
            FunctionNumberMaxRatioPairNum = num
        ElseIf func_type = FunctionOSum Then
            FunctionNumberOSum = num
        ElseIf func_type = FunctionPlus Then
            FunctionNumberPlus = num
        ElseIf func_type = FunctionRSum Then
            FunctionNumberRSum = num
        ElseIf func_type = FunctionHeiken Then
            FunctionNumberHeiken = num
        ElseIf func_type = FunctionHeOsUD Then
            FunctionNumberHeOsUD = num
        ElseIf func_type = FunctionHeOsZG Then
            FunctionNumberHeOsZG = num
        ElseIf func_type = FunctionDualKairi Then
            FunctionNumberDualKairi = num
        ElseIf func_type = FunctionDualDirection Then
            FunctionNumberDualDirection = num
        ElseIf func_type = FunctionRyouP Then
            FunctionNumberRyouP = num
        ElseIf func_type = FunctionRyouM Then
            FunctionNumberRyouM = num
        ElseIf func_type = FunctionRyouPM Then
            FunctionNumberRyouPM = num
        ElseIf func_type = FunctionRyou Then
            FunctionNumberRyou = num
        ElseIf func_type = FunctionGoalPredict Then
            FunctionNumberGoalPredict = num
        ElseIf func_type = FunctionMinus Then
            FunctionNumberMinus = num
        ElseIf func_type = FunctionZGMinus Then
            FunctionNumberZGMinus = num
        ElseIf func_type = FunctionZGAbsMinus Then
            FunctionNumberZGAbsMinus = num
        ElseIf func_type = FunctionTwoValueDiff Then
            FunctionNumberTwoValueDiff = num
        ElseIf func_type = FunctionSingleValueDiff Then
            FunctionNumberSingleValueDiff = num
        ElseIf func_type = FunctionSingleDDiff Then
            FunctionNumberSingleDDiff = num
        ElseIf func_type = FunctionSingleVDiffAve Then
            FunctionNumberSingleVDiffAve = num
        ElseIf func_type = FunctionSingleDDiffAve Then
            FunctionNumberSingleDDiffAve = num
        ElseIf func_type = FunctionPredictOre0 Then
            FunctionNumberPredictOre0 = num
        ElseIf func_type = FunctionPredictOre1 Then
            FunctionNumberPredictOre1 = num
        ElseIf func_type = FunctionPredictOre2 Then
            FunctionNumberPredictOre2 = num
        ElseIf func_type = FunctionPredictOre Then
            FunctionNumberPredictOre = num
        ElseIf func_type = FunctionPredictOre21 Then
            FunctionNumberPredictOre21 = num
        ElseIf func_type = FunctionPredictSoroi Then
            FunctionNumberPredictSoroi = num
        ElseIf func_type = FunctionPredictSoroiSabun Then
            FunctionNumberPredictSoroiSabun = num
        ElseIf func_type = FunctionPredictSoroiSabun2 Then
            FunctionNumberPredictSoroiSabun2 = num
        ElseIf func_type = FunctionPredictSoroiSabun3 Then
            FunctionNumberPredictSoroiSabun3 = num
        ElseIf func_type = FunctionPredictSoroiSetsuzoku Then
            FunctionNumberPredictSoroiSetsuzoku = num
        ElseIf func_type = FunctionPredictSoroisetsuzoku3 Then
            FunctionNumberPredictSoroisetsuzoku3 = num
        ElseIf func_type = FunctionPredictSoroiSabunPairs Then
            FunctionNumberPredictSoroiSabunPairs = num
        ElseIf func_type = FunctionJisseiTrace Then
            FunctionNumberJisseiTrace = num
        ElseIf func_type = FunctionJisseiTrace2 Then
            FunctionNumberJisseiTrace2 = num
        ElseIf func_type = FunctionJisseiTraceMini Then
            FunctionNumberJisseiTraceMini = num
        ElseIf func_type = FunctionJisseiTraceFull Then
            FunctionNumberJisseiTraceFull = num
        ElseIf func_type = FunctionJisseiTraceFull3 Then
            FunctionNumberJisseiTraceFull3 = num
        ElseIf func_type = FunctionJisseiTraceFull5 Then
            FunctionNumberJisseiTraceFull5 = num
        ElseIf func_type = FunctionJisseiTraceFull5Abs Then
            FunctionNumberJisseiTraceFull5Abs = num
        ElseIf func_type = FunctionJisseiTraceSabun Then
            FunctionNumberJisseiTraceSabun = num
        ElseIf func_type = FunctionJisseiTraceSabun3 Then
            FunctionNumberJisseiTraceSabun3 = num
        ElseIf func_type = FunctionJisseiTraceSabun4 Then
            FunctionNumberJisseiTraceSabun4 = num
        ElseIf func_type = FunctionJisseiTraceSabun5 Then
            FunctionNumberJisseiTraceSabun5 = num
        ElseIf func_type = FunctionJisseiTraceTime Then
            FunctionNumberJisseiTraceTime = num
        ElseIf func_type = FunctionJisseiTraceTimeHendou Then
            FunctionNumberJisseiTraceTimeHendou = num
        ElseIf func_type = FunctionNamasiFullBlockNamasi Then
            FunctionNumberNamasiFullBlockNamasi = num
        ElseIf func_type = FunctionNamasiFullBlockDirection Then
            FunctionNumberNamasiFullBlockDirection = num
        ElseIf func_type = FunctionNamasiFullBlockBar Then
            FunctionNumberNamasiFullBlockBar = num
        ElseIf func_type = FunctionNamasiFullPrices Then
            FunctionNumberNamasiFullPrices = num
        ElseIf func_type = FunctionNamasiFullBlockNumber Then
            FunctionNumberNamasiFullBlockNumber = num
        ElseIf func_type = FunctionDivide Then
            FunctionNumberDivide = num
        ElseIf func_type = FunctionMultiple Then
            FunctionNumberMultiple = num
        ElseIf func_type = FunctionTradeVolume Then
            FunctionNumberTradeVolume = num
        ElseIf func_type = FunctionTradeVolume2 Then
            FunctionNumberTradeVolume2 = num
        ElseIf func_type = FunctionGoalPredict100 Then
            FunctionNumberGoalPredict100 = num
        ElseIf func_type = FunctionFractalCount Then
            FunctionNumberFractalCount = num
        ElseIf func_type = FunctionFractalPercent Then
            FunctionNumberFractalPercent = num
        ElseIf func_type = FunctionFractalSinchoku Then
            FunctionNumberFractalSinchoku = num
        ElseIf func_type = FunctionFractalTiming Then
            FunctionNumberFractalTiming = num
        ElseIf func_type = FunctionHeikenReal Then
            FunctionNumberHeikenReal = num
        ElseIf func_type = FunctionRousokuIkiKaeri Then
            FunctionNumberRousokuIkiKaeri = num
        ElseIf func_type = FunctionRousokuIkiKaeriVariable Then
            FunctionNumberRousokuIkiKaeriVariable = num
        ElseIf func_type = FunctionAverage Then
            FunctionNumberAverage = num
        ElseIf func_type = FunctionAverageRousokuIkiKaeriVariable Then
            FunctionNumberAverageRousokuIkiKaeriVariable = num
        ElseIf func_type = FunctionAverageHeiken Then
            FunctionNumberAverageHeiken = num
        ElseIf func_type = FunctionFractalAnaume Then
            FunctionNumberFractalAnaume = num
        End If
        
    Next
    
    '計算用配列の次元確保
    ReDim holdRatio(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdAbsIchi(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdAbsIchiColNum)
    ReDim holdAbs(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdAbsColNum)
    ReDim holdJita(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJitaColNum)
    ReDim holdJvalue(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJvalueColNum)
    ReDim holdTvalue(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdTvalueColNum)
    ReDim holdJTvalue(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJTvalueColNum)
    ReDim holdSabun(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSabunColNum)
    ReDim holdSabunDougyaku(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSabunColNum)
    ReDim holdSabunDougyaku2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSabunColNum)
    ReDim holdMaehenka(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdMaehenkaColNum)
    ReDim holdLeaderDirection(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdLeaderDirectionColNum)
    ReDim holdLeaderNum(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdLeaderNumColNum)
    ReDim holdMaxRatioPairNum(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdOSum(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdPlus(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdRSum(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdHeiken(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdHeOsUD(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeOsUDColNum)
    ReDim holdHeOsZG(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeOsZGColNum)
    ReDim holdDualKairi(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdDualKairiColNum)
    ReDim holdDualDirection(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdDualDirectionColNum)
    ReDim holdRyouP(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRyouPColNum)
    ReDim holdRyouM(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRyouMColNum)
    ReDim holdRyouPM(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRyouPMColNum)
    ReDim holdRyou(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRyouColNum)
    ReDim holdGoalPredict(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdGoalPredictColNum)
    ReDim holdMinus(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdMinusColNum)
    ReDim holdZGMinus(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdZGMinusColNum)
    ReDim holdZGAbsMinus(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdZGAbsMinusColNum)
    ReDim holdTwoValueDiff(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdTwoValueDiffColNum)
    ReDim holdSingleValueDiff(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSingleValueDiffColNum)
    ReDim holdSingleDDiff(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSingleDDiffColNum)
    ReDim holdSingleVDiffAve(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSingleVDiffAveColNum)
    ReDim holdSingleDDiffAve(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdSingleDDiffAveColNum)
    ReDim holdPredictOre0(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictOreColNum)
    ReDim holdPredictOre1(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictOreColNum)
    ReDim holdPredictOre2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictOreColNum)
    ReDim holdPredictOre(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictOreColNum)
    ReDim holdPredictOre21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictOreColNum)
    ReDim holdJisseiTrace(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceColNum)
    ReDim holdJisseiTrace2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceColNum)
    ReDim holdJisseiTraceMini(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceMiniColNum)
    ReDim holdJisseiTraceFull(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceFullColNum)
    ReDim holdJisseiTraceFull3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceFull3ColNum)
    ReDim holdJisseiTraceFull5(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceFull5ColNum)
    ReDim holdJisseiTraceFull5Abs(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceFull5AbsColNum)
    ReDim holdJisseiTraceSabun(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceSabunColNum)
    ReDim holdJisseiTraceSabun3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceSabun3ColNum)
    ReDim holdJisseiTraceSabun4(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceSabun4ColNum)
    ReDim holdJisseiTraceSabun5(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceSabun5ColNum)
    ReDim holdJisseiTraceTime(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceTimeColNum)
    ReDim holdJisseiTraceTimeHendou(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdJisseiTraceTimeHendouColNum)
    ReDim holdNamasiFullBlockNamasi(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdNamasiFullBlockNamasiColNum)
    ReDim holdNamasiFullBlockDirection(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdNamasiFullBlockDirectionColNum)
    ReDim holdNamasiFullBlockBar(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdNamasiFullBlockBarColNum)
    ReDim holdNamasiFullPrices(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdNamasiFullPricesColNum)
    ReDim holdNamasiFullBlockNumber(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdNamasiFullBlockNumberColNum)
    ReDim holdDivide(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdDivideColNum)
    ReDim holdMultiple(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdMultipleColNum)
    ReDim holdTradeVolume(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdTradeVolumeColNum)
    ReDim holdTradeVolume2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdTradeVolume2ColNum)
    ReDim holdGoalPredict100(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdGoalPredict100ColNum)
    ReDim holdFractalCount(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdFractalCountColNum)
    ReDim holdFractalPercent(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdFractalPercentColNum)
    ReDim holdFractalSinchoku(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdFractalSinchokuColNum)
    ReDim holdFractalTiming(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdFractalTimingColNum)
    ReDim holdHeikenReal(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenRealColNum)
    ReDim holdRousokuIkiKaeri(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRousokuIkiKaeriColNum)
    ReDim holdRousokuIkiKaeriVariable(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRousokuIkiKaeriVariableColNum)
    ReDim holdAverage(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdAverageColNum)
    ReDim holdAverageRousokuIkiKaeriVariable(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdAverageRousokuIkiKaeriVariableColNum)
    ReDim holdAverageHeiken(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdAverageHeikenColNum)
    ReDim holdFractalAnaume(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdFractalAnaumeColNum)

    ReDim holdPredictSoroi(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiColNum, 1)
    ReDim holdPredictSoroiSabun(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiSabunColNum, 1)
    ReDim holdPredictSoroiSabun2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiSabun2ColNum, 1)
    ReDim holdPredictSoroiSabun3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiSabun3ColNum, 1)
    ReDim holdPredictSoroiSetsuzoku(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiSetsuzokuColNum, 1)
    ReDim holdPredictSoroisetsuzoku3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroisetsuzoku3ColNum, 1)
    ReDim holdPredictSoroiSabunPairs(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdPredictSoroiSabunPairsColNum, 1)

    ReDim holdLeaderShukiNum(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdLeaderShukiNumColNum, 1)

    ReDim holdLeaderRatio1_1(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio1_2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio1_3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio1_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio1_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio1_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)

    ReDim holdLeaderRatio2_1(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio2_2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio2_3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio2_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio2_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio2_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)

    ReDim holdLeaderRatio3_1(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio3_2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio3_3(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio3_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio3_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)
    ReDim holdLeaderRatio3_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdRatioColNum)

    ReDim holdKairiHeiken1_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken1_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken1_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken1_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken1_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken1_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeikens1_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens1_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens1_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens1_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens1_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens1_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)

    ReDim holdKairiHeiken2_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken2_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken2_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken2_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken2_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken2_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeikens2_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens2_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens2_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens2_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens2_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens2_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)

    ReDim holdKairiHeiken3_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken3_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken3_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken3_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken3_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeiken3_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    ReDim holdKairiHeikens3_11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens3_21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens3_31(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens3_12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens3_22(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)
    ReDim holdKairiHeikens3_32(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum,1)

    'ファイル出力用配列の次元確保
'    outputMtxReset

    '保持用配列の次元確保
    holdMtxReset

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

Function activateVbs()
    Dim FunctionName: FUnctionName = "activateVbs"
    parameters = """" & outDir1 & """ """ & combiDir1 & """ " & watchInterval & " " & inPriceFil & " " & inIndiFil & " " & MaxPeriod
    Call Shellbat(combiVbsPath, parameters)
    
    parameters = """" & outDir2 & """ """ & combiDir2 & """ " & watchInterval & " " & inPriceFil & " " & inIndiFil & " " & MaxPeriod
    Call Shellbat(combiVbsPath, parameters)
    
    parameters = """" & outDir3 & """ """ & combiDir3 & """ " & watchInterval & " " & inPriceFil & " " & inIndiFil & " " & MaxPeriod
    Call Shellbat(combiVbsPath, parameters)
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　バックテスト用インプット配列のリロード
' 目的   :  インプット用配列のリロード
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function inputMtxReload( _
    loop_time, _
    loop_period _
)
    Dim FunctionName : FunctionName = "inputMtxReload"

    Dim asi : asi = GetAsi(loop_period)
    Dim asi_saki : asi_saki = GetAsi(loop_period+1)
    Dim asi_ssaki : asi_ssaki = GetAsi(loop_period+2)
    Dim loop_time_saki : loop_time_saki = Int((loop_time-1)/(asi_saki/asi))+1
    Dim loop_time_ssaki : loop_time_ssaki = Int((loop_time-1)/(asi_ssaki/asi))+1
'    Dim loop_time_saki : loop_time_saki = Int((loop_time)/(asi_saki/asi)+0.001)+1 'double型等により整数値が微笑
    
    ReDim inIndiMtx1(inMtx_row)
    ReDim inIndiMtx2(inMtx_row)
    ReDim inIndiMtx3(inMtx_row)
    ReDim inIndiSakiMtx1(inMtx_row)
    ReDim inIndiSakiMtx2(inMtx_row)
    ReDim inIndiSakiMtx3(inMtx_row)
    ReDim inIndiSSakiMtx1(inMtx_row)
    ReDim inIndiSSakiMtx2(inMtx_row)
    ReDim inIndiSSakiMtx3(inMtx_row)
    ReDim inIndiPreMtx1(inMtx_row)
    ReDim inIndiPreMtx2(inMtx_row)
    ReDim inIndiPreMtx3(inMtx_row)

    if BTmode = 1 then
        ReDim inPriceMtx1(inPriceRowNum)
        ReDim inPriceMtx2(inPriceRowNum)
        ReDim inPriceMtx3(inPriceRowNum)
        ReDim inPriceSakiMtx1(inPriceRowNum)
        ReDim inPriceSakiMtx2(inPriceRowNum)
        ReDim inPriceSakiMtx3(inPriceRowNum)
        ReDim inPriceSSakiMtx1(inPriceRowNum)
        ReDim inPriceSSakiMtx2(inPriceRowNum)
        ReDim inPriceSSakiMtx3(inPriceRowNum)
        ReDim inPricePreMtx1(inPriceRowNum)
        ReDim inPricePreMtx2(inPriceRowNum)
        ReDim inPricePreMtx3(inPriceRowNum)
    end if
    
    'バックテストのとき
    if BTmode = 1 then
        Call SetindiMtx(inIndiMtx1, holdInAllIndicatorMtx1, loop_time, loop_period)
        Call SetindiMtx(inIndiMtx2, holdInAllIndicatorMtx2, loop_time, loop_period)
        Call SetindiMtx(inIndiMtx3, holdInAllIndicatorMtx3, loop_time, loop_period)    
        Call SetindiMtx(inIndiSakiMtx1, holdInAllIndicatorSakiMtx1, loop_time_saki, loop_period+1)
        Call SetindiMtx(inIndiSakiMtx2, holdInAllIndicatorSakiMtx2, loop_time_saki, loop_period+1)
        Call SetindiMtx(inIndiSakiMtx3, holdInAllIndicatorSakiMtx3, loop_time_saki, loop_period+1)    
        Call SetindiMtx(inIndiSSakiMtx1, holdInAllIndicatorSSakiMtx1, loop_time_ssaki, loop_period+2)
        Call SetindiMtx(inIndiSSakiMtx2, holdInAllIndicatorSSakiMtx2, loop_time_ssaki, loop_period+2)
        Call SetindiMtx(inIndiSSakiMtx3, holdInAllIndicatorSSakiMtx3, loop_time_ssaki, loop_period+2)    
        if loop_time > 1 then
            Call SetindiMtx(inIndiPreMtx1, holdInAllIndicatorMtx1, loop_time-1, loop_period)
            Call SetindiMtx(inIndiPreMtx2, holdInAllIndicatorMtx2, loop_time-1, loop_period)
            Call SetindiMtx(inIndiPreMtx3, holdInAllIndicatorMtx3, loop_time-1, loop_period)
        end if
    
        Call SetPriceMtx(inPriceMtx1, holdInAllIndicatorMtx1, loop_time, loop_period)
        Call SetPriceMtx(inPriceMtx2, holdInAllIndicatorMtx2, loop_time, loop_period)
        Call SetPriceMtx(inPriceMtx3, holdInAllIndicatorMtx3, loop_time, loop_period)
        Call SetPriceMtx(inPriceSakiMtx1, holdInAllIndicatorSakiMtx1, loop_time_saki, loop_period+1)
        Call SetPriceMtx(inPriceSakiMtx2, holdInAllIndicatorSakiMtx2, loop_time_saki, loop_period+1)
        Call SetPriceMtx(inPriceSakiMtx3, holdInAllIndicatorSakiMtx3, loop_time_saki, loop_period+1)
        Call SetPriceMtx(inPriceSSakiMtx1, holdInAllIndicatorSSakiMtx1, loop_time_ssaki, loop_period+2)
        Call SetPriceMtx(inPriceSSakiMtx2, holdInAllIndicatorSSakiMtx2, loop_time_ssaki, loop_period+2)
        Call SetPriceMtx(inPriceSSakiMtx3, holdInAllIndicatorSSakiMtx3, loop_time_ssaki, loop_period+2)
        if loop_time > 1 then
            Call SetPriceMtx(inPricePreMtx1, holdInAllIndicatorMtx1, loop_time-1, loop_period)
            Call SetPriceMtx(inPricePreMtx2, holdInAllIndicatorMtx2, loop_time-1, loop_period)
            Call SetPriceMtx(inPricePreMtx3, holdInAllIndicatorMtx3, loop_time-1, loop_period)
        end if
    'リアルのとき（価格配列はそのまま使用するため不要）
    else
        Call SetindiMtx(inIndiMtx1, holdInAllIndicatorMtx1, loop_time, loop_period)
        Call SetindiMtx(inIndiMtx2, holdInAllIndicatorMtx2, loop_time, loop_period)
        Call SetindiMtx(inIndiMtx3, holdInAllIndicatorMtx3, loop_time, loop_period)    
        Call SetindiMtx(inIndiSakiMtx1, holdInAllIndicatorSakiMtx1, loop_time_saki, loop_period+1)
        Call SetindiMtx(inIndiSakiMtx2, holdInAllIndicatorSakiMtx2, loop_time_saki, loop_period+1)
        Call SetindiMtx(inIndiSakiMtx3, holdInAllIndicatorSakiMtx3, loop_time_saki, loop_period+1)    
        Call SetindiMtx(inIndiSSakiMtx1, holdInAllIndicatorSSakiMtx1, loop_time_ssaki, loop_period+2)
        Call SetindiMtx(inIndiSSakiMtx2, holdInAllIndicatorSSakiMtx2, loop_time_ssaki, loop_period+2)
        Call SetindiMtx(inIndiSSakiMtx3, holdInAllIndicatorSSakiMtx3, loop_time_ssaki, loop_period+2)    
'        if loop_time > 1 then
'            Call SetindiMtx(inIndiPreMtx1, holdInAllIndicatorMtx1, loop_time-1, loop_period)
'            Call SetindiMtx(inIndiPreMtx2, holdInAllIndicatorMtx2, loop_time-1, loop_period)
'            Call SetindiMtx(inIndiPreMtx3, holdInAllIndicatorMtx3, loop_time-1, loop_period)
'        end if
    end if

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　バックテスト用インプット配列のリロード（新版）
' 目的   :  インプット用配列のリロード
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function SetindiMtx( _
    ByRef mtx_s, _
    mtx_l, _
    loop_time, _
    loop_period _
)
    Dim FunctionName :FunctionName = "SetindiMtx"
    For i = 0 To inMtx_row
        For j = 0 To inIndiColNum
            If i = 0 Then
                If j = 0 Then
                    mtx_s(i) = "ID"
                ElseIf j = 1 Then   
                    mtx_s(i) = mtx_s(i) & ",Day"
                ElseIf j = 2 Then
                    mtx_s(i) = mtx_s(i) & ",Time"
                ElseIf j = 3 Then
                    mtx_s(i) = mtx_s(i) & ",Asi"
                Else
                    mtx_s(i) = mtx_s(i) & ",Price"
                End If
            Else
                If j = 0 Then
                    mtx_s(i) = mtx_l(holdAllIndiNameRow,i)
                ElseIf j = 1 Then
'                    Dim day: day = Format(mtx_ll(j), "yyyy/mm/dd")
                    Dim day: day = FormatDateTime(mtx_l(loop_time,holdAllIndiDateCol), 2)
                    mtx_s(i) = mtx_s(i) & "," & day
                ElseIf j = 2 Then
'                    Dim time: time = Format(mtx_ll(j - 1), "hh:mm")
                    Dim time: time = FormatDateTime(mtx_l(loop_time,holdAllIndiDateCol), 4)
                    mtx_s(i) = mtx_s(i) & "," & time
                ElseIf j = 3 Then
                    Dim asi: asi = loop_period
                    mtx_s(i) = mtx_s(i) & "," & asi
                Else
                    mtx_s(i) = mtx_s(i) & "," & mtx_l(loop_time,i)
                End If
            End If
        
        Next
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　バックテスト用インプット配列のリロード
' 目的   :  インプット用配列のリロード
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function SetPriceMtx( _
    ByRef mtx_s, _
    mtx_l, _
    loop_time, _
    loop_period _
)
    For i = 0 To inMtx_row
        Dim mtx_ll
        If i = 0 Then
            mtx_s(i) = "Day,Time,Ashi,Price"
        Else
            If Left(mtx_l(holdAllIndiNameRow,i), 2) = "ZZ" Then
                j = 1
'                    Dim day: day = Format(mtx_ll(j), "yyyy/mm/dd")
                    Dim day: day = FormatDateTime(mtx_l(loop_time,holdAllIndiDateCol), 2)
                    mtx_s(i) = day
                j = 2
'                    Dim time: time = Format(mtx_ll(j - 1), "hh:mm")
                    Dim time: time = FormatDateTime(mtx_l(loop_time,holdAllIndiDateCol), 4)
                    mtx_s(i) = mtx_s(i) & "," & time
                j = 3
                    mtx_s(i) = mtx_s(i) & "," & loop_period
                j = 4
                    mtx_s(i) = mtx_s(i) & "," & mtx_l(loop_time,i)
            Else
                Exit For
            End If
        End If

'        msgbox i & "-" & loop_time & "," & loop_period & "," & inMtx_row& "," &mtx_s(i) 
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　バックテスト用ファイルのインポート
' 目的   :  バックテスト用ファイルのインポート
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function ImportBTFiles( _
    Byref import_row, _
    Byref check_flag, _
    asi, _
    asi_saki, _
    asi_ssaki, _
    date_str _
)
    Dim FunctionName :FunctionName = "importBTFiles"
On Error Resume Next

    '指標数分ファイルを読み込む（存在するファイル及び配列へ未格納の指標の場合）
    Dim curkey
    Dim col: col = holdAllIndiDateCol+1
    Dim first_flag : first_flag = 0
    check_flag = true
    For Each curkey In dic_import
        Dim tmp_check_flag : tmp_check_flag = false
        Dim tmp_curkey : tmp_curkey = SmallCodeConvert(curkey)
        Dim filePath1 : filePath1 = inDir1 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        DIm filePath2 : filePath2 = inDir2 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        Dim filePath3 : filePath3 = inDir3 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        Dim filePath1_saki : filePath1_saki = inDir1 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        DIm filePath2_saki : filePath2_saki = inDir2 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        Dim filePath3_saki : filePath3_saki = inDir3 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        Dim filePath1_ssaki : filePath1_ssaki = inDir1 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        DIm filePath2_ssaki : filePath2_ssaki = inDir2 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
        Dim filePath3_ssaki : filePath3_ssaki = inDir3 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"

        Dim objFSO2
        Set objFSO2 = CreateObject("Scripting.FileSystemObject")
    
        Dim check_count: check_count=0

        If objFSO2.FileExists(filePath1) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath1 = inDir1 & "\" & asi & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath1) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath2) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath2 = inDir2 & "\" & asi & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath2) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath3) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath3 = inDir3 & "\" & asi & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath3) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath1_saki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath1_saki = inDir1 & "\" & asi_saki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath1_saki) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath2_saki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath2_saki = inDir2 & "\" & asi_saki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath2_saki) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath3_saki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath3_saki = inDir3 & "\" & asi_saki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath3_saki) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath1_ssaki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath1_ssaki = inDir1 & "\" & asi_ssaki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath1_ssaki) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath2_ssaki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath2_ssaki = inDir2 & "\" & asi_ssaki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath2_ssaki) Then
                    check_count = check_count + 1
                end if
            end if
        End if
        If objFSO2.FileExists(filePath3_ssaki) Then
            check_count = check_count + 1
        else
            if InStr(1,tmp_curkey,"ZZ") > 0 then
                filePath3_ssaki = inDir3 & "\" & asi_ssaki & "\" & "0" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                If objFSO2.FileExists(filePath3_ssaki) Then
                    check_count = check_count + 1
                end if
            end if
        End if


        Set objFSO2 = nothing

        'インポート対象ファイルがある場合
        if check_count >= 3 then
            '指標データのインポート
            Dim tmp_indimtxbt1, tmp_indimtxbt2, tmp_indimtxbt3
            tmp_indimtxbt1 = readCsv(filePath1)
            tmp_indimtxbt2 = readCsv(filePath2)
            tmp_indimtxbt3 = readCsv(filePath3)
            '指標データのインポート
            Dim tmp_indimtxbt1_saki, tmp_indimtxbt2_saki, tmp_indimtxbt3_saki
            Dim tmp_indimtxbt1_ssaki, tmp_indimtxbt2_ssaki, tmp_indimtxbt3_ssaki
            '先足分が無い場合、今足のファイルを借り読込する
            if check_count < 6 then
                tmp_indimtxbt1_saki = readCsv(filePath1)
                tmp_indimtxbt2_saki = readCsv(filePath2)
                tmp_indimtxbt3_saki = readCsv(filePath3)
                tmp_indimtxbt1_ssaki = readCsv(filePath1)
                tmp_indimtxbt2_ssaki = readCsv(filePath2)
                tmp_indimtxbt3_ssaki = readCsv(filePath3)
            else
                tmp_indimtxbt1_saki = readCsv(filePath1_saki)
                tmp_indimtxbt2_saki = readCsv(filePath2_saki)
                tmp_indimtxbt3_saki = readCsv(filePath3_saki)
                tmp_indimtxbt1_ssaki = readCsv(filePath1_ssaki)
                tmp_indimtxbt2_ssaki = readCsv(filePath2_ssaki)
                tmp_indimtxbt3_ssaki = readCsv(filePath3_ssaki)
            end if

            Dim tmp_col : tmp_col = col
            '列番号の名称がカレントキーと合致していない場合（最初に列探索をする）
            if holdInAllIndicatorMtx1(holdAllIndiNameRow,col) <> curkey then
                For tmp_col=holdAllIndiDateCol+1 To Ubound(holdInAllIndicatorMtx1,2)
                    if curkey = holdInAllIndicatorMtx1(holdAllIndiNameRow,tmp_col) then
                        Exit For
                    End if
                Next
            end if

            '未格納配列の場合、配列へ値を格納する
            if holdInAllIndicatorMtx1(holdAllIndiNameRow+1,tmp_col) = Empty then
                For loop_row = 1 To Ubound(tmp_indimtxbt1,1)
                    if tmp_indimtxbt1(loop_row) <> "" then
                        Dim tmp_mtx: tmp_mtx = Split(tmp_indimtxbt1(loop_row),",")
                        holdInAllIndicatorMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt2(loop_row),",")
                        holdInAllIndicatorMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt3(loop_row),",")
                        holdInAllIndicatorMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt1_saki(loop_row),",")
                        holdInAllIndicatorSakiMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt2_saki(loop_row),",")
                        holdInAllIndicatorSakiMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt3_saki(loop_row),",")
                        holdInAllIndicatorSakiMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt1_ssaki(loop_row),",")
                        holdInAllIndicatorSSakiMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt2_ssaki(loop_row),",")
                        holdInAllIndicatorSSakiMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        tmp_mtx = Split(tmp_indimtxbt3_ssaki(loop_row),",")
                        holdInAllIndicatorSSakiMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                        '初回フラグが未処置の状態の場合、日時列へも入力する
                        if first_flag = 0 then
                            tmp_mtx = Split(tmp_indimtxbt1(loop_row),",")
                            holdInAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            holdOutAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt2(loop_row),",")
                            holdInAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            holdOutAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt3(loop_row),",")
                            holdInAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            holdOutAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt1_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt2_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt3_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt1_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt2_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            tmp_mtx = Split(tmp_indimtxbt3_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                            import_row = Ubound(tmp_indimtxbt1,1)
                        end if
                    else
                        import_row = loop_row
                        Exit For
                    end if
                Next
                '初回フラグを更新する
                first_flag = 1
            end if
            tmp_check_flag = true

        '入力ディレクトリ側にファイルが無い場合、出力ディレクトリ側を探索する
        else
            tmp_curkey = SmallCodeConvert(curkey)
            filePath1 = outDir1 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath2 = outDir2 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath3 = outDir3 & "\" & asi & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath1_saki = outDir1 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath2_saki = outDir2 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath3_saki = outDir3 & "\" & asi_saki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath1_ssaki = outDir1 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath2_ssaki = outDir2 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
            filePath3_ssaki = outDir3 & "\" & asi_ssaki & "\" & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"

            Set objFSO2 = CreateObject("Scripting.FileSystemObject")
    
            check_count=0

            If objFSO2.FileExists(filePath1) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath1 = outDir1 & "\" & asi & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath1) Then
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath2) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath2 = outDir2 & "\" & asi & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath2) Then
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath3) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath3 = outDir3 & "\" & asi & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath3) Then
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath1_saki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath1_saki = outDir1 & "\" & asi_saki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath1_saki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath1_saki = filePath1
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath2_saki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath2_saki = outDir2 & "\" & asi_saki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath2_saki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath2_saki = filePath2
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath3_saki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath3_saki = outDir3 & "\" & asi_saki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath3_saki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath3_saki = filePath3
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath1_ssaki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath1_ssaki = outDir1 & "\" & asi_ssaki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath1_ssaki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath1_ssaki = filePath1
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath2_ssaki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath2_ssaki = outDir2 & "\" & asi_ssaki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath2_ssaki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath2_ssaki = filePath2
                        check_count = check_count + 1
                    end if
                end if
            End if
            If objFSO2.FileExists(filePath3_ssaki) Then
                check_count = check_count + 1
            else
                if InStr(1,tmp_curkey,"ZZ") > 0 then
                    filePath3_ssaki = outDir3 & "\" & asi_ssaki & "\" & 0 & tmp_curkey & "\" & inIndiFil & "_" & date_str & ".csv"
                    If objFSO2.FileExists(filePath3_ssaki) Then
                        check_count = check_count + 1
                    'ファイルが見つからない場合今足と同じファイルを読み込む
                    else
                        filePath3_ssaki = filePath3
                        check_count = check_count + 1
                    end if
                end if
            End if

            Set objFSO2 = nothing

            'インポート対象ファイルがある場合
            if check_count >= 6 then
                '指標データのインポート
                tmp_indimtxbt1 = readCsv(filePath1)
                tmp_indimtxbt2 = readCsv(filePath2)
                tmp_indimtxbt3 = readCsv(filePath3)
                tmp_indimtxbt1_saki = readCsv(filePath1_saki)
                tmp_indimtxbt2_saki = readCsv(filePath2_saki)
                tmp_indimtxbt3_saki = readCsv(filePath3_saki)
                tmp_indimtxbt1_ssaki = readCsv(filePath1_ssaki)
                tmp_indimtxbt2_ssaki = readCsv(filePath2_ssaki)
                tmp_indimtxbt3_ssaki = readCsv(filePath3_ssaki)

                tmp_col = col
                '列番号の名称がカレントキーと合致していない場合（最初に列探索をする）
                if holdInAllIndicatorMtx1(holdAllIndiNameRow,col) <> curkey then
                    For tmp_col=holdAllIndiDateCol+1 To Ubound(holdInAllIndicatorMtx1,2)
                        if curkey = holdInAllIndicatorMtx1(holdAllIndiNameRow,tmp_col) then
                            Exit For
                        End if
                    Next
                end if

                '未格納配列の場合、配列へ値を格納する
                if holdInAllIndicatorMtx1(holdAllIndiNameRow+1,tmp_col) = Empty then
                    For loop_row = 1 To Ubound(tmp_indimtxbt1,1)
                        if tmp_indimtxbt1(loop_row) <> "" then
                            tmp_mtx = Split(tmp_indimtxbt1(loop_row),",")
                            holdInAllIndicatorMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt2(loop_row),",")
                            holdInAllIndicatorMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt3(loop_row),",")
                            holdInAllIndicatorMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt1_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt2_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt3_saki(loop_row),",")
                            holdInAllIndicatorSakiMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt1_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx1(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt2_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx2(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            tmp_mtx = Split(tmp_indimtxbt3_ssaki(loop_row),",")
                            holdInAllIndicatorSSakiMtx3(loop_row, tmp_col) = tmp_mtx(tmpIndiPricecol)
                            '初回フラグが未処置の状態の場合、日時列へも入力する
                            if first_flag = 0 then
                                tmp_mtx = Split(tmp_indimtxbt1(loop_row),",")
                                holdInAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                holdOutAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt2(loop_row),",")
                                holdInAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                holdOutAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt3(loop_row),",")
                                holdInAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                holdOutAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt1_saki(loop_row),",")
                                holdInAllIndicatorSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt2_saki(loop_row),",")
                                holdInAllIndicatorSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt3_saki(loop_row),",")
                                holdInAllIndicatorSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt1_ssaki(loop_row),",")
                                holdInAllIndicatorSSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt2_ssaki(loop_row),",")
                                holdInAllIndicatorSSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                tmp_mtx = Split(tmp_indimtxbt3_ssaki(loop_row),",")
                                holdInAllIndicatorSSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(tmpIndiDatecol)
                                import_row = Ubound(tmp_indimtxbt1,1)
                            end if
                        else
                            import_row = loop_row
                            Exit For
                        end if
                    Next
                    '初回フラグを更新する
                    first_flag = 1
                end if
                tmp_check_flag = true
            end if

        end if
        if tmp_check_flag = false then
            check_flag = false
        end if
        col = col+1
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If

end function

'***********************************************************
' 機能   :　リアル用ファイルの対象指標のみの抽出処理
' 目的   :  リアル用ファイルの対象指標のみの抽出処理
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function ImportRLFiles()
    Dim FunctionName :FunctionName = "importRLFiles"
On Error Resume Next

    Dim loop_row : loop_row = holdAllIndiNameRow+1
    Dim first_flag : first_flag = 0
    
    '指標データのインポート
    'インポート保持用配列の列の中で未格納の配列へ値を格納していく
    For loop_col = holdAllIndiDateCol+1 To Ubound(holdInAllIndicatorMtx1,2)
        
        '指標ｺｰﾄﾞの取得
        Dim check_key : check_key = holdInAllIndicatorMtx1(holdAllIndiNameRow, loop_col)

        '未格納配列の場合、配列へ値を格納する
        if holdInAllIndicatorMtx1(loop_row,loop_col) = Empty then
            '指標が見つかった場合trueとするフラグ（出力配列まで参照するか否か）
            Dim check_flag : check_flag = false
            
            '入力配列を参照
            For loop_in = 1 To Ubound(inIndiMtxRL1,1)
                '空行でない
                if inIndiMtxRL1(loop_in) <> "" then
                    tmp_mtx = Split(inIndiMtxRL1(loop_in),",")
                    '格納配列の列の指標ｺｰﾄﾞと取得配列の行の指標ｺｰﾄﾞが合致
                    if tmp_mtx(inIndiIDCol) = check_key then
                        holdInAllIndicatorMtx1(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiMtxRL2(loop_in),",")
                        holdInAllIndicatorMtx2(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiMtxRL3(loop_in),",")
                        holdInAllIndicatorMtx3(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSakiMtxRL1(loop_in),",")
                        holdInAllIndicatorSakiMtx1(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSakiMtxRL2(loop_in),",")
                        holdInAllIndicatorSakiMtx2(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSakiMtxRL3(loop_in),",")
                        holdInAllIndicatorSakiMtx3(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSSakiMtxRL1(loop_in),",")
                        holdInAllIndicatorSSakiMtx1(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSSakiMtxRL2(loop_in),",")
                        holdInAllIndicatorSSakiMtx2(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        tmp_mtx = Split(inIndiSSakiMtxRL3(loop_in),",")
                        holdInAllIndicatorSSakiMtx3(loop_row, loop_col) = tmp_mtx(inIndiPriceCol)
                        check_flag = true
                        '初回の場合、日時も取得する
                        if first_flag = 0 then
                            holdInAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSSakiMtx1(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSSakiMtx2(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            holdInAllIndicatorSSakiMtx3(loop_row, holdAllIndiDateCol) = tmp_mtx(inIndiDateCol) & " " & tmp_mtx(inIndiTimeCol)
                            first_flag = 1
                        end if
                        Exit For
                    end if
                end if
            Next
            
            '入力配列上から対象の指標が見つからなかった場合
            if check_flag = false then
                '出力配列を参照
                Dim check_row : check_row = holdAllIndiNameRow+1
                For loop_out = 1 To Ubound(holdOutAllIndicatorMtx1,2)
                    if holdOutAllIndicatorMtx1(check_row, loop_out) <> "" then
                        '指標ｺｰﾄﾞが合致するとき
                        if holdOutAllIndicatorMtx1(holdAllIndiNameRow, loop_out) = check_key then
                            '先足は出力側へは登録されないため、確認しない
                            holdInAllIndicatorMtx1(loop_row, loop_col) = holdOutAllIndicatorMtx1(check_row, loop_out)
                            holdInAllIndicatorMtx2(loop_row, loop_col) = holdOutAllIndicatorMtx2(check_row, loop_out)
                            holdInAllIndicatorMtx3(loop_row, loop_col) = holdOutAllIndicatorMtx3(check_row, loop_out)
                            check_flag = true
                            '初回の場合、日時も取得する
                            if first_flag = 0 then
                                holdInAllIndicatorMtx1(loop_row, holdAllIndiDateCol) = holdOutAllIndicatorMtx1(check_row, holdAllIndiDateCol)
                                holdInAllIndicatorMtx2(loop_row, holdAllIndiDateCol) = holdOutAllIndicatorMtx2(check_row, holdAllIndiDateCol)
                                holdInAllIndicatorMtx3(loop_row, holdAllIndiDateCol) = holdOutAllIndicatorMtx3(check_row, holdAllIndiDateCol)
                                first_flag = 1
                            end if
                            Exit For
                        end if
                    end if
                Next
            end if
        end if
    Next


if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If

end function

'***********************************************************
' 機能   :　出力用配列のリセット
' 目的   :  出力用配列のリセット、次元の確保
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function outputMtxReset()
    Dim FunctionName :FunctionName = "outputMtxReset"

    ReDim outRatio(outPutRowNum, outPutColNum)
    ReDim outAbsIchi(outPutRowNum, outPutColNum)
    ReDim outAbs(outPutRowNum, outPutColNum)
    ReDim outJita(outPutRowNum, outPutColNum)
    ReDim outJvalue(outPutRowNum, outPutColNum)
    ReDim outTvalue(outPutRowNum, outPutColNum)
    ReDim outJTvalue(outPutRowNum, outPutColNum)
    ReDim outSabun(outPutRowNum, outPutColNum)
    ReDim outSabunDougyaku(outPutRowNum, outPutColNum)
    ReDim outSabunDougyaku2(outPutRowNum, outPutColNum)
    ReDim outMaehenka(outPutRowNum, outPutColNum)
    ReDim outLeaderDirection(outPutRowNum, outPutColNum)
    ReDim outLeaderNum(outPutRowNum, outPutColNum)
    ReDim outLeaderShukiNum(outPutRowNum, outPutColNum)
    ReDim outMaxRatioPairNum(outPutRowNum, outPutColNum)
    ReDim outOSum(outPutRowNum, outPutColNum)
    ReDim outPlus(outPutRowNum, outPutColNum)
    ReDim outRSum(outPutRowNum, outPutColNum)
    ReDim outHeiken(outPutRowNum, outPutColNum)
    ReDim outHeOsUD(outPutRowNum, outPutColNum)
    ReDim outHeOsZG(outPutRowNum, outPutColNum)
    ReDim outDualKairi(outPutRowNum, outPutColNum)
    ReDim outDualDirection(outPutRowNum, outPutColNum)
    ReDim outRyouP(outPutRowNum, outPutColNum)
    ReDim outRyouM(outPutRowNum, outPutColNum)
    ReDim outRyouPM(outPutRowNum, outPutColNum)
    ReDim outRyou(outPutRowNum, outPutColNum)
    ReDim outGoalPredict(outPutRowNum, outPutColNum)
    ReDim outMinus(outPutRowNum, outPutColNum)
    ReDim outZGMinus(outPutRowNum, outPutColNum)
    ReDim outZGAbsMinus(outPutRowNum, outPutColNum)
    ReDim outTwoValueDiff(outPutRowNum, outPutColNum)
    ReDim outSingleValueDiff(outPutRowNum, outPutColNum)
    ReDim outSingleDDiff(outPutRowNum, outPutColNum)
    ReDim outSingleVDiffAve(outPutRowNum, outPutColNum)
    ReDim outSingleDDiffAve(outPutRowNum, outPutColNum)
    ReDim outPredictOre0(outPutRowNum, outPutColNum)
    ReDim outPredictOre1(outPutRowNum, outPutColNum)
    ReDim outPredictOre2(outPutRowNum, outPutColNum)
    ReDim outPredictOre(outPutRowNum, outPutColNum)
    ReDim outPredictOre21(outPutRowNum, outPutColNum)
    ReDim outPredictSoroi(outPutRowNum, outPutColNum)
    ReDim outPredictSoroiSabun(outPutRowNum, outPutColNum)
    ReDim outPredictSoroiSabun2(outPutRowNum, outPutColNum)
    ReDim outPredictSoroiSabun3(outPutRowNum, outPutColNum)
    ReDim outPredictSoroiSetsuzoku(outPutRowNum, outPutColNum)
    ReDim outPredictSoroisetsuzoku3(outPutRowNum, outPutColNum)
    ReDim outPredictSoroiSabunPairs(outPutRowNum, outPutColNum)
    ReDim outJisseiTrace(outPutRowNum, outPutColNum)
    ReDim outJisseiTrace2(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceMini(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceFull(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceFull3(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceFull5(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceFull5Abs(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceSabun(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceSabun3(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceSabun4(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceSabun5(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceTime(outPutRowNum, outPutColNum)
    ReDim outJisseiTraceTimeHendou(outPutRowNum, outPutColNum)
    ReDim outNamasiFullBlockNamasi(outPutRowNum, outPutColNum)
    ReDim outNamasiFullBlockDirection(outPutRowNum, outPutColNum)
    ReDim outNamasiFullBlockBar(outPutRowNum, outPutColNum)
    ReDim outNamasiFullPrices(outPutRowNum, outPutColNum)
    ReDim outNamasiFullBlockNumber(outPutRowNum, outPutColNum)
    ReDim outDivide(outPutRowNum, outPutColNum)
    ReDim outMultiple(outPutRowNum, outPutColNum)
    ReDim outTradeVolume(outPutRowNum, outPutColNum)
    ReDim outTradeVolume2(outPutRowNum, outPutColNum)
    ReDim outGoalPredict100(outPutRowNum, outPutColNum)
    ReDim outFractalCount(outPutRowNum, outPutColNum)
    ReDim outFractalPercent(outPutRowNum, outPutColNum)
    ReDim outFractalSinchoku(outPutRowNum, outPutColNum)
    ReDim outFractalTiming(outPutRowNum, outPutColNum)
    ReDim outHeikenReal(outPutRowNum, outPutColNum)
    ReDim outRousokuIkiKaeri(outPutRowNum, outPutColNum)
    ReDim outRousokuIkiKaeriVariable(outPutRowNum, outPutColNum)
    ReDim outAverage(outPutRowNum, outPutColNum)
    ReDim outAverageRousokuIkiKaeriVariable(outPutRowNum, outPutColNum)
    ReDim outAverageHeiken(outPutRowNum, outPutColNum)
    ReDim outFractalAnaume(outPutRowNum, outPutColNum)

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　出力用配列のリセット
' 目的   :  出力用配列のリセット、次元の確保
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function holdMtxReset()
    Dim FunctionName :FunctionName = "holdMtxReset"

    '入力指標用配列の確保
    '構成要素の指標のリスト化
'    Set dic_import = CreateObject("Scripting.Dictionary")

'    '価格分の追加
'    dic_import.Add "ZZ002", "ZZ002"
'    dic_import.Add "ZZ003", "ZZ003"
'    dic_import.Add "ZZ004", "ZZ004"

'    '設定ファイル上の出力ｺｰﾄﾞ分（行数分）ループする
'    For row=1 To Ubound(inSetMtx,1)
'        Dim tmp_set : tmp_set = Split(inSetMtx(row), ",")

'        if inSetMtx(row) <> "" then
'            'Name1分
'            Dim codes : codes = tmp_set(inSetName1Col)
'            Dim tmp_code : tmp_code = Split(codes, "|")
'            For loop_code=0 To Ubound(tmp_code,1)
'                if dic_import.Exists(tmp_code(loop_code)) then
'                else
'                    SearchParentCode(tmp_code(loop_code))
'                end if
'            Next

'            'Nmae2分
'            codes = tmp_set(inSetName2Col)
'            if codes <> "" and codes <> "0" then
'                tmp_code = Split(codes, "|")
'                For loop_code=0 To Ubound(tmp_code,1)
'                    if dic_import.Exists(tmp_code(loop_code)) then
'                    else
'                        SearchParentCode(tmp_code(loop_code))
'                    end if
'                Next
'            end if

'            'Kairi分
'            codes = tmp_set(inSetKairiCol)
'            if codes <> "" and codes <> "0" then
'                tmp_code = Split(codes, "|")
'                For loop_code=0 To Ubound(tmp_code,1)
'                    if tmp_code(loop_code) <> "" and tmp_code(loop_code) <> "0" then
'                        Dim tmp_code2 : tmp_code2 = Split(tmp_code(loop_code),"_")
'                        For loop_code2=0 To Ubound(tmp_code2,1)
'                            if dic_import.Exists(tmp_code2(loop_code2)) then
'                            else
'                                SearchParentCode(tmp_code2(loop_code2))
'                            end if
'                        Next
'                    end if
'                Next
'            end if
'        end if
'    next

'    'dic_importに格納されているｺｰﾄﾞ分配列を確保し、名前を登録する
'    ReDim holdInAllIndicatorMtx1(holdAllIndiRowNum, dic_import.Count)
'    ReDim holdInAllIndicatorMtx2(holdAllIndiRowNum, dic_import.Count)
'    ReDim holdInAllIndicatorMtx3(holdAllIndiRowNum, dic_import.Count)
'    holdInAllIndicatorMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
'    holdInAllIndicatorMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
'    holdInAllIndicatorMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
'    Dim curkey
'    Dim col: col = holdAllIndiDateCol+1
'    For Each curkey In dic_import
'        holdInAllIndicatorMtx1(holdAllIndiNameRow, col) = curkey
'        holdInAllIndicatorMtx2(holdAllIndiNameRow, col) = curkey
'        holdInAllIndicatorMtx3(holdAllIndiNameRow, col) = curkey
'        col = col + 1
'    Next

'    '使用指標数の格納
'    inMtx_row = dic_import.Count



    '出力用配列の確保
    ReDim holdOutAllIndicatorMtx1(holdAllIndiRowNum, 1)
    ReDim holdOutAllIndicatorMtx2(holdAllIndiRowNum, 1)
    ReDim holdOutAllIndicatorMtx3(holdAllIndiRowNum, 1)
        
    Dim colnum : colnum = 1
    '指標ｺｰﾄﾞの格納
    For row=1 To Ubound(inSetMtx,1)
        if inSetMtx(row) <> "" then
            tmp_set = Split(inSetMtx(row), ",")
            codes = tmp_set(inSetCodeCol)
            tmp_code = Split(codes, "|")
            colnum = colnum + Ubound(tmp_code,1)
            '配列の確保
            ReDim Preserve holdOutAllIndicatorMtx1(holdAllIndiRowNum, colnum)
            ReDim Preserve holdOutAllIndicatorMtx2(holdAllIndiRowNum, colnum)
            ReDim Preserve holdOutAllIndicatorMtx3(holdAllIndiRowNum, colnum)
            '指標ｺｰﾄﾞの追記
            For col=0 To Ubound(tmp_code,1)
                holdOutAllIndicatorMtx1(holdAllIndiNameRow, colnum-Ubound(tmp_code,1)+col) = tmp_code(col)
                holdOutAllIndicatorMtx2(holdAllIndiNameRow, colnum-Ubound(tmp_code,1)+col) = tmp_code(col)
                holdOutAllIndicatorMtx3(holdAllIndiNameRow, colnum-Ubound(tmp_code,1)+col) = tmp_code(col)
            next
            colnum = colnum + 1
        end if
    Next
    
    'Date列の格納
    holdOutAllIndicatorMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
    holdOutAllIndicatorMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
    holdOutAllIndicatorMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　入力用配列のリセット
' 目的   :  入力用配列のリセット、次元の確保
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function holdInMtxReset(row)
    Dim FunctionName :FunctionName = "holdInMtxReset"

    '入力指標用配列の確保
    '構成要素の指標のリスト化
    Set dic_import = CreateObject("Scripting.Dictionary")

    '価格分の追加
    if BTmode = 1 then
        dic_import.Add "ZZ002", "ZZ002"
        dic_import.Add "ZZ003", "ZZ003"
        dic_import.Add "ZZ004", "ZZ004"
    end if

    '設定ファイル上の出力ｺｰﾄﾞ分（行数分）ループする
'    For row=1 To Ubound(inSetMtx,1)
        Dim tmp_set : tmp_set = Split(inSetMtx(row), ",")

        if inSetMtx(row) <> "" then
            'Name1分
            Dim codes : codes = tmp_set(inSetName1Col)
            Dim tmp_code : tmp_code = Split(codes, "|")
            For loop_code=0 To Ubound(tmp_code,1)
                Dim tmp_code2 : tmp_code2 = Split(tmp_code(loop_code),"_")
                For loop_code2=0 To Ubound(tmp_code2,1)
                    if dic_import.Exists(tmp_code2(loop_code2)) then
                    else
                        SearchParentCode(tmp_code2(loop_code2))
                    end if
                Next
            Next

            'Nmae2分
            codes = tmp_set(inSetName2Col)
            if codes <> "" and codes <> "0" then
                tmp_code = Split(codes, "|")
                For loop_code=0 To Ubound(tmp_code,1)
                    tmp_code2 = Split(tmp_code(loop_code),"_")
                    For loop_code2=0 To Ubound(tmp_code2,1)
                        if dic_import.Exists(tmp_code(loop_code)) then
                        else
                            SearchParentCode(tmp_code(loop_code))
                        end if
                    Next
                Next
            end if

            'Kairi分
            codes = tmp_set(inSetKairiCol)
            if codes <> "" and codes <> "0" then
                tmp_code = Split(codes, "|")
                For loop_code=0 To Ubound(tmp_code,1)
                    if tmp_code(loop_code) <> "" and tmp_code(loop_code) <> "0" then
                        tmp_code2 = Split(tmp_code(loop_code),"_")
                        For loop_code2=0 To Ubound(tmp_code2,1)
                            if dic_import.Exists(tmp_code2(loop_code2)) then
                            else
                                SearchParentCode(tmp_code2(loop_code2))
                            end if
                        Next
                    end if
                Next
            end if
        end if
'    next

    'dic_importに格納されているｺｰﾄﾞ分配列を確保し、名前を登録する
    'BTのとき
    if BTmode = 1 then
        ReDim holdInAllIndicatorMtx1(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorMtx2(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorMtx3(holdAllIndiRowNum, dic_import.Count)
        holdInAllIndicatorMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        ReDim holdInAllIndicatorSakiMtx1(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorSakiMtx2(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorSakiMtx3(holdAllIndiRowNum, dic_import.Count)
        holdInAllIndicatorSakiMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSakiMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSakiMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        ReDim holdInAllIndicatorSSakiMtx1(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorSSakiMtx2(holdAllIndiRowNum, dic_import.Count)
        ReDim holdInAllIndicatorSSakiMtx3(holdAllIndiRowNum, dic_import.Count)
        holdInAllIndicatorSSakiMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSSakiMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSSakiMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        Dim curkey
        Dim col: col = holdAllIndiDateCol+1
        For Each curkey In dic_import
            holdInAllIndicatorMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorMtx3(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx3(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx3(holdAllIndiNameRow, col) = curkey
            col = col + 1
        Next
    'リアルのとき
    else
        ReDim holdInAllIndicatorMtx1(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorMtx2(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorMtx3(holdAllIndiRowRLNum, dic_import.Count)
        holdInAllIndicatorMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        ReDim holdInAllIndicatorSakiMtx1(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorSakiMtx2(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorSakiMtx3(holdAllIndiRowRLNum, dic_import.Count)
        holdInAllIndicatorSakiMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSakiMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSakiMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        ReDim holdInAllIndicatorSSakiMtx1(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorSSakiMtx2(holdAllIndiRowRLNum, dic_import.Count)
        ReDim holdInAllIndicatorSSakiMtx3(holdAllIndiRowRLNum, dic_import.Count)
        holdInAllIndicatorSSakiMtx1(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSSakiMtx2(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"
        holdInAllIndicatorSSakiMtx3(holdAllIndiNameRow, holdAllIndiDateCol) = "Date"

        Dim tmp_indi : tmp_indi = Split(inIndiMtxRL1(1),",")
        holdInAllIndicatorMtx1(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiMtxRL2(1),",")
        holdInAllIndicatorMtx2(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiMtxRL3(1),",")
        holdInAllIndicatorMtx3(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSakiMtxRL1(1),",")
        holdInAllIndicatorSakiMtx1(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSakiMtxRL2(1),",")
        holdInAllIndicatorSakiMtx2(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSakiMtxRL3(1),",")
        holdInAllIndicatorSakiMtx3(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSSakiMtxRL1(1),",")
        holdInAllIndicatorSSakiMtx1(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSSakiMtxRL2(1),",")
        holdInAllIndicatorSSakiMtx2(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiSSakiMtxRL3(1),",")
        holdInAllIndicatorSSakiMtx3(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)

        col = holdAllIndiDateCol+1
        For Each curkey In dic_import
            holdInAllIndicatorMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorMtx3(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSakiMtx3(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx1(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx2(holdAllIndiNameRow, col) = curkey
            holdInAllIndicatorSSakiMtx3(holdAllIndiNameRow, col) = curkey
            col = col + 1
        Next

        '出力用配列の日時入力
        tmp_indi = Split(inIndiMtxRL1(1),",")
        holdOutAllIndicatorMtx1(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiMtxRL2(1),",")
        holdOutAllIndicatorMtx2(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)
        tmp_indi = Split(inIndiMtxRL3(1),",")
        holdOutAllIndicatorMtx3(holdAllIndiNameRow+1, holdAllIndiDateCol) = tmp_indi(inIndiDateCol) + " " + tmp_indi(inIndiTimeCol)

    end if

    '使用指標数の格納
    inMtx_row = dic_import.Count
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　構成要素指標の取得
' 目的   :  出力指標のコードからその指標を構成する指標の情報を逆算する
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function SearchParentCode( _
    search_code _
 )
    Dim FunctionName :FunctionName = "SearchParaentCode"
'    Dim check_count : check_count = 0

'    for row = 0 To Ubound(inSetFullMtx,1)
'        if inSetFullMtx(row) <> "" then
'            Dim tmp_set : tmp_set = Split(inSetFullMtx(row), ",")
'            Dim codes : codes = tmp_set(inSetCodeCol)
'            Dim check : check = InStr(1,codes,search_code)
'            'search_codeがcode列に記載されているものかチェックする
'            if check > 0 then
'                if inSetFullMtx(row) <> "" then
'                    'あった場合は、さらに構成要素を掘り下げる
'                    'Name1分
'                    codes = tmp_set(inSetName1Col)
'                    Dim tmp_code : tmp_code = Split(codes, "|")
'                    For loop_code=0 To Ubound(tmp_code,1)
'                        if dic_import.Exists(tmp_code(loop_code)) then
'                        else
'                            SearchParentCode(tmp_code(loop_code))
'                        end if
'                    Next

'                    'Nmae2分
'                    codes = tmp_set(inSetName2Col)
'                    if codes <> "" and codes <> "0" then
'                        tmp_code = Split(codes, "|")
'                        For loop_code=0 To Ubound(tmp_code,1)
'                            if dic_import.Exists(tmp_code(loop_code)) then
'                            else
'                                SearchParentCode(tmp_code(loop_code))
'                            end if
'                        Next
'                    end if

'                    'Kairi分
'                    codes = tmp_set(inSetKairiCol)
'                    if codes <> "" and codes <> "0" then
'                        tmp_code = Split(codes, "|")
'                        For loop_code=0 To Ubound(tmp_code,1)
'                            if tmp_code(loop_code) <> "" and tmp_code(loop_code) <> "0" then
'                                Dim tmp_code2 : tmp_code2 = Split(tmp_code(loop_code),"_")
'                                For loop_code2=0 To Ubound(tmp_code2,1)
'                                    if dic_import.Exists(tmp_code2(loop_code2)) then
'                                    else
'                                        SearchParentCode(tmp_code2(loop_code2))
'                                    end if
'                                Next
'                            end if
'                        Next
'                    end if
'                    check_count = 1
'                    'For文を抜けて関数を抜ける
'                    Exit For
'                end if
'            end if
'        end if
'    Next
'    
    '該当なしでループを抜けたとき
'    if check_count = 0 then
        '対象のｺｰﾄﾞをdic_importに登録する
        dic_import.Add search_code, search_code
'    end if
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTrace関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTrace( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTrace

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim ore0 : ore0=0
    Dim ore1 : ore1=0
    Dim ore2 : ore2=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTracePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTracePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTracePeakValueCol)
    Dim prewidth : prewidth = hold(periodnum, setrownum, pairnum, JisseiTracePreWidthCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanPriceCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTracePeakPriceCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTracePreTenkanPriceCol)
    Dim prepeakprice : prepeakprice = hold(periodnum, setrownum, pairnum, JisseiTracePrePeakPriceCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTracePrePeakValueCol)

    Dim pnow

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

                '価格の更新
                Dim price_row: price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                pnow = tmp_price(inPricePriceCol)
            End If
        end if
    Next

'指標値の計算
    if PeriodArraySet(periodnum-1)>0 then
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

    end if

    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            prewidth = hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col)
            pretenkanprice = tenkanprice
            prepeakprice = peakprice
            prepeakvalue = peakvalue

            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
            tenkanprice = pnow
            peakprice = pnow
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime))+1

                if width <> 0 then
                    ore0 = width
                end if

                if onow1 > 0 then
                    tmp_os_dif = onow1
                else
                    tmp_os_dif = -onow1
                end if

                if onow1 > 0 then
                    tmp_price_dif = peakprice - pnow 
                else
                    tmp_price_dif =  pnow - peakprice
                end if
                '価格が進行方向と逆に返してきている場合
                if peakvalue<>0 and tmp_price_dif<>0 and peakvalue<>0 then
'                    if tmp_price_dif < 0 then
'                        ore1 = ore0 + abs(abs(onow1) / (tmp_os_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                        ore1 = ore0 + abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
'                    else
'                        ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
'                    end if
                    ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
            end if
                'エクセルに合わせるためのコメントアウト
'                if prepeakvalue<>EMPTY and peakvalue<>0 then
'                    ore2 = abs(tmp_os_dif) / (peakvalue) * width
                if peakprice-tenkanprice<>0 then
                    ore2 = abs(tmp_os_dif) / abs(peakprice-tenkanprice) * width
                end if
            end if
        '上増または下減のときピーク到達までの期間を算出
        else
            ore0 = prewidth
            'エクセルに合わせるためのコメントアウト
'            if onow1 > 0 then
'                tmp_os_dif = onow1 - prepeakvalue
'            else
'                tmp_os_dif = prepeakvalue - onow1
'            end if
            tmp_os_dif = abs(abs(prepeakvalue) - abs(onow1))

            if onow1 > 0 then
                tmp_price_dif = pnow - tenkanprice
            else
                tmp_price_dif =  tenkanprice - pnow
            end if
            '価格が進行方向と逆に返してきている場合
            if prepeakvalue<>EMPTY and prepeakvalue<>0 and tmp_price_dif<>0 and prepeakvalue<>0 then
'                if tmp_price_dif < 0 then
'                    ore1 = ore0 + abs(abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                else
'                    ore1 =abs( abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                end if
                ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
            end if
                'エクセルに合わせるためのコメントアウト
'            if prepeakvalue<>EMPTY and peakvalue<>0 then
'                ore2 = abs(tmp_os_dif) / (prepeakvalue) * prewidth
            if prepeakprice-pretenkanprice<>0 then
                ore2 = abs(tmp_os_dif) / abs(prepeakprice-pretenkanprice) * prewidth
            end if
        end if

        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if

    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceAnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, JisseiTraceOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceOre2Col) = ore2
        hold(periodnum, setrownum, pairnum, JisseiTracePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTracePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTracePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTracePreWidthCol) = prewidth
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTracePeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTracePreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTracePrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTracePrePeakValueCol) = prepeakvalue
    elseif writeflag = writeflag_off then
        ore0 = hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col)
        ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceOre1Col)
        ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceOre2Col)
    End If

    ans = ore1
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore0
                Case 2
                    value = CStr(ore1)
                Case 3
                    value = CStr(ore2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTrace2関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTrace2( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTrace2

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim ore0 : ore0=0
    Dim ore1 : ore1=0
    Dim ore2 : ore2=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTracePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTracePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTracePeakValueCol)
    Dim prewidth : prewidth = hold(periodnum, setrownum, pairnum, JisseiTracePreWidthCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTenkanPriceCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTracePeakPriceCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTracePreTenkanPriceCol)
    Dim prepeakprice : prepeakprice = hold(periodnum, setrownum, pairnum, JisseiTracePrePeakPriceCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTracePrePeakValueCol)

    Dim pnow

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

                '価格の更新
                Dim price_row: price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                pnow = GetArrayValueZero(tmp_price,inPricePriceCol)
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

    end if

    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            prewidth = hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col)
            pretenkanprice = tenkanprice
            prepeakprice = peakprice
            prepeakvalue = peakvalue

            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
            tenkanprice = pnow
            peakprice = pnow
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime))+1

                if width <> 0 then
                    ore0 = width
                end if

                if onow1 > 0 then
                    tmp_os_dif = onow1
                else
                    tmp_os_dif = -onow1
                end if

                if onow1 > 0 then
                    tmp_price_dif = peakprice - pnow 
                else
                    tmp_price_dif =  pnow - peakprice
                end if
                '価格が進行方向と逆に返してきている場合
                if peakvalue<>0 and tmp_price_dif<>0 and peakvalue<>0 then
'                    if tmp_price_dif < 0 then
'                        ore1 = ore0 + abs(abs(onow1) / (tmp_os_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                        ore1 = ore0 + abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
'                    else
'                        ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
'                    end if
                    ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * peakvalue) * abs(peakprice - tenkanprice))
                end if
                if prepeakvalue<>EMPTY and peakvalue<>0 then
                    ore2 = abs(tmp_os_dif) / (peakvalue) * width
                end if
            end if
        '上増または下減のときピーク到達までの期間を算出
        else
            ore0 = prewidth
            if onow1 > 0 then
                tmp_os_dif = onow1 - prepeakvalue
            else
                tmp_os_dif = prepeakvalue - onow1
            end if

            if onow1 > 0 then
                tmp_price_dif = pnow - tenkanprice
            else
                tmp_price_dif =  tenkanprice - pnow
            end if
            '価格が進行方向と逆に返してきている場合
            if prepeakvalue<>EMPTY and prepeakvalue<>0 and tmp_price_dif<>0 and prepeakvalue<>0 then
'                if tmp_price_dif < 0 then
'                    ore1 = ore0 + abs(abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                else
'                    ore1 =abs( abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
'                end if
                ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * prepeakvalue) * abs(prepeakprice - pretenkanprice))
            end if
            if prepeakvalue<>EMPTY and peakvalue<>0 then
                ore2 = abs(tmp_os_dif) / (prepeakvalue) * prewidth
            end if
        end if

        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if

    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceAnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, JisseiTraceOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceOre2Col) = ore2
        hold(periodnum, setrownum, pairnum, JisseiTracePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTracePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTracePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTracePreWidthCol) = prewidth
        hold(periodnum, setrownum, pairnum, JisseiTraceTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTracePeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTracePreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTracePrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTracePrePeakValueCol) = prepeakvalue
    elseif writeflag = writeflag_off then
        ore0 = hold(periodnum, setrownum, pairnum, JisseiTraceOre0Col)
        ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceOre1Col)
        ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceOre2Col)
    End If

    ans = ore1
    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore0
                Case 2
                    value = CStr(ore1)
                Case 3
                    value = CStr(ore2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceMini関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceMini( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceMini

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceMiniOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim ore0 : ore0=0
    Dim ore1 : ore1=0
    Dim ore2 : ore2=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakValueCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanPriceCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakPriceCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniValueCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniTimeCol)

    Dim pnow

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

                '価格の更新
                Dim price_row: price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                pnow = tmp_price(inPricePriceCol)
                pnow = GetArrayValueZero(tmp_price,inPricePriceCol)
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

    end if

    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            prewidth = hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre0Col)
            pretenkanprice = tenkanprice
            prepeakprice = peakprice
            prepeakvalue = peakvalue

            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
            tenkanprice = pnow
            peakprice = pnow

            minipeakdate = indi_day
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) < CDbl(minipeakvalue) then
                        minipeakdate = indi_day
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) > CDbl(minipeakvalue) then
                        minipeakdate = indi_day
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            end if
        end if
            
        '上増または下減のときピーク到達までの期間を算出
        if CDbl(onow1) * CDbl(onow1 - opre1) > 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and minipeakdate <> EMPTY _
                and minipeaktime <> EMPTY then
                width = DateDiff("n", CDate(peakdate + " " + peaktime),CDate(minipeakdate + " " + minipeaktime))+1

                if width <> 0 then
                    ore0 = width
                end if

                if onow1 > 0 then
                    tmp_os_dif = peakvalue - onow1
                else
                    tmp_os_dif = -(peakvalue - onow1)
                end if

                if onow1 > 0 then
                    tmp_price_dif = pnow - minipeakprice
                else
                    tmp_price_dif =  minipeakprice - pnow
                end if
                '価格が進行方向と逆に返してきている場合
                if peakvalue-minipeakvalue<>0 and tmp_price_dif<>0 then
                    ore1 = abs(abs(tmp_os_dif) / (tmp_price_dif * abs(peakvalue-minipeakvalue)) * abs(peakprice - minipeakprice))
                end if
                if peakvalue-minipeakvalue<>0 then
                    ore2 = abs(tmp_os_dif) / abs(peakvalue-minipeakvalue) * width
                end if
            end if
        end if

        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if

    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniAnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre2Col) = ore2
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceMiniPeakMiniValueCol) = minipeakvalue
    elseif writeflag = writeflag_off then
        ore0 = hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre0Col)
        ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre1Col)
        ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceMiniOre2Col)
    End If

    ans = ore1
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore0
                Case 2
                    value = CStr(ore1)
                Case 3
                    value = CStr(ore2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceFull関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceFull( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceFull

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_id4
    Dim indi_id5 
    Dim indi_id6
    Dim indi_id7
    Dim indi_id8
    Dim indi_id9
    Dim indi_id10
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceFullPriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakValueCol)
    
    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
'    ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        subset_flag = tmp_set(inSetSubSettingCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_id4 = tmp_indi_ids(3)
                    indi_id5 = tmp_indi_ids(4)
                    indi_id6 = tmp_indi_ids(5)
                    indi_id7 = tmp_indi_ids(6)
                    indi_id8 = tmp_indi_ids(7)
                    indi_id9 = tmp_indi_ids(8)
                    indi_id10 = tmp_indi_ids(9)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
'            pretenkandate = tenkandate
'            pretenkantime = tenkantime 
'            pretenkanprice = tenkanprice
'            pretenkanvalue = tenkanvalue
'            prepeakdate = peakdate
'            prepeaktime = peaktime
'            prepeakvalue = peakvalue
'            prepeakprice = peakprice
'            preminipeakdate = minipeakdate
'            preminipeaktime = minipeaktime
'            preminipeakprice = minipeakprice
'            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = onow1
            tenkanprice = ppre
            tenkanvalue = opre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = onow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = onow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = onow1-opre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = onow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = onow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = onow1-opre1

        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - onow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = opre1-onow1

            Owd_min = PreMiniPeakValue - PrePeakValue
            Pwd_min = PreMiniPeakPrice - PrePeakPrice
            Omv_min = peakvalue - onow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = opre1-onow1

        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - onow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = opre1-onow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - onow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - onow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = opre1-onow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = onow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = onow1-opre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = onow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = onow1-opre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr2 = Pgr2*OPratio

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr2_min = Pgr2_min*OPratio_min

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv

        OPzn = Pzn*OPratio
        if OPratio*Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if
        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min * Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceFullAnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOre1Col) = Ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOre2Col) = Ore2
        hold(periodnum, setrownum, pairnum, JisseiTraceFullPgr2Col) = Pgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOPgr2Col) = OPgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOPznCol) = OPzn
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOgr0Col) = Ogr0
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOgr2Col) = Ogr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOwdCol) = Owd
        hold(periodnum, setrownum, pairnum, JisseiTraceFullOmvCol) = Omv
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOre1Col) = Ore1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOre2Col) = Ore2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinPgr2Col) = Pgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOPgr2Col) = OPgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOPznCol) = OPzn_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOgr0Col) = Ogr0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOgr2Col) = Ogr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOwdCol) = Owd_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOmvCol) = Omv_min
    elseif writeflag = writeflag_off then
        Ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOre1Col)
        Ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOre2Col)
        Pgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFullPgr2Col)
        OPgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOPgr2Col)
        OPzn = hold(periodnum, setrownum, pairnum, JisseiTraceFullOPznCol)
        Ogr0 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOgr0Col)
        Ogr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFullOgr2Col)
        Owd = hold(periodnum, setrownum, pairnum, JisseiTraceFullOwdCol)
        Omv = hold(periodnum, setrownum, pairnum, JisseiTraceFullOmvCol)
        Ore1_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOre1Col)
        Ore2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOre2Col)
        Pgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinPgr2Col)
        OPgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOPgr2Col)
        OPzn_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOPznCol)
        Ogr0_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOgr0Col)
        Ogr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOgr2Col)
        Owd_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOwdCol)
        Omv_min = hold(periodnum, setrownum, pairnum, JisseiTraceFullMinOmvCol)
    End If

    ans = ore1

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore1
                    if subset_flag = "MINI" then
                        value = CStr(Ore1_min)
                    end if
                Case 2
                    value = CStr(ore2)
                    if subset_flag = "MINI" then
                        value = CStr(Ore2_min)
                    end if
                Case 3
                    value = CStr(pgr0)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr0_min)
                    end if
                Case 4
                    value = CStr(pgr2)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr2_min)
                    end if
                Case 5
                    value = CStr(opgr2)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr2_min)
                    end if
                Case 6
                    Dim tmp_ans
                    if Owd = 0 then
                        tmp_ans = 0 
                    else
                        tmp_ans = OPzn / Owd * 10
                    end if
                    if subset_flag = "MINI" then
                        if Owd_min = 0 then
                            tmp_ans = 0 
                        else
                            tmp_ans = OPzn_min / Owd_min * 10
                        end if
                    end if
                    value = CStr(tmp_ans)
                Case 7
                    value = CStr(ogr0)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr0_min)
                    end if
                Case 8
                    value = CStr(ogr2)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr2_min)
                    end if
                Case 9
                    value = CStr(owd - Omv + Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min + Owd_min)
                    end if
                Case 10
                    value = CStr(Owd - Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceFull3関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceFull3( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceFull3

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_id4
    Dim indi_id5 
    Dim indi_id6
    Dim indi_id7
    Dim indi_id8
    Dim indi_id9
    Dim indi_id10
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3OValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakValueCol)
    
    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
'    ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        subset_flag = tmp_set(inSetSubSettingCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_id4 = tmp_indi_ids(3)
                    indi_id5 = tmp_indi_ids(4)
                    indi_id6 = tmp_indi_ids(5)
                    indi_id7 = tmp_indi_ids(6)
                    indi_id8 = tmp_indi_ids(7)
                    indi_id9 = tmp_indi_ids(8)
                    indi_id10 = tmp_indi_ids(9)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preminipeakdate = minipeakdate
            preminipeaktime = minipeaktime
            preminipeakprice = minipeakprice
            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = onow1
            tenkanprice = ppre
            tenkanvalue = opre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = onow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                '一度下がったものが再度増となる場合（再転換とし、リセットする）
                elseif CDbl(onow1) > CDbl(opre1) and CDbl(onow1) < CDbl(peakvalue)*0.8 then
                    if daymode = 1 then
                        tenkandate = DateAdd("d", -asi, Nowdate)
                        tenkantime = indi_time
                    else
                        tenkandate = DateAdd("n", -asi, Nowdate)
                        tenkantime = DateAdd("n",-asi,indi_time)
                    end if
                    tenkanprice = ppre
                    tenkanvalue = opre1

                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakprice = pnow
                    peakvalue = onow1

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                '一度上がったものが再度減となる場合（再転換とし、リセットする）
                elseif CDbl(onow1) < CDbl(opre1) and CDbl(onow1) > CDbl(peakvalue)*0.8 then
                    if daymode = 1 then
                        tenkandate = DateAdd("d", -asi, Nowdate)
                        tenkantime = indi_time
                    else
                        tenkandate = DateAdd("n", -asi, Nowdate)
                        tenkantime = DateAdd("n",-asi,indi_time)
                    end if
                    tenkanprice = ppre
                    tenkanvalue = opre1

                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakprice = pnow
                    peakvalue = onow1

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(onow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = onow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = onow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = onow1-opre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = onow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = onow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = onow1-opre1

        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - onow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = opre1-onow1

            Owd_min = PreMiniPeakValue - PrePeakValue
            Pwd_min = PreMiniPeakPrice - PrePeakPrice
            Omv_min = peakvalue - onow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = opre1-onow1

        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - onow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = opre1-onow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - onow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - onow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = opre1-onow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = onow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = onow1-opre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = onow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = onow1-opre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr2 = Pgr2*OPratio

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr2_min = Pgr2_min*OPratio_min

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv

        OPzn = Pzn*OPratio
        if OPratio*Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if
        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min * Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3AnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3OValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3TenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3PreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ore1Col) = Ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ore2Col) = Ore2
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3Pgr2Col) = Pgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3OPgr2Col) = OPgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3OPznCol) = OPzn
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ogr0Col) = Ogr0
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ogr2Col) = Ogr2
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3OwdCol) = Owd
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3OmvCol) = Omv
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOre1Col) = Ore1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOre2Col) = Ore2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinPgr2Col) = Pgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOPgr2Col) = OPgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOPznCol) = OPzn_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOgr0Col) = Ogr0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOgr2Col) = Ogr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOwdCol) = Owd_min
        hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOmvCol) = Omv_min
    elseif writeflag = writeflag_off then
        Ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ore1Col)
        Ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ore2Col)
        Pgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3Pgr2Col)
        OPgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3OPgr2Col)
        OPzn = hold(periodnum, setrownum, pairnum, JisseiTraceFull3OPznCol)
        Ogr0 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ogr0Col)
        Ogr2 = hold(periodnum, setrownum, pairnum, JisseiTraceFull3Ogr2Col)
        Owd = hold(periodnum, setrownum, pairnum, JisseiTraceFull3OwdCol)
        Omv = hold(periodnum, setrownum, pairnum, JisseiTraceFull3OmvCol)
        Ore1_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOre1Col)
        Ore2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOre2Col)
        Pgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinPgr2Col)
        OPgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOPgr2Col)
        OPzn_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOPznCol)
        Ogr0_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOgr0Col)
        Ogr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOgr2Col)
        Owd_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOwdCol)
        Omv_min = hold(periodnum, setrownum, pairnum, JisseiTraceFull3MinOmvCol)
    End If

    ans = ore1

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore1
                    if subset_flag = "MINI" then
                        value = CStr(Ore1_min)
                    end if
                Case 2
                    value = CStr(ore2)
                    if subset_flag = "MINI" then
                        value = CStr(Ore2_min)
                    end if
                Case 3
                    value = CStr(pgr0)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr0_min)
                    end if
                Case 4
                    value = CStr(pgr2)
                if subset_flag = "MINI" then
                    value = CStr(Pgr2_min)
                end if
                Case 5
                    value = CStr(opgr2)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr2_min)
                    end if
                Case 6
                    Dim tmp_ans
                    if Owd = 0 then
                        tmp_ans = 0 
                    else
                        tmp_ans = OPzn / Owd * 10
                    end if
                    if subset_flag = "MINI" then
                        if Owd_min = 0 then
                            tmp_ans = 0 
                        else
                            tmp_ans = OPzn_min / Owd_min * 10
                        end if
                    end if
                    value = CStr(tmp_ans)
                Case 7
                    value = CStr(ogr0)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr0_min)
                    end if
                Case 8
                    value = CStr(ogr2)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr2_min)
                    end if
                Case 9
                    value = CStr(owd - Omv + Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min + Owd_min)
                    end if
                Case 10
                    value = CStr(Owd - Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　JisseiTraceFull5Abs関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceFull5Abs( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceFull5Abs

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim OPgr2 : OPgr2 = 0
    Dim Bnow : Bnow = 0
    Dim Ogr : Ogr = 0

    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)

    Dim name1 : name1 = tmp_set(inSetName1Col)
    Dim name2 : name2 = tmp_set(inSetName2Col)
    Dim tmp_names : tmp_names = Split(name2,"|")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                Ogr = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf tmp_names(0) = tmp_indi(inIndiIDCol) Then
                OPgr2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                Bnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        Dim Leftvalue
        
        if Ogr = 0 then
            Leftvalue = 0
        else
            Leftvalue = (Abs(OPgr2/Ogr)-1)*Bnow
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceFull5AbsAnsCol) = Leftvalue
    elseif writeflag = writeflag_off then
        Leftvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull5AbsAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = Leftvalue
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = Leftvalue
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceFull5関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceFull5( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceFull5

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim OPgr2 : OPgr2 = 0
    Dim Bnow : Bnow = 0
    Dim Ogr : Ogr = 0

    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)

    Dim name1 : name1 = tmp_set(inSetName1Col)
    Dim name2 : name2 = tmp_set(inSetName2Col)
    Dim tmp_names : tmp_names = Split(name2,"|")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                Ogr = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf tmp_names(0) = tmp_indi(inIndiIDCol) Then
                OPgr2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                Bnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        Dim Leftvalue
        
        if Ogr = 0 then
            Leftvalue = 0
        else
            Leftvalue = (OPgr2/Ogr-1)*Bnow
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceFull5AnsCol) = Leftvalue
    elseif writeflag = writeflag_off then
        Leftvalue = hold(periodnum, setrownum, pairnum, JisseiTraceFull5AnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = Leftvalue
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = Leftvalue
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceSabun関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceSabun( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceSabun

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOValue2Col)
    Dim cnow1 : cnow1 = 0
    Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunCValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakValueCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_id = tmp_set(inSetCodeCol)
                dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    if name2 <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if
    '各計算
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
'            pretenkandate = tenkandate
'            pretenkantime = tenkantime 
'            pretenkanprice = tenkanprice
'            pretenkanvalue = tenkanvalue
'            prepeakdate = peakdate
'            prepeaktime = peaktime
'            prepeakvalue = peakvalue
'            prepeakprice = peakprice
'            preminipeakdate = minipeakdate
'            preminipeaktime = minipeaktime
'            preminipeakprice = minipeakprice
'            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = cnow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = cnow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = cnow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - cnow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            Owd_min = preminipeakvalue - prepeakvalue
            Pwd_min = preminipeakprice - prepeakprice
            Omv_min = peakvalue - cnow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - cnow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - cnow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - cnow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = cnow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = cnow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr2 = CDbl(Pgr2)*CDbl(OPratio)

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr2_min = CDbl(Pgr2_min)*CDbl(OPratio_min)

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv

        OPzn = Pzn*OPratio

        if OPratio * Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if


'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '下増のとき
'        else
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        end if

        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min * Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if OPratio_min * Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '下増のとき
'        else
'            if OPratio_min * Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(cnow1-cpre1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1-cpre1)<0 then
            tenkandirect = 2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunAnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunCValueCol) = cnow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOre1Col) = Ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOre2Col) = Ore2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunPgr2Col) = Pgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOPgr2Col) = OPgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOPznCol) = OPzn
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOgr0Col) = Ogr0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOgr2Col) = Ogr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOwdCol) = Owd
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunOmvCol) = Omv
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOre1Col) = Ore1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOre2Col) = Ore2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinPgr2Col) = Pgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOPgr2Col) = OPgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOPznCol) = OPzn_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOgr0Col) = Ogr0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOgr2Col) = Ogr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOwdCol) = Owd_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOmvCol) = Omv_min
    elseif writeflag = writeflag_off then
        Ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOre1Col)
        Ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOre2Col)
        Pgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunPgr2Col)
        OPgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOPgr2Col)
        OPzn = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOPznCol)
        Ogr0 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOgr0Col)
        Ogr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOgr2Col)
        Owd = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOwdCol)
        Omv = hold(periodnum, setrownum, pairnum, JisseiTraceSabunOmvCol)
        Ore1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOre1Col)
        Ore2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOre2Col)
        Pgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinPgr2Col)
        OPgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOPgr2Col)
        OPzn_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOPznCol)
        Ogr0_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOgr0Col)
        Ogr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOgr2Col)
        Owd_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOwdCol)
        Omv_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabunMinOmvCol)
    End If

    ans = ore1

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore1
                    if subset_flag = "MINI" then
                        value = CStr(Ore1_min)
                    end if
                Case 2
                    value = CStr(ore2)
                    if subset_flag = "MINI" then
                        value = CStr(Ore2_min)
                    end if
                Case 3
                    value = CStr(pgr0)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr0_min)
                    end if
                Case 4
                    value = CStr(pgr2)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr2_min)
                    end if
                Case 5
                    value = CStr(opgr2)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr2_min)
                    end if
                Case 6
                    Dim tmp_ans
                    if Owd = 0 then
                        tmp_ans = 0 
                    else
                        tmp_ans = OPzn / Owd * 10
                    end if
                    if subset_flag = "MINI" then
                        if Owd_min = 0 then
                            tmp_ans = 0 
                        else
                            tmp_ans = OPzn_min / Owd_min * 10
                        end if
                    end if
                    value = CStr(tmp_ans)
                Case 7
                    value = CStr(ogr0)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr0_min)
                    end if
                Case 8
                    value = CStr(ogr2)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr2_min)
                    end if
                Case 9
                    value = CStr(owd - Omv + Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min + Owd_min)
                    end if
                Case 10
                    value = CStr(Owd - Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min)
                    end if
                Case 11
                    value = CStr(Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min)
                    end if
                Case 12
                    value = CStr(Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Omv_min)
                    end if
                Case 13
                    value = CStr(OPzn)
                    if subset_flag = "MINI" then
                        value = CStr(OPzn_min)
                    end if
                Case 14
                    value = CStr(Ore0)
                    if subset_flag = "MINI" then
                        value = CStr(Ore0_min)
                    end if
                Case 15
                    if peakvalue="" then
                        peakvalue = 0
                    end if
                    value = CStr(peakvalue)
                    if subset_flag = "MINI" then
                        value = CStr(peakvalue)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceSabun3関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceSabun3( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceSabun3

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OValue2Col)
    Dim cnow1 : cnow1 = 0
    Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3CValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakValueCol)

    if tenkanvalue = "" then
        tenkanvalue = 0
    end if
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    if name2 <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preminipeakdate = minipeakdate
            preminipeaktime = minipeaktime
            preminipeakprice = minipeakprice
            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1
            if tenkanvalue = "" then
                tenkanvalue = 0
            end if

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    if CDbl(pnow) > CDbl(peakprice) then
                        peakprice = pnow
                    end if

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakvalue = cnow1
                    if CDbl(pnow) > CDbl(minipeakprice) then
                        minipeakprice = pnow
                    end if
                '一度下がったものが再度増となる場合（再転換とし、リセットする）
                elseif CDbl(cnow1) > CDbl(cpre1) and CDbl(cnow1) < CDbl(peakvalue)*0.8 then
                    if daymode = 1 then
                        tenkandate = DateAdd("d", -asi, Nowdate)
                        tenkantime = indi_time
                    else
                        tenkandate = DateAdd("n", -asi, Nowdate)
                        tenkantime = DateAdd("n",-asi,indi_time)
                    end if
                    tenkanprice = ppre
                    tenkanvalue = opre1

                    peakdate = Nowdate
                    peaktime = indi_time
                    peakprice = pnow
                    peakvalue = onow1

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakvalue = cnow1
                        if CDbl(pnow) > CDbl(minipeakprice) then
                            minipeakprice = pnow
                        end if
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    if CDbl(pnow) < CDbl(peakprice) then 
                        peakprice = pnow
                    end if

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakvalue = cnow1
                    if CDbl(pnow) < CDbl(minipeakprice) then 
                        minipeakprice = pnow
                    end if
                '一度上がったものが再度減となる場合（再転換とし、リセットする）
                elseif CDbl(cnow1) < CDbl(cpre1) and CDbl(cnow1) > CDbl(peakvalue)*0.8 then
                    if daymode = 1 then
                        tenkandate = DateAdd("d", -asi, Nowdate)
                        tenkantime = indi_time
                    else
                        tenkandate = DateAdd("n", -asi, Nowdate)
                        tenkantime = DateAdd("n",-asi,indi_time)
                    end if
                    tenkanprice = ppre
                    tenkanvalue = opre1

                    peakdate = Nowdate
                    peaktime = indi_time
                    peakprice = pnow
                    peakvalue = onow1

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = onow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakvalue = cnow1
                        if CDbl(pnow) < CDbl(minipeakprice) then 
                            minipeakprice = pnow
                        end if
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr1 : OPgr1 = 0 '価格起因の平均成長率
        Dim OPgr1_min : OPgr1_min = 0 '価格起因の平均成長率
        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            Owd = pretenkanvalue-prepeakvalue
'            Pwd = pretenkanprice-prepeakprice
            Owd = tenkanvalue - prepeakvalue
            Pwd = tenkanprice - prepeakprice
            Omv = cnow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(prepeakdate), CDate(tenkandate)) / asi2
'            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = cnow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = cnow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - cnow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            Owd_min = preminipeakvalue - prepeakvalue
            Pwd_min = preminipeakprice - prepeakprice
            Omv_min = peakvalue - cnow1
            Pmv_min = peakprice - pnow
            Ore0_min = Abs(DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2)
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            Owd = prepeakvalue-pretenkanvalue
'            Pwd = prepeakprice-pretenkanprice
            Owd = prepeakvalue-tenkanvalue
            Pwd = prepeakprice-tenkanprice
            Omv = tenkanvalue - cnow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(prepeakdate), CDate(tenkandate)) / asi2
'            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - cnow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - cnow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = cnow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = cnow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = Abs(DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2)
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1
        end if

        Pwd = Abs(Pwd)
        Pwd_min = Abs(Pwd_min)
        Ore0 = Abs(Ore0)
        Ore0_min = Abs(Ore0_min)

        if Ore0 = 0 then
            Ore0 = 1
        elseif Ore0 < 0 then
            Ore0 = abs(ore0)
        end if
        if Bnow = 0 then
            Bnow = 1
        elseif Bnow < 0 then
            Bnow = abs(Bnow)
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        elseif ore0_min < 0 then
            Ore0_min = abs(Ore0_min)
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        elseif bnow_min < 0 then
            Bnow_min = abs(Bnow_min)
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr1 = CDbl(Pgr1)*CDbl(OPratio)
        OPgr2 = CDbl(Pgr2)*CDbl(OPratio)

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr1_min = CDbl(Pgr1_min)*CDbl(OPratio_min)
        OPgr2_min = CDbl(Pgr2_min)*CDbl(OPratio_min)

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv

        OPzn = Pzn*OPratio

        if OPratio * Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if


'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '下増のとき
'        else
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        end if

        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min*Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '下増のとき
'        else
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        end if
        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(cnow1-cpre1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1-cpre1)<0 then
            tenkandirect = 2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3AnsCol) = 0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3CValueCol) = cnow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ore1Col) = Ore1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ore2Col) = Ore2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Pgr2Col) = Pgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPgr1Col) = OPgr1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPgr2Col) = OPgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPznCol) = OPzn
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ogr0Col) = Ogr0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ogr2Col) = Ogr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OwdCol) = Owd
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OmvCol) = Omv
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOre1Col) = Ore1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOre2Col) = Ore2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinPgr2Col) = Pgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPgr1Col) = OPgr1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPgr2Col) = OPgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPznCol) = OPzn_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOgr0Col) = Ogr0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOgr2Col) = Ogr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOwdCol) = Owd_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOmvCol) = Omv_min
    elseif writeflag = writeflag_off then
        cnow1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3CValueCol)
        Ore1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ore1Col)
        Ore2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ore2Col)
        Pgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Pgr2Col)
        OPgr1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPgr1Col)
        OPgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPgr2Col)
        OPzn = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OPznCol)
        Ogr0 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ogr0Col)
        Ogr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3Ogr2Col)
        Owd = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OwdCol)
        Omv = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3OmvCol)
        Ore1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOre1Col)
        Ore2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOre2Col)
        Pgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinPgr2Col)
        OPgr1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPgr1Col)
        OPgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPgr2Col)
        OPzn_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOPznCol)
        Ogr0_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOgr0Col)
        Ogr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOgr2Col)
        Owd_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOwdCol)
        Omv_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3MinOmvCol)
        tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanDateCol)
        tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanTimeCol)
        tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanValueCol)
        tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3TenkanPriceCol)
        peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakDateCol)
        peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakTimeCol)
        peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakValueCol)
        peakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun3PeakPriceCol)
    End If

    ans = ore1

    end if    


    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ore1
                    if subset_flag = "MINI" then
                        value = CStr(Ore1_min)
                    end if

'        value = CStr(onow1)
'        value = value + "|" + CStr(onow2)
'        value = value + "|" + CStr(Standard)
'        value = value + "|" + CStr(Pwd)
'        value = value + "|" + CStr(Pmv)
'        value = value + "|" + CStr(Ore0)
'        value = value + "|" + CStr(Bnow)
'        value = value + "|" + CStr(Pwd_min)
'        value = value + "|" + CStr(Pmv_min)
'        value = value + "|" + CStr(Ore0_min)
'        value = value + "|" + CStr(Bnow_min)
'        value = value + "|" + CStr(PwdBlock)
'        value = value + "|" + CStr(Ore0Block)
'        value = value + "|" + CStr(BlockForecast)
'        value = value + "|" + CStr(BlockNow)
'        value = value + "|" + CStr(BlockNumber)
'        value = value + "|" + CStr(UpperRange)
'        value = value + "|" + CStr(LowerRange)
'        value = value + "|" + CStr(GoalPrice)
'        value = value + "|" + CStr(GoalBar)
'        value = value + "|" + CStr(BlockBar)
'        value = value + "|" + CStr(PwdBlock_min)
'        value = value + "|" + CStr(Ore0Block_min)
'        value = value + "|" + CStr(BlockForecast_min)
'        value = value + "|" + CStr(BlockNow_min)
'        value = value + "|" + CStr(BlockNumber_min)
'        value = value + "|" + CStr(UpperRange_min)
'        value = value + "|" + CStr(LowerRange_min)
'        value = value + "|" + CStr(GoalPrice_min)
'        value = value + "|" + CStr(GoalBar_min)
'        value = value + "|" + CStr(tenkandate)
'        value = value + "|" + CStr(tenkantime)
'        value = value + "|" + CStr(tenkanprice)
'        value = value + "|" + CStr(tenkanvalue)
'        value = value + "|" + CStr(peakdate)
'        value = value + "|" + CStr(peaktime)
'        value = value + "|" + CStr(peakvalue)
'        value = value + "|" + CStr(peakprice)
'        value = value + "|" + CStr(minipeakdate)
'        value = value + "|" + CStr(minipeaktime)
'        value = value + "|" + CStr(minipeakprice)
'        value = value + "|" + CStr(minipeakvalue)
'        value = value + "|" + CStr(pretenkandate)
'        value = value + "|" + CStr(pretenkantime)
'        value = value + "|" + CStr(pretenkanprice)
'        value = value + "|" + CStr(pretenkanvalue)
'        value = value + "|" + CStr(prepeakdate)
'        value = value + "|" + CStr(prepeaktime)
'        value = value + "|" + CStr(prepeakvalue)
'        value = value + "|" + CStr(prepeakprice)
'        value = value + "|" + CStr(preminipeakdate)
'        value = value + "|" + CStr(preminipeaktime)
'        value = value + "|" + CStr(preminipeakprice)
'        value = value + "|" + CStr(preminipeakvalue)
'        value = value + "|" + CStr(tenkandate00)
'        value = value + "|" + CStr(tenkantime00)
'        value = value + "|" + CStr(tenkanvalue00)
'        value = value + "|" + CStr(peakdate00)
'        value = value + "|" + CStr(peaktime00)
'        value = value + "|" + CStr(peakvalue00)
'        value = value + "|" + CStr(pretenkandate00)
'        value = value + "|" + CStr(pretenkantime00)
'        value = value + "|" + CStr(pretenkanvalue00)
'        value = value + "|" + CStr(prepeakdate00)
'        value = value + "|" + CStr(prepeaktime00)
'        value = value + "|" + CStr(prepeakvalue00)
'        value = value + "|" + CStr(Ore00)
'        value = value + "|" + CStr(DirectionAns)
'        value = value + "|" + CStr(NamasiAns)
'        value = value + "|" + CStr(DirectionAns0)
'        value = value + "|" + CStr("END")

'        Dim check_str : check_str = ""
''        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(Ore1)
'        check_str = check_str +"|" + CStr(Ore2)
'        check_str = check_str +"|" + CStr(Pgr2)
'        check_str = check_str +"|" + CStr(Owd)
'        check_str = check_str +"|" + CStr(Omv)
'        check_str = check_str +"|" + CStr(peakdate)
'        check_str = check_str +"|" + CStr(peakvalue)
'        check_str = check_str +"|" + CStr(peakprice)
'        check_str = check_str +"|" + CStr(tenkandate)
'        check_str = check_str +"|" + CStr(tenkanvalue)
'        check_str = check_str +"|" + CStr(tenkanprice)
'        check_str = check_str +"|" + CStr(onow1)
'        check_str = check_str +"|" + CStr(onow2)
'        check_str = check_str +"|" + CStr(cnow1)
'        check_str = check_str +"|" + CStr(pnow)
'        check_str = check_str +"|" + CStr(Ozn)
'        check_str = check_str +"|" + CStr(Bnow)
'        check_str = check_str +"|" + CStr(OPratio)
'        check_str = check_str +"|" + CStr(Ogr1)
'        check_str = check_str +"|" + CStr(Pmv)
'        value = check_str

                Case 2
                    value = CStr(ore2)
                    if subset_flag = "MINI" then
                        value = CStr(Ore2_min)
                    end if
                Case 3
                    value = CStr(pgr0)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr0_min)
                    end if
                Case 4
                    value = CStr(pgr2)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr2_min)
                    end if
                Case 5
                    value = CStr(opgr2)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr2_min)
                    end if
                Case 6
                    Dim tmp_ans
                    if Owd = 0 then
                        tmp_ans = 0 
                    else
                        tmp_ans = OPzn / Owd * 10
                    end if
                    if subset_flag = "MINI" then
                        if Owd_min = 0 then
                            tmp_ans = 0 
                        else
                            tmp_ans = OPzn_min / Owd_min * 10
                        end if
                    end if
                    value = CStr(tmp_ans)
                Case 7
                    value = CStr(ogr0)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr0_min)
                    end if
                Case 8
                    value = CStr(ogr2)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr2_min)
                    end if
                Case 9
                    value = CStr(owd - Omv + Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min + Owd_min)
                    end if
                Case 10
                    value = CStr(Owd - Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min - Omv_min)
                    end if
                Case 11
                    value = CStr(Owd)
                    if subset_flag = "MINI" then
                        value = CStr(Owd_min)
                    end if
                Case 12
                    value = CStr(Omv)
                    if subset_flag = "MINI" then
                        value = CStr(Omv_min)
                    end if
                Case 13
                    value = CStr(OPzn)
                    if subset_flag = "MINI" then
                        value = CStr(OPzn_min)
                    end if
                Case 14
                    value = CStr(Ore0)
                    if subset_flag = "MINI" then
                        value = CStr(Ore0_min)
                    end if
                Case 15
                    value = CStr(Ogr1)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr1_min)
                    end if
                Case 16
                    value = CStr(OPgr1)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr1_min)
                    end if
                Case 17
                    if peakvalue = "" then
                        peakvalue = 0
                    end if
                    value = CStr(peakvalue)
                    if subset_flag = "MINI" then
                        value = CStr(peakvalue)
                    end if
                Case 18
                    value = CStr(Pwd)
                    if subset_flag = "MINI" then
                        value = CStr(Pwd_min)
                    end if
                Case 19
                    value = CStr(Pmv)
                    if subset_flag = "MINI" then
                        value = CStr(Pmv_min)
                    end if
                Case 20
                    value = CStr(Bnow)
                    if subset_flag = "MINI" then
                        value = CStr(Bnow_min)
                    end if
                Case 21
                    if peakprice="" then
                        peakprice = 0
                    end if
                    value = CStr(peakprice)
                    if subset_flag = "MINI" then
                        value = CStr(peakprice)
                    end if
                Case 22
                    if tenkanprice="" then
                        tenkanprice = 0
                    end if
                    value = CStr(tenkanprice)
                    if subset_flag = "MINI" then
                        value = CStr(tenkanprice)
                    end if
                Case 23
                    value = CStr(cnow1)
                    if subset_flag = "MINI" then
                        value = CStr(cnow1)
                    end if
                Case 24
                    value = CStr(tenkanvalue)
                    if subset_flag = "MINI" then
                        value = CStr(tenkanvalue)
                    end if
                Case 25
                    value = CStr(tenkandate)
                    if subset_flag = "MINI" then
                        value = CStr(tenkandate)
                    end if
                Case 26
                    value = CStr(peakdate)
                    if subset_flag = "MINI" then
                        value = CStr(peakdate)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceSabun5関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceSabun5( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceSabun5

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_id3
    Dim indi_id4 
    Dim indi_id5 
    Dim indi_id6 
    Dim indi_id7 
    Dim indi_id8 
    Dim indi_id9 
    Dim indi_id10 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OValue2Col)
    Dim cnow1 : cnow1 = 0
    Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5CValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakValueCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_id4 = tmp_indi_ids(3)
                    indi_id5 = tmp_indi_ids(4)
                    indi_id6 = tmp_indi_ids(5)
                    indi_id7 = tmp_indi_ids(6)
                    indi_id8 = tmp_indi_ids(7)
                    indi_id9 = tmp_indi_ids(8)
                    indi_id10 = tmp_indi_ids(9)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

        if name2 <> "" then
            dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe2, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
            onow2 = holdhe2(periodnum, setrownum, pairnum, HeikenOpenCol)
        end if
    end if

    if name2 <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preminipeakdate = minipeakdate
            preminipeaktime = minipeaktime
            preminipeakprice = minipeakprice
            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr1 : OPgr1 = 0 '価格起因の平均成長率
        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr1_min : OPgr1_min = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        Dim Left0 : Left0 = 0 '転換発生までの残数（Os平均）
        Dim Left1 : Left1 = 0 '転換発生までの残数（Os直近）
        Dim Left2 : Left2 = 0 '転換発生までの残数（Os直近平均）
        Dim Left0_min : Left0_min = 0 '転換発生までの残数
        Dim Left1_min : Left1_min = 0 '転換発生までの残数
        Dim Left2_min : Left2_min = 0 '転換発生までの残数

        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = cnow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = cnow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = cnow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - cnow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            Owd_min = preminipeakvalue - prepeakvalue
            Pwd_min = preminipeakprice - prepeakprice
            Omv_min = peakvalue - cnow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - cnow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - cnow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - cnow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = cnow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = cnow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Abs(Owd/Pwd)
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Abs(Owd_min / Pwd_min)
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr1 = CDbl(Pgr1)*CDbl(OPratio)
        OPgr2 = CDbl(Pgr2)*CDbl(OPratio)

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr1_min = CDbl(Pgr1_min)*CDbl(OPratio_min)
        OPgr2_min = CDbl(Pgr2_min)*CDbl(OPratio_min)

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv

        OPzn = Pzn*OPratio

        if OPratio * Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if


'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '下増のとき
'        else
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        end if

        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        if Ogr0 = 0 then
            Left0 = 0
        else
            Left0 = (OPgr2/Ogr0 - 1) * Bnow
        end if
        if Ogr1 = 0 then
            Left1 = 0
        else
            Left1 = (OPgr2/Ogr1 - 1) * Bnow
        end if
        if Ogr2 = 0 then
            Left2 = 0
        else
            Left2 = (OPgr2/Ogr2 - 1) * Bnow
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min*Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '下増のとき
'        else
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if

        if Ogr0_min = 0 then
            Left0_min = 0
        else
            Left0_min = (OPgr2_min/Ogr0_min - 1) * Bnow_min
        end if
        if Ogr1_min = 0 then
            Left1_min = 0
        else
            Left1_min = (OPgr2_min/Ogr1_min - 1) * Bnow_min
        end if
        if Ogr2_min = 0 then
            Left2_min = 0
        else
            Left2_min = (OPgr2_min/Ogr2_min - 1) * Bnow_min
        end if


        'Osの進行方向
        if CDbl(cnow1-cpre1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1-cpre1)<0 then
            tenkandirect = 2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5AnsCol) = answer1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ans2Col) = answer2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5CValueCol) = cnow1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5TenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5PreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr0Col) = Ogr0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr1Col) = Ogr1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr2Col) = Ogr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OPgr1Col) = OPgr1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OPgr2Col) = OPgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Pgr1Col) = Pgr1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Pgr2Col) = Pgr2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left0Col) = Left0
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left1Col) = Left1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left2Col) = Left2
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr0Col) = Ogr0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr1Col) = Ogr1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr2Col) = Ogr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOPgr1Col) = OPgr1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOPgr2Col) = OPgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinPgr1Col) = Pgr1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinPgr2Col) = Pgr2_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft0Col) = Left0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft1Col) = Left1_min
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft2Col) = Left2_min
    elseif writeflag = writeflag_off then
        Ogr0 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr0Col)
        Ogr1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr1Col)
        Ogr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ogr2Col)
        OPgr1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OPgr1Col)
        OPgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5OPgr2Col)
        Pgr1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Pgr1Col)
        Pgr2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Pgr2Col)
        Left0 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left0Col)
        Left1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left1Col)
        Left2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Left2Col)
        Ogr0_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr0Col)
        Ogr1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr1Col)
        Ogr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOgr2Col)
        OPgr1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOPgr1Col)
        OPgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinOPgr2Col)
        Pgr1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinPgr1Col)
        Pgr2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinPgr2Col)
        Left0_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft0Col)
        Left1_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft1Col)
        Left2_min = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5MinLeft2Col)
        answer1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5AnsCol)
        answer2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun5Ans2Col)
    End If

    ans = ore1

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = Ogr0
                    if subset_flag = "MINI" then
                        value = CStr(Ogr0_min)
                    end if
                Case 2
                    value = CStr(Ogr1)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr1_min)
                    end if
                Case 3
                    value = CStr(Ogr2)
                    if subset_flag = "MINI" then
                        value = CStr(Ogr2_min)
                    end if
                Case 4
                    value = CStr(OPgr1)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr1_min)
                    end if
                Case 5
                    value = CStr(OPgr2)
                    if subset_flag = "MINI" then
                        value = CStr(OPgr2_min)
                    end if
                Case 6
                    value = CStr(Pgr1)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr1_min)
                    end if
                Case 7
                    value = CStr(Pgr2)
                    if subset_flag = "MINI" then
                        value = CStr(Pgr2_min)
                    end if
                Case 8
                    value = CStr(Left0)
                    if subset_flag = "MINI" then
                        value = CStr(Left0_min)
                    end if
                Case 9
                    value = CStr(Left1)
                    if subset_flag = "MINI" then
                        value = CStr(Left1_min)
                    end if
                Case 10
                    value = CStr(Left2)
                    if subset_flag = "MINI" then
                        value = CStr(Left2_min)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceSabun4関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceSabun4( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceSabun4

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim peakvalue : peakvalue = 0
    Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
    Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値

    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 
    DIm tmp_name2 : tmp_name2 = Split(name2, "|")

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if

            elseIf tmp_name2(0) = tmp_indi(inIndiIDCol) Then
                Ore1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_name2(1) = tmp_indi(inIndiIDCol) Then
                Ore2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_name2(2) = tmp_indi(inIndiIDCol) Then
                peakvalue = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
        if Ore2 = 10000 or Ore2 = 0 then
            answer1 = 0
            answer2 = 0
        else
            answer1 = (1 - CDbl(Ore1) / CDbl(Ore2)) * CDbl(peakvalue)
            answer2 = (CDbl(Ore1) / CDbl(Ore2)) * CDbl(peakvalue)
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if onow1 * peakvalue < 0 then
            answer1 = - answer1
            answer2 = - answer2
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun4AnsCol) = answer1
        hold(periodnum, setrownum, pairnum, JisseiTraceSabun4Ans2Col) = answer2
    elseif writeflag = writeflag_off then
        answer1 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun4AnsCol)
        answer2 = hold(periodnum, setrownum, pairnum, JisseiTraceSabun4Ans2Col)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = answer1
                Case 2
                    value = answer2
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　NamasiFullBlockNamasi関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionNamasiFullBlockNamasi( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionNamasiFullBlockNamasi

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim Ore0Block : Ore0Block = 0
    Dim BlockBar : BlockBar = 0
    Dim NamasiAns : NamasiAns = hold(periodnum, setrownum, pairnum, NamasiFullBlockNamasiNamasiCol)
    if NamasiAns = "" or NamasiAns = NULL then
        NamasiAns = 0
    end if
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                Ore0Block = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf name2 = tmp_indi(inIndiIDCol) Then
                BlockBar = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if blockbar = "" then
                    BlockBar = 0
                end if
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        'なまし有無
        if Ore0Block > 1 then
            if BlockBar > Ore0Block then
                NamasiAns = 1
            else
                NamasiAns = -1
            end if
        else
            if BlockBar > 1 then
                NamasiAns = 1
            else
                NamasiAns = -1
            end if
        end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, NamasiFullBlockNamasiNamasiCol) = NamasiAns

    elseif writeflag = writeflag_off then
        NamasiAns = hold(periodnum, setrownum, pairnum, NamasiFullBlockNamasiNamasiCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(NamasiAns)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　NamasiFullBlockDirection関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionNamasiFullBlockDirection( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionNamasiFullBlockDirection

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim BlockPre : BlockPre = Int(hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNowCol))
    Dim BlockNumberPre : BlockNumberPre = Int(hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNumberCol))
    Dim BlockNow : BlockNow = 0
    Dim BlockNumber : BlockNumber = 0
    Dim DirectionAns0 : DirectionAns0 = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionAnsCol)
    Dim DirectionAns : DirectionAns = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionDirectionCol)
    if DirectionAns = "" or DirectionAns = NULL then
        DirectionAns = 0
    end if
    if DirectionAns0 = "" or DirectionAns0 = NULL then
        DirectionAns0 = 0
    end if
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                BlockNow = Int(GetArrayValueZero(tmp_indi,inIndiPriceCol))
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf name2 = tmp_indi(inIndiIDCol) Then
                BlockNumber = Int(GetArrayValueZero(tmp_indi,inIndiPriceCol))
                if BlockNumber = "" then
                    BlockNumber = 0
                end if
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '各計算

        '方向性
        if BlockNow > BlockPre then
            DirectionAns0 = 1
        elseif BlockNow < BlockPre then
            DirectionAns0 = -1
        end if
        '区間遷移している場合は、ブロック番号のリセットがかかるため、方向性は前回の方向を引き継ぐ
        if BlockNumber <> BlockNumberPre then
            DirectionAns = DirectionAns
        else
            if BlockNumber = 1 or BlockNumber = 4 then
                DirectionAns = DirectionAns0
            else
                if DirectionAns0 = 1 then
                    DirectionAns = -1
                else
                    DirectionAns = 1
                end if
            end if
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionAnsCol) = DirectionAns0
        hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNowCol) = BlockNow
        hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNumberCol) = BlockNumber
        hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionDirectionCol) = DirectionAns

    elseif writeflag = writeflag_off then
        BlockNow = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNowCol)
        BlockNumber = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionBlockNumberCol)
        DirectionAns0 = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionAnsCol)
        DirectionAns = hold(periodnum, setrownum, pairnum, NamasiFullBlockDirectionDirectionCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(DirectionAns)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　NamasiFullBlockBar関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionNamasiFullBlockBar( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionNamasiFullBlockBar

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarOValueCol)
    Dim BlockPre : BlockPre = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNowCol)
    Dim BlockBar : BlockBar = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockBarCol)
    Dim BlockNumberPre : BlockNumberPre = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNumberCol)
    Dim PwdBlock : PwdBlock = 0
    Dim BlockNow : BlockNow = 0
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 
    Dim tmp_name2 : tmp_name2 = Split(name2,"|")

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
            if tmp_name2(0) = tmp_indi(inIndiIDCol) Then
                PwdBlock = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseif tmp_name2(1) = tmp_indi(inIndiIDCol) Then
                BlockNow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '各計算
     '---本体の計算---
        '転換している場合、値を更新する

        Dim BlockNumber : BlockNumber = 0

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            BlockNumber = 1
            if BlockNow <> BlockPre or BlockNumber <> BlockNumberPre then
                BlockBar = 1
            else
                BlockBar = BlockBar + 1
            end if
        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            BlockNumber = 2
            if BlockNow <> BlockPre or BlockNumber <> BlockNumberPre then
                BlockBar = 1
            else
                BlockBar = BlockBar + 1
            end if
        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            BlockNumber = 3
            if BlockNow <> BlockPre or BlockNumber <> BlockNumberPre then
                BlockBar = 1
            else
                BlockBar = BlockBar + 1
            end if
        '下増のとき
        else
            BlockNumber = 4
            if BlockNow <> BlockPre or BlockNumber <> BlockNumberPre then
                BlockBar = 1
            else
                BlockBar = BlockBar + 1
            end if
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, NamasiFullBlockBarOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, NamasiFullBlockBarOValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNowCol) = BlockNow
        hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNumberCol) = BlockNumber
        hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockBarCol) = BlockBar

    elseif writeflag = writeflag_off then
        BlockNow = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNowCol)
        BlockNumber = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockNumberCol)
        BlockBar = hold(periodnum, setrownum, pairnum, NamasiFullBlockBarBlockBarCol)

    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    if BlockBar = "" then
                        BlockBar = 0
                    end if
                    value = CStr(BlockBar)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　NamasiFullPrices関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionNamasiFullPrices( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionNamasiFullPrices

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, NamasiFullPricesOValueCol)
    Dim tenkanprice : tenkanprice = 0
    Dim peakprice : peakprice = 0
    Dim Bnow : Bnow = 0
    Dim PwdBlock : PwdBlock = 0
    Dim Ore0Block : Ore0Block = 0
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 
    Dim tmp_name2 : tmp_name2 = Split(name2,"|")

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            end if
            
            if tmp_name2(0) = tmp_indi(inIndiIDCol) Then
                tenkanprice = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tenkanprice = "" then
                    tenkanprice = 0
                end if
            elseif tmp_name2(1) = tmp_indi(inIndiIDCol) Then
                peakprice = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if peakprice = "" then
                    peakprice = 0
                end if
            elseif tmp_name2(2) = tmp_indi(inIndiIDCol) Then
                Bnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseif tmp_name2(3) = tmp_indi(inIndiIDCol) Then
                PwdBlock = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseif tmp_name2(4) = tmp_indi(inIndiIDCol) Then
                Ore0Block = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '各計算
     '---本体の計算---

        Dim UpperRange: UpperRange = 0
        Dim LowerRange: LowerRange = 0
        Dim GoalPrice: GoalPrice = 0

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            UpperRange = tenkanprice + PwdBlock*Int(Bnow/Ore0Block+1)
            LowerRange = tenkanprice + PwdBlock*Int(Bnow/Ore0Block)
            GoalPrice = tenkanprice + Pwd
        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            UpperRange = peakprice - PwdBlock*Int(Bnow/Ore0Block)
            LowerRange = peakprice - PwdBlock*Int(Bnow/Ore0Block+1)
            GoalPrice = peakprice - Pwd
        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            UpperRange = tenkanprice - PwdBlock*Int(Bnow/Ore0Block)
            LowerRange = tenkanprice - PwdBlock*Int(Bnow/Ore0Block+1)
            GoalPrice = tenkanprice - Pwd
        '下増のとき
        else
            UpperRange = peakprice + PwdBlock*Int(Bnow/Ore0Block+1)
            LowerRange = peakprice + PwdBlock*Int(Bnow/Ore0Block)
            GoalPrice = peakprice + Pwd
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, NamasiFullPricesOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, NamasiFullPricesOValue2Col) = onow2

        hold(periodnum, setrownum, pairnum, NamasiFullPricesUpperRangeCol) = UpperRange
        hold(periodnum, setrownum, pairnum, NamasiFullPricesLowerRangeCol) = LowerRange
        hold(periodnum, setrownum, pairnum, NamasiFullPricesGoalPriceCol) = GoalPrice
    elseif writeflag = writeflag_off then
        UpperRange = hold(periodnum, setrownum, pairnum, NamasiFullPricesUpperRangeCol)
        LowerRange = hold(periodnum, setrownum, pairnum, NamasiFullPricesLowerRangeCol)
        GoalPrice = hold(periodnum, setrownum, pairnum, NamasiFullPricesGoalPriceCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(UpperRange)
                Case 2
                    value = CStr(LowerRange)
                Case 3
                    value = CStr(GoalPrice)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　NamasiFullBlockNumber関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionNamasiFullBlockNumber( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionNamasiFullBlockNumber

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberOValueCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '各計算

     '---本体の計算---
        Dim BlockNumber : BlockNumber = 0
        Dim BlockNumber_min : BlockNumber_min = 0

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            BlockNumber = 1
        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            BlockNumber = 2
        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            BlockNumber = 3
        '下増のとき
        else
            BlockNumber = 4
        end if
        BlockNumber_min = BlockNumber

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberOValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberBlockNumberCol) = BlockNumber
        hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberMinBlockNumberCol) = BlockNumber_min
    elseif writeflag = writeflag_off then
        BlockNumber = hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberBlockNumberCol)
        BlockNumber_min = hold(periodnum, setrownum, pairnum, NamasiFullBlockNumberMinBlockNumberCol)
    End If

    ans = DirectionAns0

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(BlockNumber)
                    if subset_flag = "MINI" then
                        value = CStr(BlockNumber_min)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Divide関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionDivide( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionDivide

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = 0

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, DivideOValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, DivideOValue2Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    'name2が空白の場合、subsetの値を用いる
    if name2 = "" then
        onow2 = CDbl(subset_flag)
    end if

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    Dim ans : ans = 0
    if onow2 <> 0 then
        ans = CDbl(onow1) / CDbl(onow2)
    end if

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

         '---本体の計算---
        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, DivideAnsCol) = ans
            hold(periodnum, setrownum, pairnum, DivideOValueCol) = onow1
            hold(periodnum, setrownum, pairnum, DivideOValue2Col) = onow2
        elseif writeflag = writeflag_off then
            ans = hold(periodnum, setrownum, pairnum, DivideAnsCol)
            onow1 = hold(periodnum, setrownum, pairnum, DivideOValueCol)
            onow2 = hold(periodnum, setrownum, pairnum, DivideOValue2Col)
        End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(ans)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Multiple関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionMultiple( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionMultiple

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = 0

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, MultipleOValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, MultipleOValue2Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    'name2が空白の場合、subsetの値を用いる
    if name2 = "" then
        onow2 = CDbl(subset_flag)
    end if

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    Dim ans : ans = CDbl(onow1) * CDbl(onow2)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

         '---本体の計算---
        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, MultipleAnsCol) = ans
            hold(periodnum, setrownum, pairnum, MultipleOValueCol) = onow1
            hold(periodnum, setrownum, pairnum, MultipleOValue2Col) = onow2
        elseif writeflag = writeflag_off then
            ans = hold(periodnum, setrownum, pairnum, MultipleAnsCol)
            onow1 = hold(periodnum, setrownum, pairnum, MultipleOValueCol)
            onow2 = hold(periodnum, setrownum, pairnum, MultipleOValue2Col)
        End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(ans)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　TradeVolume関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionTradeVolume( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionTradeVolume

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2
    Dim indi_id3 
    Dim indi_id4
    Dim indi_id5 
    Dim indi_id6
    Dim indi_id7 
    Dim indi_id8
    Dim indi_id9 
    Dim indi_id10
    Dim indi_id11
    Dim indi_id12
    Dim indi_id13
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = 0
    Dim pnow : pnow = 0
    Dim pnow2 : pnow2 = 0
    Dim pnow3 : pnow3 = 0
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim Owd : Owd = 0'山の流れが終わるまでのOsの最大変化幅
    Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
    Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim tmp_names : tmp_names = Split(name1, "|")

    '必要パラメータ（各通貨価格関連）
    Dim standardprices : standardprices = tmp_set(inSetThreCol)
    Dim tmp_standardprices : tmp_standardprices = Split(standardprices,"|")

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    Dim tmp_price2: tmp_price2 = Split(price2(price_row), ",")
    pnow2 = tmp_price2(inPricePriceCol)

    Dim tmp_price3: tmp_price3 = Split(price3(price_row), ",")
    pnow3 = tmp_price3(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        Dim tmp_indip : tmp_indip = Split(indicatorpre1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                Owd = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                Ore0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_names(2) = tmp_indi(inIndiIDCol) Then
                Bnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            elseIf tmp_names(3) = tmp_indi(inIndiIDCol) Then
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                opre1 = GetArrayValueZero(tmp_indip,inIndiPriceCol)
            End If

        end if
    Next


    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim pairsratio '価格Os比
    if pair1 = 1 then
        pairsratio = tmp_standardprices(0) * pnow/tmp_standardprices(3) * tmp_standardprices(4)/pnow2 * pnow3/tmp_standardprices(5)
    elseif pair1 = 2 then
        pairsratio = tmp_standardprices(1) * tmp_standardprices(3)/pnow2 * pnow/tmp_standardprices(4) * pnow3/tmp_standardprices(5)
    elseif pair1 = 3 then
        pairsratio = tmp_standardprices(2) * pnow2/tmp_standardprices(3) * pnow3/tmp_standardprices(4) * pnow/tmp_standardprices(5)
    end if

        Dim O1sum : O1sum = 0
        Dim O2sum : O2sum = 0
        Dim O3sum : O3sum = 0
        Dim O1per : O1per = 0
        Dim O2per : O2per = 0
        Dim O3per : O3per = 0
        
        '増のとき
        if CDbl(onow1 - opre1) >= 0 then
            O1sum = pnow + Owd/Ore0 * (Ore0 - Bnow+1) * pairsratio
            O1per = pnow + Owd/Ore0 * pairsratio
        '減のとき
        elseif CDbl(onow1 - opre1) < 0 then
            O1sum = pnow - Owd/Ore0 * (Ore0 - Bnow+1) * pairsratio
            O1per = pnow - Owd/Ore0 * pairsratio
        end if
        O2sum = pnow2/pnow * O1sum
        O3sum = pnow3/pnow * O1sum
        O2per = pnow2/pnow * O1per
        O3per = pnow3/pnow * O1per

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, TradeVolumeO1sumCol) = O1sum
        hold(periodnum, setrownum, pairnum, TradeVolumeO2sumCol) = O2sum
        hold(periodnum, setrownum, pairnum, TradeVolumeO3sumCol) = O3sum
        hold(periodnum, setrownum, pairnum, TradeVolumeO1perCol) = O1per
        hold(periodnum, setrownum, pairnum, TradeVolumeO2perCol) = O2per
        hold(periodnum, setrownum, pairnum, TradeVolumeO3perCol) = O3per

    elseif writeflag = writeflag_off then
        O1sum = hold(periodnum, setrownum, pairnum, TradeVolumeO1sumCol)
        O2sum = hold(periodnum, setrownum, pairnum, TradeVolumeO2sumCol)
        O3sum = hold(periodnum, setrownum, pairnum, TradeVolumeO3sumCol)
        O1per = hold(periodnum, setrownum, pairnum, TradeVolumeO1perCol)
        O2per = hold(periodnum, setrownum, pairnum, TradeVolumeO2perCol)
        O3per = hold(periodnum, setrownum, pairnum, TradeVolumeO3perCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(O1sum)
                Case 2
                    value = CStr(O2sum)
                Case 3
                    value = CStr(O3sum)
                Case 4
                    value = CStr(O1per)
                Case 5
                    value = CStr(O2per)
                Case 6
                    value = CStr(O3per)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if
            if value = "" then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　TradeVolume2関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionTradeVolume2( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionTradeVolume2

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    
    Dim pnow1 : pnow1 = 0 '第1通貨価格
    Dim pnow2 : pnow2 = 0 '第2通貨価格
    Dim pnow3 : pnow3 = 0 '第3通貨価格
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    
'出力用の値取得
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 
    Dim tmp_name_group : tmp_name_group = Split(name1, "|")

    '必要パラメータ（各通貨価格関連）
    Dim standardprices : standardprices = tmp_set(inSetThreCol)
    Dim tmp_standardprices : tmp_standardprices = Split(standardprices,"|")

    '配列の確保
    Dim ma_now : ma_now = 0
    Dim ma_pre : ma_pre = 0
    Dim os_now : os_now = 0
    Dim os_pre : os_pre = 0
    Dim tenkandate : tenkandate = 0
    Dim peakdate : peakdate = 0
    Dim tenkanmavalue : tenkanmavalue = hold(periodnum, setrownum, pairnum, TradeVolume2TenkanmavalueCol)
    Dim peakmavalue : peakmavalue = hold(periodnum, setrownum, pairnum, TradeVolume2PeakmavalueCol)
    Dim owd : owd = 0
    Dim ore0 : ore0 = 0
    Dim owd2 : owd2 = 0
    Dim mawd : mawd = 0
    Dim os_now2 : os_now2 = 0

    ReDim tmp_ans(Ubound(tmp_name_group,1))

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow1 = tmp_price(inPricePriceCol)

    tmp_price = Split(price2(price_row), ",")
    pnow2 = tmp_price(inPricePriceCol)

    tmp_price = Split(price3(price_row), ",")
    pnow3 = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        Dim tmp_indip : tmp_indip = Split(indicatorpre1(i), ",")
        'name1の分割
        Dim tmp_names : tmp_names = Split(name1,"_")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                ma_now = CDbl(GetArrayValueZero(tmp_indi,inIndiPriceCol))
                ma_pre = CDbl(GetArrayValueZero(tmp_indip,inIndiPriceCol))
            elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                os_now = CDbl(GetArrayValueZero(tmp_indi,inIndiPriceCol))
                os_pre = CDbl(GetArrayValueZero(tmp_indip,inIndiPriceCol))
            elseIf tmp_names(2) = tmp_indi(inIndiIDCol) Then
                tenkandate = CDate(GetArrayValueZero(tmp_indi,inIndiPriceCol))
            elseIf tmp_names(3) = tmp_indi(inIndiIDCol) Then
                peakdate = CDate(GetArrayValueZero(tmp_indi,inIndiPriceCol))
            elseIf tmp_names(4) = tmp_indi(inIndiIDCol) Then
                owd = CDbl(GetArrayValueZero(tmp_indi,inIndiPriceCol))
            elseIf tmp_names(5) = tmp_indi(inIndiIDCol) Then
                ore0 = CDbl(GetArrayValueZero(tmp_indi,inIndiPriceCol))
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)

        '転換日時の場合、移動平均線の値を保持
        if DateAdd("n", -asi, Nowdate) = tenkandate then
            tenkanmavalue = ma_pre
        end if
        'ピーク日時の場合、移動平均線の値を保持
        if Nowdate = peakdate then
            peakmavalue = ma_now
        end if

        '前の山の幅から平均線の変化分を引く
        '上増
        if os_now > 0 and os_now > os_pre then
            mawd = peakmavalue - tenkanmavalue
        '上減
        elseif os_now > 0 and os_now < os_pre then
'            mawd = peakmavalue - ma_now
            mawd = peakmavalue - tenkanmavalue
        '下減
        elseif os_now < 0 and os_now < os_pre then
            mawd = tenkanmavalue - peakmavalue
        '下増
        elseif os_now < 0 and os_now > os_pre then
'            mawd = ma_now - peakmavalue
            mawd = tenkanmavalue - peakmavalue
        end if

        Dim div_para1: div_para1 = tmp_standardprices(pair1-1)
        Dim div_price1: div_price1 = tmp_standardprices(pair1+3-1)
        

        'Osの変化予定幅から価格の到達額を出す
        if mawd > 0 then
            owd2 = owd - mawd/div_para1
            if os_now > 0 then
                os_now2 = os_now - mawd/div_para1
            else
                os_now2 = os_now + mawd/div_para1
            end if
        else
            owd2 = owd
            os_now2 = os_now
        end if

        'Osの変化予定幅から価格の到達額を出す
        '上増
        if os_now > 0 and os_now > os_pre then
            Dim o1sum : o1sum = pnow1 + (CDbl(owd2) - CDbl(os_now)) * div_para1
            Dim ozn2 : ozn2 = CDbl(owd2) - CDbl(os_now)
            Dim o1per : o1per = pnow1 + CDbl(owd2)/CDbl(ore0) * div_para1
        '上減
        elseif os_now > 0 and os_now < os_pre then
            o1sum = pnow1 - (CDbl(owd2) - (CDbl(owd)-CDbl(os_now))) * div_para1
            ozn2 = CDbl(owd2) - (CDbl(owd) - CDbl(os_now))
            o1per = pnow1 - CDbl(owd2)/CDbl(ore0) * div_para1
        '下減
        elseif os_now < 0 and os_now < os_pre then
            o1sum = pnow1 - (CDbl(owd2) + CDbl(os_now)) * div_para1
            ozn2 = CDbl(owd2) + CDbl(os_now)
            o1per = pnow1 + CDbl(owd2)/CDbl(ore0) * div_para1
        '下増
        elseif os_now < 0 and os_now > os_pre then
            o1sum = pnow1 + (CDbl(owd2) - (CDbl(owd)+CDbl(os_now))) * div_para1
            ozn2 = CDbl(owd2) - (CDbl(owd) + CDbl(os_now))
            o1per = pnow1 - CDbl(owd2)/CDbl(ore0) * div_para1
        end if

        '空白対策
        if ozn2 = "" then
            ozn2 = 0
        end if
        if O1sum = "" then
            O1sum = 0
        end if
        if O1per = "" then
            O1per = 0
        end if
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, TradeVolume2Owd2Col) = Owd2
        hold(periodnum, setrownum, pairnum, TradeVolume2TenkanmavalueCol) = tenkanmavalue
        hold(periodnum, setrownum, pairnum, TradeVolume2PeakmavalueCol) = peakmavalue
        hold(periodnum, setrownum, pairnum, TradeVolume2Ozn2Col) = Ozn2
        hold(periodnum, setrownum, pairnum, TradeVolume2O1sumCol) = O1sum
        hold(periodnum, setrownum, pairnum, TradeVolume2O1perCol) = O1per
        hold(periodnum, setrownum, pairnum, TradeVolume2Osnow2Col) = os_now2
    elseif writeflag = writeflag_off then
        Owd2 = hold(periodnum, setrownum, pairnum, TradeVolume2Owd2Col)
        ozn2 = hold(periodnum, setrownum, pairnum, TradeVolume2Ozn2Col)
        O1sum = hold(periodnum, setrownum, pairnum, TradeVolume2O1sumCol)
        O1per = hold(periodnum, setrownum, pairnum, TradeVolume2O1perCol)
        os_now2 = hold(periodnum, setrownum, pairnum, TradeVolume2Osnow2Col)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(Owd2)
                Case 2
                    value = CStr(ozn2)
                Case 3
                    value = CStr(O1sum)
                Case 4
                    value = CStr(O1per)
                Case 5
                    value = CStr(os_now2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　GoalPredict100関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionGoalPredict100( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionGoalPredict100

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2
    Dim indi_id3
    Dim indi_id4
    Dim indi_id5
    Dim indi_id6
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, GoalPredict100OValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, GoalPredict100OValue2Col)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, GoalPredict100PriceCol)
    Dim pnow2 : pnow2 = 0
    Dim ppre2 : ppre2 = hold(periodnum, setrownum, pairnum, GoalPredict100Price2Col)
    Dim pnow3 : pnow3 = 0
    Dim ppre3 : ppre3 = hold(periodnum, setrownum, pairnum, GoalPredict100Price3Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, GoalPredict100TenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, GoalPredict100TenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, GoalPredict100TenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, GoalPredict100TenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, GoalPredict100PeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, GoalPredict100PeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, GoalPredict100PeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, GoalPredict100PeakPriceCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakValueCol)
    Dim prepeakprice : prepeakprice = hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakPriceCol)

    Dim upcount : upcount = hold(periodnum, setrownum, pairnum, GoalPredict100UpCountCol)
    Dim upcountafter : upcountafter = hold(periodnum, setrownum, pairnum, GoalPredict100UpCountAfterCol)
    Dim preupcount : preupcount = hold(periodnum, setrownum, pairnum, GoalPredict100PreUpCountCol)
    Dim preupcountafter : preupcountafter = hold(periodnum, setrownum, pairnum, GoalPredict100PreUpCountAfterCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '必要パラメータ（各通貨価格関連）
    Dim standardprices : standardprices = tmp_set(inSetThreCol)
    Dim tmp_standardprices : tmp_standardprices = Split(standardprices,"|")

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    Dim tmp_price2: tmp_price2 = Split(price2(price_row), ",")
    pnow2 = tmp_price2(inPricePriceCol)

    Dim tmp_price3: tmp_price3 = Split(price3(price_row), ",")
    pnow3 = tmp_price3(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_id3 = tmp_indi_ids(2)
                    indi_id4 = tmp_indi_ids(3)
                    indi_id5 = tmp_indi_ids(4)
                    indi_id6 = tmp_indi_ids(5)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If

        end if
    Next


    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    onow1 = vnow1
    onow2 = vnow2
    Dim pairsratio '価格Os比
    if pair1 = 1 then
        pairsratio = tmp_standardprices(0) * pnow/tmp_standardprices(3) * tmp_standardprices(4)/pnow2 * pnow3/tmp_standardprices(5)
    elseif pair1 = 2 then
        pairsratio = tmp_standardprices(1) * tmp_standardprices(3)/pnow2 * pnow/tmp_standardprices(4) * pnow3/tmp_standardprices(5)
    elseif pair1 = 3 then
        pairsratio = tmp_standardprices(2) * pnow2/tmp_standardprices(3) * pnow3/tmp_standardprices(4) * pnow/tmp_standardprices(5)
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算

     '---山関連の計算---

        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preupcount = upcount
            preupcountafter = upcountafter

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
            tenkanprice = ppre
            tenkanvalue = opre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = onow1
            upcount = 1
            upcountafter = 0
        '転換時以外の常時計算
        else
            if CDbl(onow1) >0 then
                '上増の場合
                if CDbl(onow1) > CDbl(opre1) then
                    upcount = upcount + 1
                    upcountafter = upcountafter + 1
                end if

                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    if CDbl(pnow) > CDbl(peakprice) then
                        peakprice = pnow
                    end if
                    upcountafter = 0
                end if

            elseif CDbl(onow1) < 0 then
                '下減の場合
                if CDbl(onow1) < CDbl(opre1) then
                    upcount = upcount + 1
                    upcountafter = upcountafter + 1
                end if

                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = onow1
                    if CDbl(pnow) < CDbl(peakprice) then 
                        peakprice = pnow
                    end if
                    upcountafter = 0
                end if
            end if
        end if
            

        Dim Owd : Owd = 0'山の流れが終わるまでのOsの最大変化幅
        Dim Omv : Omv = 0'現在までの間のOsの変化幅
        Dim Pwd : Pwd = 0'山の流れが終わるまでの価格の最大変化幅
        Dim Pmv : Pmv = 0'現在までの間の価格の変化幅
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Pdelta : Pdelta = 0 '現在の足での変化量
        Dim Bzn : Bzn = 0 '残りの予定時刻までの足の本数
        Dim Ozn : Ozn = 0 '残りのO指標量
        Dim Ore1 : Ore1 = 0'山の流れが終わるまでの本数のうち進行方向に進んだ本数

        '上増のとき
        if CDbl(onow1) >= 0 and CDbl(onow1 - opre1) >= 0 then
            Owd = tenkanvalue - prepeakvalue
            Omv = onow1 - tenkanvalue
            Pwd = tenkanprice - prepeakprice
            Pmv = pnow - tenkanprice

            Ore0 = DateDiff("n",CDate(prepeakdate), CDate(tenkandate)) / asi2
            Ore1 = Ore0 - preupcountafter
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
'            if pair1 = 1 then
                Pdelta = pnow - ppre
'            elseif pair1 = 2 then
'                Pdelta = pnow2 - ppre2
'            elseif pair1 = 3 then
'                Pdelta = pnow3 - ppre3
'            end if

            Ozn = Owd - onow1

        '上減のとき
        elseif CDbl(onow1) > 0 and CDbl(onow1 - opre1) < 0 then
            Owd = peakvalue - tenkanvalue
            Omv = peakvalue - onow1
            Pwd = peakprice - tenkanprice
            Pmv = peakprice - pnow

            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Ore1 = upcount - upcountafter
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
'            if pair1 = 1 then
                Pdelta = ppre - pnow
'            elseif pair1 = 2 then
'                Pdelta = ppre2 - pnow2
'            elseif pair1 = 3 then
'                Pdelta = ppre3 - pnow3
'            end if

            Ozn = onow1

        '下減のとき
        elseif CDbl(onow1) <= 0 and CDbl(onow1 - opre1) <= 0 then
            Owd = prepeakvalue - tenkanvalue
            Omv = tenkanvalue - onow1
            Pwd = prepeakprice - tenkanprice
            Pmv = tenkanprice - pnow

            Ore0 = DateDiff("n",CDate(prepeakdate), CDate(tenkandate)) / asi2
            Ore1 = Ore0 - preupcountafter
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
'            if pair1 = 1 then
                Pdelta = ppre - pnow
'            elseif pair1 = 2 then
'                Pdelta = ppre2 - pnow2
'            elseif pair1 = 3 then
'                Pdelta = ppre3 - pnow3
'            end if

            Ozn = Owd + onow1

        '下増のとき
        else
            Owd = tenkanvalue - peakvalue
            Omv = onow1 - peakvalue
            Pwd = tenkanprice - peakprice
            Pmv = pnow - peakprice

            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Ore1 = upcount - upcountafter
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
'            if pair1 = 1 then
                Pdelta = pnow - ppre
'            elseif pair1 = 2 then
'                Pdelta = pnow2 - ppre2
'            elseif pair1 = 3 then
'                Pdelta = pnow3 - ppre3
'            end if

            Ozn = - onow1

        end if

        Pwd = Abs(Pwd)
        Ore0 = Abs(Ore0)

        if Pwd = 0 then
            Pwd = 0.01
        end if
        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore1 <= 0 then
            Ore1 = 1
        end if

        Bzn = Ore0 - Bnow

        'Osの進行方向
        if CDbl(onow1-opre1)>0 then
            tenkandirect = 1
        elseif CDbl(onow1-opre1)<0 then
            tenkandirect = 2
        end if


     '---ズレ関連の計算---
        Dim Oper: Oper=0 '１足あたりのOs予測変化量
        Dim Pper: Pper=0 '１足あたりの価格予測変化量
        Dim Ozure: Ozure=0 '１足あたりのOs予測変化量とのずれ
        Dim Pzure: Pzure=0 '１足あたりの価格予測変化量とのずれ
        Dim O1sum: O1sum = 0 '１山あたりの到達予定価格（第一通貨換算）
        Dim O2sum: O2sum = 0 '１山あたりの到達予定価格（第二通貨換算）
        Dim O3sum: O3sum = 0 '１山あたりの到達予定価格（第三通貨換算）
        Dim O1per: O1per = 0 '１足あたりの到達予定価格（第一通貨換算）
        Dim O2per: O2per = 0 '１足あたりの到達予定価格（第二通貨換算）
        Dim O3per: O3per = 0 '１足あたりの到達予定価格（第三通貨換算）

        Oper = Owd / Ore0
        Ozure = Owd / Ore0 - Pdelta / pairsratio
'        Oper = Owd / Ore1
'        Ozure = Owd / Ore1 - Pdelta / pairsratio

        '増のとき
        if CDbl(onow1 - opre1) >= 0 then
            if Ozn > 0then
                O1sum = pnow + Ozn * pairsratio
            else
                O1sum = pnow + Owd/Ore0 * pairsratio
'                O1sum = pnow + Owd/Ore1 * pairsratio
            end if
            O1per = Owd/Ore0 * pairsratio
'            O1per = pnow + Owd/Ore1 * pairsratio
        '減のとき
        elseif CDbl(onow1 - opre1) < 0 then
            if Ozn > 0then
                O1sum = pnow - Ozn * pairsratio
            else
                O1sum = pnow - Owd/Ore0 * pairsratio
'                O1sum = pnow - Owd/Ore1 * pairsratio
            end if
            O1per = Owd/Ore0 * pairsratio
'            O1per = pnow - Owd/Ore1 * pairsratio
        end if
        O2sum = pnow2/pnow * O1sum
        O3sum = pnow3/pnow * O1sum
        O2per = pnow2/pnow * O1per
        O3per = pnow3/pnow * O1per

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, GoalPredict100AnsCol) = DirectionAns0
        hold(periodnum, setrownum, pairnum, GoalPredict100OValueCol) = onow1
        hold(periodnum, setrownum, pairnum, GoalPredict100OValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, GoalPredict100PriceCol) = pnow
        hold(periodnum, setrownum, pairnum, GoalPredict100TenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, GoalPredict100TenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, GoalPredict100TenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, GoalPredict100TenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, GoalPredict100TenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, GoalPredict100PeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, GoalPredict100PeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, GoalPredict100PeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, GoalPredict100PeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, GoalPredict100PreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, GoalPredict100PrePeakPriceCol) = prepeakprice

        hold(periodnum, setrownum, pairnum, GoalPredict100OwdCol) = Owd
        hold(periodnum, setrownum, pairnum, GoalPredict100Ore0Col) = Ore0
        hold(periodnum, setrownum, pairnum, GoalPredict100Ore1Col) = Ore1
        hold(periodnum, setrownum, pairnum, GoalPredict100OperCol) = Oper
        hold(periodnum, setrownum, pairnum, GoalPredict100OzureCol) = Ozure
        hold(periodnum, setrownum, pairnum, GoalPredict100VperCol) = Vper
        hold(periodnum, setrownum, pairnum, GoalPredict100VzureCol) = Vzure
        hold(periodnum, setrownum, pairnum, GoalPredict100BznCol) = Bzn
        hold(periodnum, setrownum, pairnum, GoalPredict100O1sumCol) = O1sum
        hold(periodnum, setrownum, pairnum, GoalPredict100O2sumCol) = O2sum
        hold(periodnum, setrownum, pairnum, GoalPredict100O3sumCol) = O3sum
        hold(periodnum, setrownum, pairnum, GoalPredict100O1perCol) = O1per
        hold(periodnum, setrownum, pairnum, GoalPredict100O2perCol) = O2per
        hold(periodnum, setrownum, pairnum, GoalPredict100O3perCol) = O3per

    elseif writeflag = writeflag_off then
        Owd = hold(periodnum, setrownum, pairnum, GoalPredict100OwdCol)
        Ore0 = hold(periodnum, setrownum, pairnum, GoalPredict100Ore0Col)
        Ore1 = hold(periodnum, setrownum, pairnum, GoalPredict100Ore1Col)
        Oper = hold(periodnum, setrownum, pairnum, GoalPredict100OperCol)
        Ozure = hold(periodnum, setrownum, pairnum, GoalPredict100OzureCol)
        Vper = hold(periodnum, setrownum, pairnum, GoalPredict100VperCol)
        Vzure = hold(periodnum, setrownum, pairnum, GoalPredict100VzureCol)
        Bzn = hold(periodnum, setrownum, pairnum, GoalPredict100BznCol)
        O1sum = hold(periodnum, setrownum, pairnum, GoalPredict100O1sumCol)
        O2sum = hold(periodnum, setrownum, pairnum, GoalPredict100O2sumCol)
        O3sum = hold(periodnum, setrownum, pairnum, GoalPredict100O3sumCol)
        O1per = hold(periodnum, setrownum, pairnum, GoalPredict100O1perCol)
        O2per = hold(periodnum, setrownum, pairnum, GoalPredict100O2perCol)
        O3per = hold(periodnum, setrownum, pairnum, GoalPredict100O3perCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(O1sum)
                Case 2
                    value = CStr(O2sum)
                Case 3
                    value = CStr(O3sum)
                Case 4
                    value = CStr(O1per)
                Case 5
                    value = CStr(O2per)
                Case 6
                    value = CStr(O3per)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　FractalCount関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionFractalCount( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionFractalCount

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answerh: answerh = 0
    Dim answerl: answerl = 0

'各値を取得する
    Dim open0 : open0 = 0
    Dim high1 : high1 = 0
    Dim high2 : high2 = hold(periodnum, setrownum, pairnum, FractalCountHigh1Col)
    Dim high3 : high3 = hold(periodnum, setrownum, pairnum, FractalCountHigh2Col)
    Dim high4 : high4 = hold(periodnum, setrownum, pairnum, FractalCountHigh3Col)
    Dim high5 : high5 = hold(periodnum, setrownum, pairnum, FractalCountHigh4Col)
    Dim low1 : low1 = 0
    Dim low2 : low2 = hold(periodnum, setrownum, pairnum, FractalCountLow1Col)
    Dim low3 : low3 = hold(periodnum, setrownum, pairnum, FractalCountLow2Col)
    Dim low4 : low4 = hold(periodnum, setrownum, pairnum, FractalCountLow3Col)
    Dim low5 : low5 = hold(periodnum, setrownum, pairnum, FractalCountLow4Col)
    Dim high_bar : high_bar = hold(periodnum, setrownum, pairnum, FractalCountHighBarCol) + 1
    Dim low_bar : low_bar = hold(periodnum, setrownum, pairnum, FractalCountLowBarCol) + 1
    Dim mainh: mainh = hold(periodnum, setrownum, pairnum, FractalCountAnsMainHCol)
    Dim mainl: mainl = hold(periodnum, setrownum, pairnum, FractalCountAnsMainLCol)
    Dim subh: subh = hold(periodnum, setrownum, pairnum, FractalCountAnsSubHCol)
    Dim subl: subl = hold(periodnum, setrownum, pairnum, FractalCountAnsSubLCol)
    if high2 = EMPTY then
        high2 = 0
    end if
    if low2 = EMPTY then
        low2 = 999
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '必要パラメータ（各通貨価格関連）
    Dim standardprices : standardprices = tmp_set(inSetThreCol)
    Dim tmp_standardprices : tmp_standardprices = Split(standardprices,"|")

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    high1 = tmp_price(inPricePriceCol)

    price_row = inPriceLowRow
    tmp_price = Split(price1(price_row), ",")
    low1 = tmp_price(inPricePriceCol)

    price_row = inPriceOpenRow
    tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)

    indi_day = tmp_price(inPriceDateCol)
    indi_time = tmp_price(inPriceTimeCol)

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    

    '各計算

    '直近高値の探索
     '直近高値位置との価格比較
    if CDbl(high1) > CDbl(high2) and CDbl(high1) > CDbl(high3) then
        high_bar = 1
        mainh = high1
        'sublの更新
        subl = low1
        if low1>low2 and low2 <> EMPTY then
            subl = low2
        end if
        if subl>low3 and low3 <> EMPTY then
            subl = low3
        end if
    else
        if subl > low1 and low1 <> EMPTY then
            subl = low1
        end if
    end if

    '直近安値の探索
     '直近安値位置との価格比較
    if CDbl(low1) < CDbl(low2) and CDbl(low1) < CDbl(low3) then
        low_bar = 1
        mainl = low1
        'subhの更新
        subh = high1
        if high1<high2  and high1 <> EMPTY then
            subh = high2
        end if
        if subh<high3  and high2 <> EMPTY then
            subh = high3
        end if
    else
        if subh < high1 and high1 <> EMPTY then
            subh = high1
        end if
    end if

    if high_bar = 1 then
    answerH = 1
    elseif high_bar = 2 then
    answerH = 3
    elseif high_bar = 3 then
    answerH = 5
    else
    answerh = -1
    end if

    if low_bar = 1 then
    answerL = 1
    elseif low_bar = 2 then
    answerL = 3
    elseif low_bar = 3 then
    answerL = 5
    else
    answerL = -1
    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, FractalCountAnsBarHCol) = answerh
        hold(periodnum, setrownum, pairnum, FractalCountAnsBarLCol) = answerl
        hold(periodnum, setrownum, pairnum, FractalCountAnsMainHCol) = mainh
        hold(periodnum, setrownum, pairnum, FractalCountAnsMainLCol) = mainl
        hold(periodnum, setrownum, pairnum, FractalCountAnsSubHCol) = subh
        hold(periodnum, setrownum, pairnum, FractalCountAnsSubLCol) = subl
        hold(periodnum, setrownum, pairnum, FractalCountHigh1Col) = high1
        hold(periodnum, setrownum, pairnum, FractalCountHigh2Col) = high2
        hold(periodnum, setrownum, pairnum, FractalCountHigh3Col) = high3
        hold(periodnum, setrownum, pairnum, FractalCountHigh4Col) = high4
        hold(periodnum, setrownum, pairnum, FractalCountHigh5Col) = high5
        hold(periodnum, setrownum, pairnum, FractalCountLow1Col) = low1
        hold(periodnum, setrownum, pairnum, FractalCountLow2Col) = low2
        hold(periodnum, setrownum, pairnum, FractalCountLow3Col) = low3
        hold(periodnum, setrownum, pairnum, FractalCountLow4Col) = low4
        hold(periodnum, setrownum, pairnum, FractalCountLow5Col) = low5
        hold(periodnum, setrownum, pairnum, FractalCountOpen0Col) = open0
        hold(periodnum, setrownum, pairnum, FractalCountHighBarCol) = high_bar
        hold(periodnum, setrownum, pairnum, FractalCountLowBarCol) = low_bar

    elseif writeflag = writeflag_off then
        answerh = hold(periodnum, setrownum, pairnum, FractalCountAnsBarHCol)
        answerl = hold(periodnum, setrownum, pairnum, FractalCountAnsBarLCol)
        mainh = hold(periodnum, setrownum, pairnum, FractalCountAnsMainHCol)
        mainl = hold(periodnum, setrownum, pairnum, FractalCountAnsMainLCol) 
        subh = hold(periodnum, setrownum, pairnum, FractalCountAnsSubHCol) 
        subl = hold(periodnum, setrownum, pairnum, FractalCountAnsSubLCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answerh)
                Case 2
                    value = CStr(answerl)
                Case 3
                    value = CStr(mainh)
                Case 4
                    value = CStr(mainl)
                Case 5
                    value = CStr(subh)
                Case 6
                    value = CStr(subl)
            End Select

            if value = "" then
                value = 0
            end if

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

'            value = CStr(high1) + "|"
'            value = value + CStr(high2) + "|"
'            value = value + CStr(high3) + "|"
'            value = value + CStr(high4) + "|"
'            value = value + CStr(high5) + "|"
'            value = value + CStr(low1) + "|"
'            value = value + CStr(low2) + "|"
'            value = value + CStr(low3) + "|"
'            value = value + CStr(low4) + "|"
'            value = value + CStr(low5) + "|"
'            value = value + CStr(open0) + "|"
'            value = value + CStr(mainh) + "|"
'            value = value + CStr(mainl) + "|"
'            value = value + CStr(subh) + "|"
'            value = value + CStr(subl) + "|"
'            
            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　FractalPercent関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionFractalPercent( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator1_saki, price1_saki, _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionFractalPercent

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answerh: answerh = 0
    Dim answerl: answerl = 0

'各値を取得する
    Dim open0 : open0 = 0
    Dim high1 : high1 = 0
    Dim high2 : high2 = hold(periodnum, setrownum, pairnum, FractalPercentHigh1Col)
    Dim high3 : high3 = hold(periodnum, setrownum, pairnum, FractalPercentHigh2Col)
    Dim high4 : high4 = hold(periodnum, setrownum, pairnum, FractalPercentHigh3Col)
    Dim high5 : high5 = hold(periodnum, setrownum, pairnum, FractalPercentHigh4Col)
    Dim low1 : low1 = 0
    Dim low2 : low2 = hold(periodnum, setrownum, pairnum, FractalPercentLow1Col)
    Dim low3 : low3 = hold(periodnum, setrownum, pairnum, FractalPercentLow2Col)
    Dim low4 : low4 = hold(periodnum, setrownum, pairnum, FractalPercentLow3Col)
    Dim low5 : low5 = hold(periodnum, setrownum, pairnum, FractalPercentLow4Col)
    Dim high_bar : high_bar = hold(periodnum, setrownum, pairnum, FractalPercentHighBarCol) + 1
    Dim low_bar : low_bar = hold(periodnum, setrownum, pairnum, FractalPercentLowBarCol) + 1
    Dim mainh: mainh = hold(periodnum, setrownum, pairnum, FractalPercentAnsMainHCol)
    Dim mainl: mainl = hold(periodnum, setrownum, pairnum, FractalPercentAnsMainLCol)
    Dim subh: subh = hold(periodnum, setrownum, pairnum, FractalPercentAnsSubHCol)
    Dim subl: subl = hold(periodnum, setrownum, pairnum, FractalPercentAnsSubLCol)

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 
    Dim tmp_names1, tmp_names2
    tmp_names1 = Split(name1,"|")
    tmp_names2 = Split(name2,"|")

    '必要パラメータ（各通貨価格関連）
    Dim standardprices : standardprices = tmp_set(inSetThreCol)
    Dim tmp_standardprices : tmp_standardprices = Split(standardprices,"|")

    '価格の更新
    Dim price_row: price_row = inPriceOpenRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_names1(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    mainh = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names1(1) = tmp_indi(inIndiIDCol) Then
                    subl = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names2(0) = tmp_indi(inIndiIDCol) Then
                    mainl = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names2(1) = tmp_indi(inIndiIDCol) Then
                    subh = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            '対象の時間足が無かったとき用
            else
                If tmp_names1(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                end if
            End If
        end if
    Next

'    For i = 1 To UBound(indicator1_saki, 1)
'        '信号名が合致
'        tmp_indi = Split(indicator1_saki(i), ",")
'        if Ubound(tmp_indi,1) > 1 then
'            '足が合致
'            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
'                If tmp_names1(0) = tmp_indi(inIndiIDCol) Then
'                    mainh = GetArrayValueZero(tmp_indi,inIndiPriceCol)
'                elseIf tmp_names1(1) = tmp_indi(inIndiIDCol) Then
'                    subl = GetArrayValueZero(tmp_indi,inIndiPriceCol)
'                elseIf tmp_names2(0) = tmp_indi(inIndiIDCol) Then
'                    mainl = GetArrayValueZero(tmp_indi,inIndiPriceCol)
'                elseIf tmp_names2(1) = tmp_indi(inIndiIDCol) Then
'                    subh = GetArrayValueZero(tmp_indi,inIndiPriceCol)
'                End If
'            End If
'        end if
'    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    

    '各計算

    '高値に対する現在ねの進行率（高値からどれだけ離れているか）
    '※上下計算上の都合で10倍掛けする
    if mainh - subl <> 0 then
        answerh = (mainh - open0)/(mainh- subl) * 10
    else
        answerh = 0
    end if

    '安値に対する現在ねの進行率（安値からどれだけ離れているか）
    '※上下計算上の都合で10倍掛けする
    if mainl - subh <> 0 then
        answerl = (mainl - open0)/(mainl- subh) * 10
    else
        answerl = 0
    end if


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, FractalPercentAnsBarHCol) = answerh
        hold(periodnum, setrownum, pairnum, FractalPercentAnsBarLCol) = answerl
        hold(periodnum, setrownum, pairnum, FractalPercentAnsMainHCol) = mainh
        hold(periodnum, setrownum, pairnum, FractalPercentAnsMainLCol) = mainl
        hold(periodnum, setrownum, pairnum, FractalPercentAnsSubHCol) = subh
        hold(periodnum, setrownum, pairnum, FractalPercentAnsSubLCol) = subl
        hold(periodnum, setrownum, pairnum, FractalPercentOpen0Col) = open0

    elseif writeflag = writeflag_off then
        answerh = hold(periodnum, setrownum, pairnum, FractalPercentAnsBarHCol)
        answerl = hold(periodnum, setrownum, pairnum, FractalPercentAnsBarLCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answerh)
                Case 2
                    value = CStr(answerl)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

'            value = CStr(mainh) + "|" + CStr(mainl) + "|" + CStr(subh) + "|" + CStr(subl) + "|" + CStr(answerh) + "|" + CStr(answerl) + "|" + CStr(open0)

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　FractalSinchoku関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionFractalSinchoku( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionFractalSinchoku

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer: answer = 0

'各値を取得する
    Dim open0 : open0 = 0
    Dim open1 : open1 = hold(periodnum, setrownum, pairnum, FractalSinchokuOpenCol)
    Dim high0 : high0 = 0
    Dim low0 : low0 = 0
    Dim close0 : close0 = 0

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    high0 = tmp_price(inPricePriceCol)
    price_row = inPriceLowRow
    tmp_price = Split(price1(price_row), ",")
    low0 = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name1 = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    open0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf name2 = tmp_indi(inIndiIDCol) Then
                    close0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            '対象の時間足が無かったとき用
            else
                If name1 = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    open0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf name2 = tmp_indi(inIndiIDCol) Then
                    close0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算

    if open1 = EMPTY then
        open1 = open0
    end if

    answer = CDbl(high0) + CDbl(low0) + CDbl(close0) - CDbl(open1)*3

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, FractalSinchokuAnsCol) = answer
        hold(periodnum, setrownum, pairnum, FractalSinchokuOpenCol) = open0

    elseif writeflag = writeflag_off then
        answer = hold(periodnum, setrownum, pairnum, FractalSinchokuAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

'            value = CStr(open1) + "|" + CStr(high0) + "|" + CStr(low0) + "|" + CStr(close0) + "|" + CStr(answer)

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　FractalTiming関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionFractalTiming( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionFractalTiming

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answerh: answerh = 0
    Dim answerl: answerl = 0

'各値を取得する
    Dim high1 : high1 = hold(periodnum, setrownum, pairnum, FractalTimingHigh1Col)
    Dim low1 : low1 = hold(periodnum, setrownum, pairnum, FractalTimingLow1Col)
    Dim high2 : high2 = hold(periodnum, setrownum, pairnum, FractalTimingHigh2Col)
    Dim low2 : low2 = hold(periodnum, setrownum, pairnum, FractalTimingLow2Col)
    Dim high0 : high0 = 0
    Dim low0 : low0 = 0

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    high0 = tmp_price(inPricePriceCol)
    price_row = inPriceLowRow
    tmp_price = Split(price1(price_row), ",")
    low0 = tmp_price(inPricePriceCol)
    indi_day = tmp_price(inPriceDateCol)
    indi_time = tmp_price(inPriceTimeCol)

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算

    '対象の時間足で必要となる価格データ数
    Dim tmp_period1 : tmp_period1 = periodnum + tmp_set(inSetAsi1Col) - 1
    Dim tmp_period2 : tmp_period2 = periodnum + tmp_set(inSetAsi2Col) - 1
    
    Dim asi1 : asi1 = GetAsi(tmp_period1)
    Dim asi2 : asi2 = GetAsi(tmp_period2)
    if asi2 < 0 then asi2 = asi1

    Dim check_num1 : check_num1 = 3
    Dim check_num2 : check_num2 = asi2/asi1*2 + (Minute(Nowdate)+5-3) Mod asi2 +3
    
    
    '---下方向フラクタル分----
    high1 = high1 + high0 + "|"
    high2 = high2 + high0 + "|"
    Dim tmp_high1 : tmp_high1 = Split(high1,"|")
    Dim answer_h1 : answer_h1 = high0
    Dim tmp_high2 : tmp_high2 = Split(high2,"|")
    Dim answer_h2 : answer_h2 = high0

    if Ubound(tmp_high1,1)>check_num1 then
        For i=1 To check_num1
            if answer_h1 < tmp_high1(i) then
                answer_h1 = tmp_high1(i)
            end if
        Next
    else
        For i=0 To Ubound(tmp_high1,1)-1
            if answer_h1 < tmp_high1(i) then
                answer_h1 = tmp_high1(i)
            end if
        Next
    end if

    if Ubound(tmp_high2,1)>check_num2 then
        For i=0 To check_num2
            if answer_h2 < tmp_high2(i) then
                answer_h2 = tmp_high2(i)
            end if
        Next
    else
        For i=0 To Ubound(tmp_high2,1)-1
            if answer_h2 < tmp_high2(i) then
                answer_h2 = tmp_high2(i)
            end if
        Next
    end if

    '格納文字列の更新
    high1 = ""
    if Ubound(tmp_high1,1) > check_num1 then
        For i=1 To check_num1
            high1 = high1 + tmp_high1(i) + "|"
        Next
    else
        For i=0 To Ubound(tmp_high1,1)-1
            high1 = high1 + tmp_high1(i) + "|"
        Next
    end if
    high2 = ""
    if Ubound(tmp_high2,1) > check_num2 then
        if (Minute(Nowdate)+5-3) Mod asi2 = asi2-1 then
            if Ubound(tmp_high2,1)>check_num2 then
                For i=asi2 To check_num2
                    high2 = high2 + tmp_high2(i) + "|"
                Next
            end if
        else
            For i=0 To check_num2
                high2 = high2 + tmp_high2(i) + "|"
            Next
        end if
    else
        For i=0 To Ubound(tmp_high2,1)-1
            high2 = high2 + tmp_high2(i) + "|"
        Next
    end if

    '下方向フラクタルの価格となる高値が々場合下方向出力
    if answer_h1 = answer_h2 then
        answerh = 1
    else
        answerh = -1
    end if


    '---上方向フラクタル分----
    low1 = low1 + low0 + "|"
    low2 = low2 + low0 + "|"
    Dim tmp_low1 : tmp_low1 = Split(low1,"|")
    Dim answer_l1 : answer_l1 = low0
    Dim tmp_low2 : tmp_low2 = Split(low2,"|")
    Dim answer_l2 : answer_l2 = low0

    if Ubound(tmp_low1,1)>check_num1 then
        For i=1 To check_num1
            if answer_l1 > tmp_low1(i) then
                answer_l1 = tmp_low1(i)
            end if
        Next
    else
        For i=0 To Ubound(tmp_low1,1)-1
            if answer_l1 > tmp_low1(i) then
                answer_l1 = tmp_low1(i)
            end if
        Next
    end if

    if Ubound(tmp_low2,1)>check_num2 then
        For i=0 To check_num2
            if answer_l2 > tmp_low2(i) then
                answer_l2 = tmp_low2(i)
            end if
        Next
    else
        For i=0 To Ubound(tmp_low2,1)-1
            if answer_l2 > tmp_low2(i) then
                answer_l2 = tmp_low2(i)
            end if
        Next
    end if

    '格納文字列の更新
    low1 = ""
    if Ubound(tmp_low1,1) > check_num1 then
        For i=1 To check_num1
            low1 = low1 + tmp_low1(i) + "|"
        Next
    else
        For i=0 To Ubound(tmp_low1,1)-1
            low1 = low1 + tmp_low1(i) + "|"
        Next
    end if
    low2 = ""
    if Ubound(tmp_low2,1) > check_num2 then
        if (Minute(Nowdate)+5-3) Mod asi2 =asi2-1 then
            if Ubound(tmp_low2,1)>check_num2 then
                For i=asi2 To check_num2
                    low2 = low2 + tmp_low2(i) + "|"
                Next
            end if
        else
            For i=0 To check_num2
                low2 = low2 + tmp_low2(i) + "|"
            Next
        end if
    else
        For i=0 To Ubound(tmp_low2,1)-1
            low2 = low2 + tmp_low2(i) + "|"
        Next
    end if

    '下方向フラクタルの価格となる高値が同じ場合下方向出力
    if answer_l1 = answer_l2 then
        answerl = 1
    else
        answerl = -1
    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, FractalTimingAnshCol) = answerh
        hold(periodnum, setrownum, pairnum, FractalTimingAnslCol) = answerl
        hold(periodnum, setrownum, pairnum, FractalTimingHigh1Col) = high1
        hold(periodnum, setrownum, pairnum, FractalTimingHigh2Col) = high2
        hold(periodnum, setrownum, pairnum, FractalTimingLow1Col) = low1
        hold(periodnum, setrownum, pairnum, FractalTimingLow2Col) = low2
    elseif writeflag = writeflag_off then
        answerh = hold(periodnum, setrownum, pairnum, FractalTimingAnshCol)
        answerl = hold(periodnum, setrownum, pairnum, FractalTimingAnslCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answerh)
'                    value = CStr(high2)
                Case 2
                    value = CStr(answerl)
'                    value = CStr(low2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

'            value = CStr(open1) + "|" + CStr(high0) + "|" + CStr(low0) + "|" + CStr(close0) + "|" + CStr(answer)

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　HeikenReal関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionHeikenReal( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator1_saki, price1_saki, _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionHeikenReal

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer: answer = 0

'各値を取得する
    Dim heopen0_saki : heopen0_saki = hold(periodnum, setrownum, pairnum, HeikenRealOpenCol)
    Dim hehigh0_saki : hehigh0_saki = hold(periodnum, setrownum, pairnum, HeikenRealHighCol)
    Dim helow0_saki : helow0_saki = hold(periodnum, setrownum, pairnum, HeikenRealLowCol)
    Dim heclose0_saki : heclose0_saki = hold(periodnum, setrownum, pairnum, HeikenRealCloseCol)
    Dim open0_saki : open0_saki = 0
    Dim open0 : open0 = 0
    Dim high0 : high0 = 0
    Dim low0 : low0 = 0

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    high0 = tmp_price(inPricePriceCol)
    price_row = inPriceLowRow
    tmp_price = Split(price1(price_row), ",")
    low0 = tmp_price(inPricePriceCol)
    price_row = inPriceOpenRow
    tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)
    tmp_price = Split(price1_saki(price_row), ",")
    open0_saki = tmp_price(inPricePriceCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            End If
        end if
    Next

    For i = 1 To UBound(indicator1_saki, 1)
        '信号名が合致
        tmp_indi = Split(indicator1_saki(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    heopen0_saki = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算

    '先足の時刻と今足の時刻が合致する場合、先足の平均足高値、安値を更新する
    if tmp_indi_time = indi_time then
        hehigh0_saki = CDbl(high0)
        helow0_saki = CDbl(low0)
        heclose0_saki = (CDbl(open0_saki) + CDbl(high0) + CDbl(low0) + CDbl(open0)) / 4
    else
        if CDbl(hehigh0_saki) < CDbl(high0) then
            hehigh0_saki = CDbl(high0)
        end if
        if CDbl(helow0_saki) > CDbl(low0) then
            helow0_saki = CDbl(low0)
        end if
        heclose0_saki = (CDbl(open0_saki) + CDbl(high0) + CDbl(low0) + CDbl(open0)) / 4
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, HeikenRealOpenCol) = heopen0_saki
        hold(periodnum, setrownum, pairnum, HeikenRealHighCol) = hehigh0_saki
        hold(periodnum, setrownum, pairnum, HeikenRealLowCol) = helow0_saki
        hold(periodnum, setrownum, pairnum, HeikenRealCloseCol) = heclose0_saki
    elseif writeflag = writeflag_off then
        heopen0_saki = hold(periodnum, setrownum, pairnum, HeikenRealOpenCol)
        hehigh0_saki = hold(periodnum, setrownum, pairnum, HeikenRealHighCol)
        helow0_saki = hold(periodnum, setrownum, pairnum, HeikenRealLowCol)
        heclose0_saki = hold(periodnum, setrownum, pairnum, HeikenRealCloseCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　RousokuIkiKaeri関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRousokuIkiKaeri( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionRousokuIkiKaeri

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

'各値を取得する
    Dim pluscount : pluscount = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriPlusCountCol)
    Dim minuscount : minuscount = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriMinusCountCol)
    Dim plusstopen : plusstopen = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriPlusStartOpenCol)
    Dim minusstopen : minusstopen = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriMinusStartOpenCol)
    Dim open1 : open1 = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriOpen0Col)
    Dim open2 : open2 = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriOpen1Col)
    Dim open0 : open0 = 0
    Dim answer : answer = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriAnswerCol)


'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    price_row = inPriceOpenRow
    tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)

'出力用の値取得
    indi_day = tmp_price(inPriceDateCol)
    indi_time = tmp_price(inPriceTimeCol)

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    '1回前の陰陽と今回の陰陽が変化しているか確認する
    '変化している場合
    if (open0-open1)*(open1-open2) < 0 then
        '陽線
        if open0>open1 then
            'リセット
            pluscount = 1
            plusstopen = open1
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            if minusstopen - plusstopen > open0 - plusstopen then
                answer = -1
            else
                answer = 1
            end if
        '陰線
        else
            'リセット
            minuscount = 1
            minusstopen = open1
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            if minusstopen - open0 > minusstopen - plusstopen then
                answer = -1
            else
                answer = 1
            end if
        end if
    '変化していない場合
    else
        '陽線
        if open0>open1 then
            pluscount = pluscount + 1
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            if minusstopen - plusstopen > open0 - plusstopen then
                answer = -1
            else
                answer = 1
            end if
        '陰線
        else
            minuscount = minuscount + 1
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            if minusstopen - open0 > minusstopen - plusstopen then
                answer = -1
            else
                answer = 1
            end if
        end if
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriPlusCountCol) = pluscount
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriMinusCountCol) = minuscount
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriPlusStartOpenCol) = plusstopen
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriMinusStartOpenCol) = minusstopen
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriOpen0Col) = open0
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriOpen1Col) = open1
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriAnswerCol) = answer
    elseif writeflag = writeflag_off then
        answer = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriAnswerCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　RousokuIkiKaeriVariable関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRousokuIkiKaeriVariable( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionRousokuIkiKaeriVariable

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_val : subset_val = 0

'各値を取得する
    Dim pluscount : pluscount = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusCountCol)
    Dim minuscount : minuscount = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusCountCol)
    Dim plusstopen : plusstopen = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusStartOpenCol)
    Dim minusstopen : minusstopen = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusStartOpenCol)
    Dim plusopengroup : plusopengroup = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusOpenGroupCol)
    Dim minusopengroup : minusopengroup = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusOpenGroupCol)
    Dim open1 : open1 = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableOpen0Col)
    Dim open2 : open2 = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableOpen1Col)
    Dim open0 : open0 = 0
    Dim answer : answer = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableAnswerCol)
    Dim plustmpopen : plustmpopen = 0
    Dim minustmpopen : minustmpopen = 0

    if pluscount = EMPTY then
        pluscount = 0
    end if
    if minuscount = EMPTY then
        minuscount = 0
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_val = CInt(tmp_set(inSetSubSettingCol))

    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    price_row = inPriceOpenRow
    tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)

'出力用の値取得
    indi_day = tmp_price(inPriceDateCol)
    indi_time = tmp_price(inPriceTimeCol)

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    '1回前の陰陽と今回の陰陽が変化しているか確認する
    '変化している場合
    if (open0-open1)*(open1-open2) < 0 then
        '陽線
        if open0>open1 then
            'リセット
            pluscount = 1
            plusstopen = open1
            if plusstopen = "" then
                plusstopen = open0
            end if
            plusopengroup = CStr(plusstopen) + "|"
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            Dim minusopenarray : minusopenarray = Split(minusopengroup,"|")

            if minuscount > subset_val-pluscount then
                if minusopenarray(minuscount-(subset_val-pluscount)) - plusstopen > open0 - plusstopen then
                    answer = -1
                else
                    answer = 1
                end if
            else
                if minusstopen - plusstopen > open0 - plusstopen then
                    answer = -1
                else
                    answer = 1
                end if
            end if
        '陰線
        else
            'リセット
            minuscount = 1
            minusstopen = open1
            if minusstopen = "" then
                minusstopen = open0
            end if
            minusopengroup = CStr(minusstopen) + "|"
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            Dim plusopenarray : plusopenarray = Split(plusopengroup,"|")

            if pluscount > subset_val-minuscount then
                if minusstopen - open0 > minusstopen - plusopenarray(pluscount-(subset_val-minuscount)) then
                    answer = -1
                else
                    answer = 1
                end if
            else
                if minusstopen - open0 > minusstopen - plusstopen then
                    answer = -1
                else
                    answer = 1
                end if
            end if
        end if
    '変化していない場合
    else
        '陽線
        if open0>open1 then
            if open1 <> EMPTY then
                pluscount = pluscount + 1
                plusopengroup = plusopengroup + CStr(open1) + "|"
                '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
                minusopenarray = Split(minusopengroup,"|")

                if pluscount >= subset_val then
                    answer = 1
                elseif minuscount > subset_val-pluscount then
                    if minusopenarray(minuscount-(subset_val-pluscount)) - plusstopen > open0 - plusstopen then
                        answer = -1
                    else
                        answer = 1
                    end if
                else
                    if minusstopen - plusstopen > open0 - plusstopen then
                        answer = -1
                    else
                        answer = 1
                    end if
                end if
            end if
        '陰線
        else
            if open1 <> EMPTY then
                minuscount = minuscount + 1
                minusopengroup = minusopengroup + CStr(open1) + "|"
                '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
                plusopenarray = Split(plusopengroup,"|")

                if minuscount >= subset_val then
                    answer = -1
                elseif pluscount > subset_val-minuscount then
                    if minusstopen - open0 > minusstopen - plusopenarray(pluscount-(subset_val-minuscount)) then
                        answer = -1
                    else
                        answer = 1
                    end if
                else
                    if minusstopen - open0 > minusstopen - plusstopen then
                        answer = -1
                    else
                        answer = 1
                    end if
                end if
            end if
        end if
    end if
    if answer = EMPTY or answer = "" then
        answer = 0
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusCountCol) = pluscount
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusCountCol) = minuscount
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusStartOpenCol) = plusstopen
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusStartOpenCol) = minusstopen
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariablePlusOpenGroupCol) = plusopengroup
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableMinusOpenGroupCol) = minusopengroup
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableOpen0Col) = open0
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableOpen1Col) = open1
        hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableAnswerCol) = answer
    elseif writeflag = writeflag_off then
        answer = hold(periodnum, setrownum, pairnum, RousokuIkiKaeriVariableAnswerCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　Average関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionAverage( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionAverage

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_val : subset_val = 0

'各値を取得する
    Dim holdcount : holdcount = hold(periodnum, setrownum, pairnum, AverageHoldCountCol)
    Dim holdgroup : holdgroup = hold(periodnum, setrownum, pairnum, AverageHoldGroupCol)
    Dim answer : answer = 0
    Dim vnow1 : vnow1 = 0

    if holdcount = EMPTY then
        holdcount = 0
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_val = CInt(tmp_set(inSetSubSettingCol))

    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 


'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    '平均値の算
    if holdcount > 0 then
        tmp_str = Split(holdgroup,"|")
        For i=0 To Ubound(tmp_str,1) - 1
            answer = CDbl(answer) + CDbl(tmp_str(i))
        Next
        answer = answer / holdcount
    end if
    
    '規定数分を保持している場合
    if holdcount >= subset_val then
        Dim tmp_str : tmp_str = Split(holdgroup,"|")
        holdgroup = tmp_str(1) + "|"
        For i =2 To Ubound(tmp_str,1) - 1
            holdgroup = holdgroup + tmp_str(i) + "|"
        Next
    end if
    
    '値の更新（最新の値を保持文字列へ追記）
    holdgroup = holdgroup + CStr(vnow1) + "|"
    if holdcount <subset_val then
        holdcount = holdcount + 1
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, AverageHoldCountCol) = holdcount
        hold(periodnum, setrownum, pairnum, AverageHoldGroupCol) = holdgroup
        hold(periodnum, setrownum, pairnum, AverageAnswerCol) = answer
    elseif writeflag = writeflag_off then
        answer = hold(periodnum, setrownum, pairnum, AverageAnswerCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　AverageRousokuIkiKaeriVariable関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionAverageRousokuIkiKaeriVariable( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionAverageRousokuIkiKaeriVariable

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_val : subset_val = 0

'各値を取得する
    Dim pluscount : pluscount = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusCountCol)
    Dim minuscount : minuscount = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusCountCol)
    Dim plusstopen : plusstopen = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusStartOpenCol)
    Dim plusstclose : plusstclose = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusStartCloseCol)
    Dim minusstopen : minusstopen = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusStartOpenCol)
    Dim minusstclose : minusstclose = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusStartCloseCol)
    Dim plusopengroup : plusopengroup = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusOpenGroupCol)
    Dim plusclosegroup : plusclosegroup = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusCloseGroupCol)
    Dim minusopengroup : minusopengroup = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusOpenGroupCol)
    Dim minusclosegroup : minusclosegroup = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusCloseGroupCol)
    Dim open1 : open1 = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOpen0Col)
    Dim open2 : open2 = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOpen1Col)
    Dim open0 : open0 = 0
    Dim answer : answer = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableAnswerCol)
    Dim plustmpopen : plustmpopen = 0
    Dim minustmpopen : minustmpopen = 0
    Dim op1 : op1 = 0
    Dim cl1 : ocl = 0
    Dim op2 : op2 =  hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOp1Col)
    Dim cl2 : cl2 =  hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableCl1Col)

    if pluscount = EMPTY then
        pluscount = 0
    end if
    if minuscount = EMPTY then
        minuscount = 0
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_val = CInt(tmp_set(inSetSubSettingCol))

    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    price_row = inPriceOpenRow
    tmp_price = Split(price1(price_row), ",")
    open0 = tmp_price(inPricePriceCol)

'出力用の値取得
    indi_day = tmp_price(inPriceDateCol)
    indi_time = tmp_price(inPriceTimeCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                op1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
            If name2 = tmp_indi(inIndiIDCol) Then
                cl1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    '1回前の陰陽と今回の陰陽が変化しているか確認する
    '変化している場合
    if (cl2-op2)*(cl1-op1) < 0 then
        '陽線
        if cl1>op1 then
            'リセット
            pluscount = 1
            plusstopen = op2
            plusstclose = cl2
            if plusstopen = "" then
                plusstopen = op1
                plusstclose = cl1
            end if
            plusopengroup = CStr(plusstopen) + "|"
            plusclosegroup = CStr(plusstclose) + "|"
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            Dim minusopenarray : minusopenarray = Split(minusopengroup,"|")
            Dim minusclosearray : minusclosearray = Split(minusclosegroup,"|")
            Dim plusopenarray : plusopenarray = Split(plusopengroup,"|")
            Dim plusclosearray : plusclosearray = Split(plusclosegroup,"|")

            if minuscount > subset_val-pluscount then
                if minusopenarray(minuscount-(subset_val-pluscount)) - plusstopen > cl1 - plusstopen then
                    answer = 0
                    if minuscount>0 then
                        For i=minuscount-(subset_val-pluscount) To Ubound(minusopenarray)-1
                            answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                        Next
                        answer = answer / (Ubound(minusopenarray) - (minuscount-(subset_val-pluscount)))
                    end if
                else
                    answer = 0
                    if pluscount>0 then
                        For i=0 To Ubound(plusopenarray)-1
                            answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                        Next
                        answer = answer / Ubound(plusopenarray)
                    end if
                end if
            else
                if minusstopen - plusstopen > cl1 - plusstopen then
                    answer = 0
                    if minuscount>0 then
                        For i=0 To Ubound(minusopenarray)-1
                            answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                        Next
                        answer = answer / Ubound(minusopenarray)
                    end if
                else
                    answer = 0
                    if pluscount>0 then
                        For i=0 To Ubound(plusopenarray)-1
                            answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                        Next
                        answer = answer / Ubound(plusopenarray)
                    end if
                end if
            end if
        '陰線
        else
            'リセット
            minuscount = 1
            minusstopen = op2
            minusstclose = cl2
            if minusstopen = "" then
                minusstopen = op1
                minusstclose = cl1
            end if
            minusopengroup = CStr(minusstopen) + "|"
            minusclosegroup = CStr(minusstclose) + "|"
            '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
            minusopenarray = Split(minusopengroup,"|")
            minusclosearray = Split(minusclosegroup,"|")
            plusopenarray = Split(plusopengroup,"|")
            plusclosearray = Split(plusclosegroup,"|")

            if pluscount > subset_val-minuscount then
                if minusstopen - cl1 > minusstopen - plusopenarray(pluscount-(subset_val-minuscount)) then
                    answer = 0
                    if minuscount>0 then
                        For i=0 To Ubound(minusopenarray)-1
                            answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                        Next
                        answer = answer / Ubound(minusopenarray)
                    end if
                else
                    answer = 0
                    if pluscount>0 then
                        For i=pluscount-(subset_val-minuscount) To Ubound(plusopenarray)-1
                            answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                        Next
                        answer = answer / (Ubound(plusopenarray) - (pluscount-(subset_val-minuscount)))
                    end if
                end if
            else
                if minusstopen - cl1 > minusstopen - plusstopen then
                    answer = 0
                    if minuscount>0 then
                        For i=0 To Ubound(minusopenarray)-1
                            answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                        Next
                        answer = answer / Ubound(minusopenarray)
                    end if
                else
                    answer = 0
                    if pluscount>0 then
                        For i=0 To Ubound(plusopenarray)-1
                            answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                        Next
                        answer = answer / Ubound(plusopenarray)
                    end if
                end if
            end if
        end if
    '変化していない場合
    else
        '陽線
        if cl1>op1 then
            if op2 <> EMPTY then
                pluscount = pluscount + 1
                plusopengroup = plusopengroup + CStr(op2) + "|"
                plusclosegroup = plusclosegroup + CStr(cl2) + "|"
                '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
                minusopenarray = Split(minusopengroup,"|")
                minusclosearray = Split(minusclosegroup,"|")
                plusopenarray = Split(plusopengroup,"|")
                plusclosearray = Split(plusclosegroup,"|")

                if pluscount >= subset_val then
                    answer = 0
                    if pluscount>0 then
                        For i=pluscount-(subset_val) To Ubound(plusopenarray)-1
                            answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                        Next
                        answer = answer / subset_val
                    end if
                elseif minuscount > subset_val-pluscount then
                    if minusopenarray(minuscount-(subset_val-pluscount)) - plusstopen > cl1 - plusstopen then
                        answer = 0
                        if minuscount>0 then
                            For i=minuscount-(subset_val-pluscount) To Ubound(minusopenarray)-1
                                answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                            Next
                            answer = answer / (Ubound(minusopenarray) - (minuscount-(subset_val-pluscount)))
                        end if
                    else
                        answer = 0
                        if pluscount>0 then
                            For i=0 To Ubound(plusopenarray)-1
                                answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                            Next
                            answer = answer / Ubound(plusopenarray)
                        end if
                    end if
                else
                    if minusstopen - plusstopen > cl1 - plusstopen then
                        answer = 0
                        if minuscount>0 then
                            For i=0 To Ubound(minusopenarray)-1
                                answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                            Next
                            answer = answer / Ubound(minusopenarray)
                        end if
                    else
                        answer = 0
                        if pluscount>0 then
                            For i=0 To Ubound(plusopenarray)-1
                                answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                            Next
                            answer = answer / Ubound(plusopenarray)
                        end if
                    end if
                end if
            end if
        '陰線
        else
            if open1 <> EMPTY then
                minuscount = minuscount + 1
                minusopengroup = minusopengroup + CStr(op2) + "|"
                minusclosegroup = minusclosegroup + CStr(cl2) + "|"
                '陰線の連続側の価格変化幅と陽線の連続側の価格変化幅の比較
                minusopenarray = Split(minusopengroup,"|")
                minusclosearray = Split(minusclosegroup,"|")
                plusopenarray = Split(plusopengroup,"|")
                plusclosearray = Split(plusclosegroup,"|")

                if minuscount >= subset_val then
                    answer = 0
                    if minuscount>0 then
                        For i=minuscount-(subset_val) To Ubound(minusopenarray)-1
                            answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                        Next
                        answer = answer / subset_val
                    end if
                elseif pluscount > subset_val-minuscount then
                    if minusstopen - cl1 > minusstopen - plusopenarray(pluscount-(subset_val-minuscount)) then
                        answer = 0
                        if minuscount>0 then
                            For i=0 To Ubound(minusopenarray)-1
                                answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                            Next
                            answer = answer / Ubound(minusopenarray)
                        end if
                    else
                        answer = 0
                        if pluscount>0 then
                            For i=pluscount-(subset_val-minuscount) To Ubound(plusopenarray)-1
                                answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                            Next
                            answer = answer / (Ubound(plusopenarray) - (pluscount-(subset_val-minuscount)))
                        end if
                    end if
                else
                    if minusstopen - cl1 > minusstopen - plusstopen then
                        answer = 0
                        if minuscount>0 then
                            For i=0 To Ubound(minusopenarray)-1
                                answer = answer + Abs(CDbl(minusopenarray(i)) - CDbl(minusclosearray(i)))
                            Next
                            answer = answer / Ubound(minusopenarray)
                        end if
                    else
                        answer = 0
                        if pluscount>0 then
                            For i=0 To Ubound(plusopenarray)-1
                                answer = answer + Abs(CDbl(plusopenarray(i)) - CDbl(plusclosearray(i)))
                            Next
                            answer = answer / Ubound(plusopenarray)
                        end if
                    end if
                end if
            end if
        end if
    end if
    if answer = EMPTY or answer = "" then
        answer = 0
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusCountCol) = pluscount
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusCountCol) = minuscount
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusStartOpenCol) = plusstopen
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusStartCloseCol) = plusstclose
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusStartOpenCol) = minusstopen
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusStartCloseCol) = minusstclose
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusOpenGroupCol) = plusopengroup
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariablePlusCloseGroupCol) = plusclosegroup
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusOpenGroupCol) = minusopengroup
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableMinusCloseGroupCol) = minusclosegroup
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOpen0Col) = open0
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOpen1Col) = open1
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableOp1Col) = op1
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableCl1Col) = cl1
        hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableAnswerCol) = answer
    elseif writeflag = writeflag_off then
        answer = hold(periodnum, setrownum, pairnum, AverageRousokuIkiKaeriVariableAnswerCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　AverageHeiken関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionAverageHeiken( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator1_saki, price1_saki, _
    indicator1_ssaki, price1_ssaki, _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionAverageHeiken

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_val : subset_val = 0

'各値を取得する
    Dim holdcountnow : holdcountnow = hold(periodnum, setrownum, pairnum, AverageHeikenHoldCountNowCol)
    Dim holdcountpre : holdcountpre = hold(periodnum, setrownum, pairnum, AverageHeikenHoldCountPreCol)
    Dim holdsumnow : holdsumnow = hold(periodnum, setrownum, pairnum, AverageHeikenHoldSumNowCol)
    Dim holdsumpre : holdsumpre = hold(periodnum, setrownum, pairnum, AverageHeikenHoldSumPreCol)
    Dim answernow : answernow = 0
    Dim answerpre : answerpre = 0
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, AverageHeikenHoldVnow1Col)
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, AverageHeikenHoldVnow2Col)
    Dim vppre1 : vppre1 = hold(periodnum, setrownum, pairnum, AverageHeikenHoldVpre1Col)
    Dim vppre2 : vppre2 = hold(periodnum, setrownum, pairnum, AverageHeikenHoldVpre2Col)

    if holdcountnow = EMPTY then
        holdcountnow = 0
    end if
    if holdcountpre = EMPTY then
        holdcountpre = 0
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    subset_val = tmp_set(inSetSubSettingCol)

    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

'出力用の値取得
    Dim tmp_asi1 : tmp_asi1 = Split(tmp_set(inSetAsi1Col),"|")
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name1 = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                end if
            end if
            If CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name2 = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            end if
        end if
    Next

    For i = 1 To UBound(indicator1_saki, 1)
        '信号名が合致
        tmp_indi = Split(indicator1_saki(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name1 = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                end if
            end if
            If CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name2 = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            end if
        end if
    Next

    For i = 1 To UBound(indicator1_ssaki, 1)
        '信号名が合致
        tmp_indi = Split(indicator1_ssaki(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name1 = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                end if
            end if
            If CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If name2 = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            end if
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    Dim tmp_vnow1 : tmp_vnow1 = vnow1
    Dim tmp_vnow2 : tmp_vnow2 = vnow2
    Dim tmp_vpre1 : tmp_vpre1 = vpre1
    Dim tmp_vpre2 : tmp_vpre2 = vpre2
    if InStr(subset_val,"Pre1")>0 then
        tmp_vnow1 = vpre1
        tmp_vpre1 = vppre1
    end if
    if InStr(subset_val,"Pre2")>0 then
        tmp_vnow2 = vpre2
        tmp_vpre2 = vppre2
    end if

    '値の積算
    '転換したとき
    if (CDbl(tmp_vnow1)-CDbl(tmp_vnow2)) * (CDbl(tmp_vpre1)-CDbl(tmp_vpre2)) < 0 then
        holdcountpre = holdcountnow
        holdcountnow = 1
        holdsumpre = holdsumnow
        holdsumnow = CDbl(tmp_vnow2)-CDbl(tmp_vnow1)
    '転換していないとき
    else
        holdsumnow = CDbl(holdsumnow) + CDbl(tmp_vnow2)-CDbl(tmp_vnow1)
        holdcountnow = CDbl(holdcountnow) + 1
    end if
    
    '平均値の算出
    if CDbl(holdcountnow) > 0 then
        answernow = CDbl(holdsumnow) / CDbl(holdcountnow)
    end if
    if CDbl(holdcountpre) > 0 then
        answerpre = CDbl(holdsumpre) / CDbl(holdcountpre)
    end if
    
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldCountNowCol) = holdcountnow
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldCountPreCol) = holdcountpre
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldSumNowCol) = holdsumnow
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldSumPreCol) = holdsumpre
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldVnow1Col) = vnow1
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldVnow2Col) = vnow2
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldVpre1Col) = vpre1
        hold(periodnum, setrownum, pairnum, AverageHeikenHoldVpre2Col) = vpre2
        hold(periodnum, setrownum, pairnum, AverageHeikenAnswerNowCol) = answernow
        hold(periodnum, setrownum, pairnum, AverageHeikenAnswerPreCol) = answerpre
    elseif writeflag = writeflag_off then
        answernow = hold(periodnum, setrownum, pairnum, AverageHeikenAnswerNowCol)
        answerpre = hold(periodnum, setrownum, pairnum, AverageHeikenAnswerPreCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answernow)
                Case 2
                    value = CStr(answerpre)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　FractalAnaume関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionFractalAnaume( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionFractalAnaume

'ファイル出力時に使用する変数
    Dim indi_day 
    Dim indi_time 
    Dim tmp_indi_day
    Dim tmp_indi_time
    Dim pips_filter
    pips_filter = 1
    Dim subset_val : subset_val = 0

'各値を取得する
    Dim fractal_flag : fractal_flag = hold(periodnum, setrownum, pairnum, FractalAnaumeFractalFlagCol)
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vnow3 : vnow3 = 0
    Dim vnow4 : vnow4 = 0
    Dim high : high = 0
    Dim low : low = 0
    Dim answer1 : answer1 = 0
    Dim answer2 : answer2 = 0

    if holdcount = EMPTY then
        holdcount = 0
    end if

'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")

    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    Dim tmp_name1 : tmp_name1 = Split(name1,"|")
    Dim tmp_name2 : tmp_name2 = Split(name2,"|")

    '価格の更新
    Dim price_row: price_row = inPriceHighRow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    high = tmp_price(inPricePriceCol)
    price_row = inPriceLowRow
    tmp_price = Split(price1(price_row), ",")
    low = tmp_price(inPricePriceCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_name1(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
                If tmp_name1(1) = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_name2(0) = tmp_indi(inIndiIDCol) Then
                    vnow3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
                If tmp_name2(1) = tmp_indi(inIndiIDCol) Then
                    vnow4 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    '各計算
    '上フラクタル状態
    if fractal_flag = 2 then
        'フラクタル同時成立
        if CDbl(vnow1) <> 0 and CDbl(vnow2) <> 0 then
            'ペアの組み合わせ的に同時成立後の状態は上フラクタル状態
            fractal_flag = 2
        '上フラクタル発生
        elseif CDbl(vnow1) <> 0 then
            '平均足上（フラクタルの穴埋め）
            if CDbl(vnow3) < CDbl(vnow4) then
                answer1 = low
                fractal_flag = 1
            '平均足下（フラクタル成立の消込）
            elseif CDbl(vnow3) > CDbl(vnow4) then
'                answer2 = -high
'                fractal_flag = 2
            end if
        '下フラクタル発生
        elseif CDbl(vnow2) <> 0 then
            'フラクタル成立
            fractal_flag = 1
        '発生なし
        else
            '平均足上（フラクタルの穴埋め）
            if CDbl(vnow3) < CDbl(vnow4) then
                answer1 = low
                fractal_flag = 1
            end if
        end if
    '下フラクタル状態
    elseif fractal_flag = 1 then
        'フラクタル同時成立
        if CDbl(vnow1) <> 0 and CDbl(vnow2) <> 0 then
            'ペアの組み合わせ的に同時成立後の状態は下フラクタル状態
            fractal_flag = 1
        '上フラクタル発生
        elseif CDbl(vnow1) <> 0 then
            'フラクタル成立
            fractal_flag = 2
        '下フラクタル発生
        elseif CDbl(vnow2) <> 0 then
            '平均足上（フラクタル成立の消込）
            if CDbl(vnow3) < CDbl(vnow4) then
'                answer1 = -low
'                fractal_flag = 1
            '平均足下（フラクタルの穴埋め）
            elseif CDbl(vnow3) > CDbl(vnow4) then
                answer2 = high
                fractal_flag = 2
            end if
        '発生なし
        else
            '平均足下（フラクタルの穴埋め）
            if CDbl(vnow3) > CDbl(vnow4) then
                answer2 = high
                fractal_flag = 2
            end if
        end if
    '状態保持なし
    else
        'フラクタル上発生
        if CDbl(vnow1) <> 0 then
            fractal_flag = 2
        'フラクタル下発生
        elseif CDbl(vnow2) <> 0 then
            fractal_flag = 1
        end if
        '発生なし
    end if


'    '上フラクタルが成立している場合、保持する
'    if CDbl(vnow1) <> 0 then
'        '進行方向（平均足の方向性）が下かつ連続上フラクタルのときは、フラクタルを出さないタイミングとして、信号を出力する
'        if CDbl(vnow3) > CDbl(vnow4) and fractal_flag = 2 then
'            answer2 = -high
'        else
'            fractal_flag = 2
'        end if
'    end if
'    '下フラクタルが成立している場合、保持する
'    if CDbl(vnow2) <> 0 then
'        '進行方向（平均足の方向性）が上かつ連続下フラクタルのときは、フラクタルを出さないタイミングとして、信号を出力する
'        if CDbl(vnow3) < CDbl(vnow4) and fractal_flag = 1 then
'            answer1 = -low
'        else
'            fractal_flag = 1
'        end if
'    end if

'    '平均足の転換が生じている場合、フラクタルの保持内容に応じて、信号を出力する
'    if CDbl(vnow3) < CDbl(vnow4) and fractal_flag = 2 then
'        fractal_flag = 1
'        answer1 = low
'    end if
'    if CDbl(vnow3) > CDbl(vnow4) and fractal_flag = 1 then
'        fractal_flag = 2
'        answer2 = high
'    end if
'    
'    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, FractalAnaumeAnswer1Col) = answer1
        hold(periodnum, setrownum, pairnum, FractalAnaumeAnswer2Col) = answer2
        hold(periodnum, setrownum, pairnum, FractalAnaumeFractalFlagCol) = fractal_flag
    elseif writeflag = writeflag_off then
        answer1 = hold(periodnum, setrownum, pairnum, FractalAnaumeAnswer1Col)
        answer2 = hold(periodnum, setrownum, pairnum, FractalAnaumeAnswer2Col)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer2)
                Case 2
                    value = CStr(answer1)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if
            if value = "" then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

end function
'***********************************************************
' 機能   :　JisseiTraceTime関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceTime( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceTime

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeOValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeOValue2Col)
    Dim cnow1 : cnow1 = 0
    Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeCValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceTimePriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakValueCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

        if name2 <> "" and name2 <> "0" then
            dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe2, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
            onow2 = holdhe2(periodnum, setrownum, pairnum, HeikenOpenCol)
        end if
    end if

    if name2 <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)


    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preminipeakdate = minipeakdate
            preminipeaktime = minipeaktime
            preminipeakprice = minipeakprice
            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数


        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            if peakvalue > minipeakvalue then
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2

            if minipeakvalue > peakvalue then
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
        '下増のとき
        else
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if

        'Osの進行方向
        if CDbl(cnow1-cpre1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1-cpre1)<0 then
            tenkandirect = 2
        end if

        answer1 = (Ore0 - Bnow)
        answer2 = (Ore0_min - Bnow_min)


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeAnsCol) = answer1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeAns2Col) = answer2
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeOValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeCValueCol) = cnow1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimePreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeOgr0Col) = Ore0
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeOgr1Col) = Bnow
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMinOre0Col) = Ore0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeMinBnowCol) = Bnow_min
    elseif writeflag = writeflag_off then
        Ore0 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeOre0Col)
        Bnow = hold(periodnum, setrownum, pairnum, JisseiTraceTimeBnowCol)
        Ore0_min = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMinOre0Col)
        Bnow_min = hold(periodnum, setrownum, pairnum, JisseiTraceTimeMinBnowCol)
        answer1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeAnsCol)
        answer2 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeAns2Col)
    End If

    ans = Ore0 - Bnow

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer1)
                    if subset_flag = "MINI" then
                        value = CStr(answer2)
                    end if
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JisseiTraceTimeHendou関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJisseiTraceTimeHendou( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, ByRef holdhe2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJisseiTraceTimeHendou

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id1
    Dim indi_id2
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1
    Dim subset_flag : subset_flag = ""

    Dim answer1: answer1 = 0
    Dim answer2: answer2 = 0

'各値を取得する
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOValueCol)
    Dim onow2 : onow2 = 0
    Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOValue2Col)
    Dim cnow1 : cnow1 = 0
    Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouCValueCol)
    Dim pnow : pnow = 0
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPriceCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanTimeCol)
    Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanPriceCol)
    Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanValueCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakValueCol)
    Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakPriceCol)
    Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakDateCol)
    Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakTimeCol)
    Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakPriceCol)
    Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakValueCol)
    Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanDateCol)
    Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanTimeCol)
    Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanPriceCol)
    Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanValueCol)
    Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakDateCol)
    Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakTimeCol)
    Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakValueCol)
    Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakPriceCol)
    Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakDateCol)
    Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakTimeCol)
    Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakPriceCol)
    Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakValueCol)
    
'出力用の値取得
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim name1 : name1 = tmp_set(inSetName1Col) 
    Dim name2 : name2 = tmp_set(inSetName2Col) 

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                ppre = pnow
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If name1 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    dim tmp_indi_ids: tmp_indi_ids = Split(indi_id,"|")
                    indi_id1 = tmp_indi_ids(0)
                    indi_id2 = tmp_indi_ids(1)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If

            elseIf name2 = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

        if name2 <> "" and name2 <> "0" then
            dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe2, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
            onow2 = holdhe2(periodnum, setrownum, pairnum, HeikenOpenCol)
        end if
    end if

    if name2 <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)


    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
            pretenkandate = tenkandate
            pretenkantime = tenkantime 
            pretenkanprice = tenkanprice
            pretenkanvalue = tenkanvalue
            prepeakdate = peakdate
            prepeaktime = peaktime
            prepeakvalue = peakvalue
            prepeakprice = peakprice
            preminipeakdate = minipeakdate
            preminipeaktime = minipeaktime
            preminipeakprice = minipeakprice
            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                   'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Owd : Owd = 0'山のサイズ（基準とする値）
        Dim Omv : Omv = 0 '現在までの山の進行量


        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Owd = tenkanvalue - prepeakvalue
            Omv = cnow1 - tenkanvalue
            if peakvalue > minipeakvalue then
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
                Owd = tenkanvalue - prepeakvalue
                Omv = cnow1 - tenkanvalue
            else
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Owd = peakvalue - tenkanvalue
            Omv = peakvalue - cnow1
        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2

            Owd = prepeakvalue - tenkanvalue
            Omv = tenkanvalue - cnow1

            if minipeakvalue > peakvalue then
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
        '下増のとき
        else
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2

            Owd = tenkanvalue - peakvalue
            Omv = cnow1 - peakvalue
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if

        'Osの進行方向
        if CDbl(cnow1-cpre1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1-cpre1)<0 then
            tenkandirect = 2
        end if

        if Owd = 0 then
            answer1 = 0
        else
            answer1 = (Owd - Omv) / (Owd / Ore0)
        end if
        
        answer2 = (Owd - Omv) / pnow


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouAnsCol) = answer1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouAns2Col) = answer2
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOValue2Col) = onow2
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouCValueCol) = cnow1
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPriceCol) = pnow
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanDirectCol) = tenkandirect
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanValueCol) = tenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouTenkanPriceCol) = tenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPeakPriceCol) = peakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakPriceCol) = minipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakValueCol) = minipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakDateCol) = minipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMiniPeakTimeCol) = minipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanDateCol) = pretenkandate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanTimeCol) = pretenkantime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanValueCol) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreTenkanPriceCol) = pretenkanprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakDateCol) = prepeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakTimeCol) = prepeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakValueCol) = prepeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPrePeakPriceCol) = prepeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakPriceCol) = preminipeakprice
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakValueCol) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakDateCol) = preminipeakdate
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouPreMiniPeakTimeCol) = preminipeaktime
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOgr0Col) = Ore0
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOgr1Col) = Bnow
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMinOre0Col) = Ore0_min
        hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMinBnowCol) = Bnow_min
    elseif writeflag = writeflag_off then
        Ore0 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouOre0Col)
        Bnow = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouBnowCol)
        Ore0_min = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMinOre0Col)
        Bnow_min = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouMinBnowCol)
        answer1 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouAnsCol)
        answer2 = hold(periodnum, setrownum, pairnum, JisseiTraceTimeHendouAns2Col)
    End If

    ans = answer1

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        value = ans
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = CStr(answer1)
                Case 2
                    value = CStr(answer2)
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroiSabun2関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroiSabun2( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, ByRef holdhes2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSabun2

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")
    Dim names2 : names2 = Split(tmp_set(inSetName2Col),"|")
    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdPredictSoroiSabun2ColNum, Ubound(names)+1)
    end if
    if ubound(holdhes,5) < Ubound(names)+1 then
        Redim preserve holdhes(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if
    if ubound(holdhes2,5) < Ubound(names)+1 then
        Redim preserve holdhes2(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する

        Dim onow1 : onow1 = 0
        Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OValueCol, loop_name)
        Dim onow2 : onow2 = 0
        Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OValue2Col, loop_name)
        Dim cnow1 : cnow1 = 0
        Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2CValueCol, loop_name)
        Dim pnow : pnow = 0
        Dim ppre : ppre = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PriceCol, loop_name)
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
        Dim period : period=0
        Dim tenkandirect : tenkandirect=0
        Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanDateCol, loop_name)
        Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanTimeCol, loop_name)
        Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanPriceCol, loop_name)
        Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanValueCol, loop_name)
        Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakDateCol, loop_name)
        Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakTimeCol, loop_name)
        Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakValueCol, loop_name)
        Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakPriceCol, loop_name)
        Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakDateCol, loop_name)
        Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakTimeCol, loop_name)
        Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakPriceCol, loop_name)
        Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakValueCol, loop_name)
        Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanDateCol, loop_name)
        Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanTimeCol, loop_name)
        Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanPriceCol, loop_name)
        Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanValueCol, loop_name)
        Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakDateCol, loop_name)
        Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakTimeCol, loop_name)
        Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakValueCol, loop_name)
        Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakPriceCol, loop_name)
        Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakDateCol, loop_name)
        Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakTimeCol, loop_name)
        Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakPriceCol, loop_name)
        Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakValueCol, loop_name)
        Dim masssum : masssum = 0
        Dim masssumzg : masssumzg = 0
    
    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If names(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        Dim tmp_indi_id : tmp_indi_id = Split(tmp_set(inSetCodeCol),"|")
                        indi_id = tmp_indi_id(0)
                        indi_id2 = tmp_indi_id(1)
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if tmp_set(inSetSubSettingCol) = "PIPS" then
                            pips_filter = pips
                        end if
        '            End If
                end if
                if tmp_set(inSetName2Col) <> "" then
                    If names2(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
        '            End If
                    End If
                end if
            end if
        Next
    
    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '同逆を計算する(HeOsの計算)
        Dim hcode : hcode = tmp_set(inSetKairiCol)
        Dim hcodes : hcodes = Split(hcode, "|")
        Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
        if hmode <> "" then
            Dim holdhe, holdhe2
            Redim holdhe(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
            Redim holdhe2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
            for loop_he = 1 to holdHeikenColNum
                holdhe(periodnum,setrownum,pairnum,loop_he) = holdhes(periodnum, setrownum, pairnum, loop_he, loop_name)
                holdhe2(periodnum,setrownum,pairnum,loop_he) = holdhes2(periodnum, setrownum, pairnum, loop_he, loop_name)
            next
            
            dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(loop_name-1), names(loop_name-1), hmode, true)
            onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

            if tmp_set(inSetName2Col) <> "" then
                dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe2, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(loop_name-1+Ubound(names)+1), names2(loop_name-1), hmode, true)
                onow2 = holdhe2(periodnum, setrownum, pairnum, HeikenOpenCol)
            end if

            '保持用の配列へ値を格納
            for loop_he = 1 to holdHeikenColNum
                holdhes(periodnum, setrownum, pairnum, loop_he, loop_name) = holdhe(periodnum,setrownum,pairnum,loop_he)
                holdhes2(periodnum, setrownum, pairnum, loop_he, loop_name) = holdhe2(periodnum,setrownum,pairnum,loop_he)
            next

        end if


    if tmp_set(inSetName2Col) <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算i
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
'            pretenkandate = tenkandate
'            pretenkantime = tenkantime 
'            pretenkanprice = tenkanprice
'            pretenkanvalue = tenkanvalue
'            prepeakdate = peakdate
'            prepeaktime = peaktime
'            prepeakvalue = peakvalue
'            prepeakprice = peakprice
'            preminipeakdate = minipeakdate
'            preminipeaktime = minipeaktime
'            preminipeakprice = minipeakprice
'            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = cnow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = cnow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = cnow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - cnow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            Owd_min = preminipeakvalue - prepeakvalue
            Pwd_min = preminipeakprice - prepeakprice
            Omv_min = peakvalue - cnow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - cnow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - cnow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - cnow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = cnow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = cnow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr2 = CDbl(Pgr2)*CDbl(OPratio)

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr2_min = CDbl(Pgr2_min)*CDbl(OPratio_min)

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv
        OPzn = Pzn*OPratio

        if OPratio * Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if

'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '下増のとき
'        else
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        end if

        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min*Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '下増のとき
'        else
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(cnow1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1)<0 then
            tenkandirect = 2
        end if

        if subset_flag = "MINI" then
            if Ore2_min = 10000 or Ore2_min = 0 then
                masssum = 0
                masssumzg = 0
            else
                masssum = (1 - CDbl(Ore1_min) / CDbl(Ore2_min)) * CDbl(minipeakvalue)
                masssumzg = (1 - CDbl(Ore1_min) / CDbl(Ore2_min))
            end if

            '進行方向がマイナスの場合、マイナスをかける
            if onow1 * minipeakvalue < 0 then
                masssum = - masssum
            end if
            if (onow1-opre1) < 0 then
                masssumzg = - masssumzg
            end if
        else
            if Ore2 = 10000 or Ore2 = 0 then
                masssum = 0
                masssumzg = 0
            else
                masssum = (1 - CDbl(Ore1) / CDbl(Ore2)) * CDbl(peakvalue)
                masssumzg = (1 - CDbl(Ore1) / CDbl(Ore2))
            end if

            '進行方向がマイナスの場合、マイナスをかける
            if onow1 * peakvalue < 0 then
                masssum = - masssum
            end if
            if (onow1-opre1) < 0 then
                masssumzg = - masssumzg
            end if
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2AnsCol, loop_name) = 0
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OValueCol, loop_name) = onow1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OValue2Col, loop_name) = onow2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2CValueCol, loop_name) = cnow1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PriceCol, loop_name) = pnow
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanDirectCol, loop_name) = tenkandirect
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanDateCol, loop_name) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanTimeCol, loop_name) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanValueCol, loop_name) = tenkanvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanPriceCol, loop_name) = tenkanprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakDateCol, loop_name) = peakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakTimeCol, loop_name) = peaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakValueCol, loop_name) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakPriceCol, loop_name) = peakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakPriceCol, loop_name) = minipeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakValueCol, loop_name) = minipeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakDateCol, loop_name) = minipeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MiniPeakTimeCol, loop_name) = minipeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanDateCol, loop_name) = pretenkandate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanTimeCol, loop_name) = pretenkantime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanValueCol, loop_name) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreTenkanPriceCol, loop_name) = pretenkanprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakDateCol, loop_name) = prepeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakTimeCol, loop_name) = prepeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakValueCol, loop_name) = prepeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PrePeakPriceCol, loop_name) = prepeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakPriceCol, loop_name) = preminipeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakValueCol, loop_name) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakDateCol, loop_name) = preminipeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PreMiniPeakTimeCol, loop_name) = preminipeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore1Col, loop_name) = Ore1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore2Col, loop_name) = Ore2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Pgr2Col, loop_name) = Pgr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OPgr2Col, loop_name) = OPgr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OPznCol, loop_name) = OPzn
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ogr0Col, loop_name) = Ogr0
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ogr2Col, loop_name) = Ogr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OwdCol, loop_name) = Owd
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OmvCol, loop_name) = Omv
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOre1Col, loop_name) = Ore1_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOre2Col, loop_name) = Ore2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinPgr2Col, loop_name) = Pgr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOPgr2Col, loop_name) = OPgr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOPznCol, loop_name) = OPzn_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOgr0Col, loop_name) = Ogr0_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOgr2Col, loop_name) = Ogr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOwdCol, loop_name) = Owd_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOmvCol, loop_name) = Omv_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, loop_name) = masssum
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumZGCol, loop_name) = masssumzg
    elseif writeflag = writeflag_off then
        Ore1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore1Col, loop_name)
        Ore2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore2Col, loop_name)
        Pgr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Pgr2Col, loop_name)
        OPgr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OPgr2Col, loop_name)
        OPzn = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OPznCol, loop_name)
        Ogr0 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ogr0Col, loop_name)
        Ogr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ogr2Col, loop_name)
        Owd = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OwdCol, loop_name)
        Omv = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OmvCol, loop_name)
        Ore1_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOre1Col, loop_name)
        Ore2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOre2Col, loop_name)
        Pgr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinPgr2Col, loop_name)
        OPgr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOPgr2Col, loop_name)
        OPzn_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOPznCol, loop_name)
        Ogr0_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOgr0Col, loop_name)
        Ogr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOgr2Col, loop_name)
        Owd_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOwdCol, loop_name)
        Omv_min = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MinOmvCol, loop_name)
        masssum = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, loop_name)
        masssumzg = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumZGCol, loop_name)
    End If



    end if

    next    
    
    Dim check_str

    '周期間合算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    mass_sum = 0
    mass_sumzg = 0
    for i=1 to ubound(names)+1
        mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, i)
        mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumZGCol, i)
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore1Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Ore2Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakValueCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2Pgr2Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OwdCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2OmvCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakPriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanPriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2PeakDateCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabun2TenkanDateCol, i))
    next
    Dim mass_pre : mass_pre = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, 0)

    if mass_sum>0 then
        ans = 1
    elseif mass_sum<0 then
        ans = -1
    elseif mass_pre>0 then
        ans = 1
    elseif mass_pre<0 then
        ans = -1
    else
        ans = 0
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumZGCol, 0) = mass_sumzg
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun2AnsCol, 0) = ans
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumCol, 0)
        mass_sumzg = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2MassSumZGCol, 0)
        ans = hold(periodnum, setrownum, pairnum, PredictSoroiSabun2AnsCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = mass_sum
                Case 2
                    value = mass_sumzg
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroiSabunPairs関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroiSabunPairs( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhes11, ByRef holdhes12, _
    ByRef holdhes21, ByRef holdhes22, _
    ByRef holdhes31, ByRef holdhes32, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSabunPairs

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim subset_flag: subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")
    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdPredictSoroiSabunPairsColNum, Ubound(names)+1)
    end if

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する

        Dim onow11 : onow11 = 0
        Dim opre11 : opre11 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol11, loop_name)
        Dim onow21 : onow21 = 0
        Dim opre21 : opre21 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol21, loop_name)
        Dim onow31 : onow31 = 0
        Dim opre31 : opre31 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol31, loop_name)
        Dim pnow1 : pnow1 = 0
        Dim ppre1 : ppre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol1, loop_name)
        Dim pnow2 : pnow2 = 0
        Dim ppre2 : ppre2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol2, loop_name)
        Dim pnow3 : pnow3 = 0
        Dim ppre3 : ppre3 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol3, loop_name)
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
        Dim peakvalue1 : peakvalue1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol1, loop_name)
        Dim peakvalue2 : peakvalue2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol2, loop_name)
        Dim peakvalue3 : peakvalue3 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol3, loop_name)
        Dim masssum1 : masssum1 = 0
        Dim masssumzg1 : masssumzg1 = 0
        Dim masssum2 : masssum2 = 0
        Dim masssumzg2 : masssumzg2 = 0
        Dim masssum3 : masssum3 = 0
        Dim masssumzg3 : masssumzg3 = 0
        Dim masssum : masssum = 0
        Dim masssumzg : masssumzg = 0
    
        Dim Ore1_1 : Ore1_1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_1 : Ore2_1 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_2 : Ore1_2 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_2 : Ore2_2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_3 : Ore1_3 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_3 : Ore2_3 = 0 '現存Osの残量をOgr2で割った値

    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow1 = tmp_price(inPricePriceCol)
    Dim tmp_price2: tmp_price2 = Split(price2(price_row), ",")
    pnow2 = tmp_price2(inPricePriceCol)
    Dim tmp_price3: tmp_price3 = Split(price3(price_row), ",")
    pnow3 = tmp_price3(inPricePriceCol)

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            Dim tmp_indi2 : tmp_indi2 = Split(indicator2(i), ",")
            Dim tmp_indi3 : tmp_indi3 = Split(indicator3(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                Dim tmp_names : tmp_names = Split(names(loop_name-1),"_")
                If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    Ore1_1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    Ore1_2 = GetArrayValueZero(tmp_indi2,inIndiPriceCol)
                    Ore1_3 = GetArrayValueZero(tmp_indi3,inIndiPriceCol)
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    Ore2_1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    Ore2_2 = GetArrayValueZero(tmp_indi2,inIndiPriceCol)
                    Ore2_3 = GetArrayValueZero(tmp_indi3,inIndiPriceCol)
                elseIf tmp_names(2) = tmp_indi(inIndiIDCol) Then
                    peakvalue1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    peakvalue2 = GetArrayValueZero(tmp_indi2,inIndiPriceCol)
                    peakvalue3 = GetArrayValueZero(tmp_indi3,inIndiPriceCol)
                elseIf tmp_names(3) = tmp_indi(inIndiIDCol) Then
                    onow11 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    onow21 = GetArrayValueZero(tmp_indi2,inIndiPriceCol)
                    onow31 = GetArrayValueZero(tmp_indi3,inIndiPriceCol)
                end if
            end if
        Next
    
    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        if Ore2_1 = 10000 or Ore2_1 = 0 then
            masssum1 = 0
            masssumzg1 = 0
        else
            masssum1 = (1 - CDbl(Ore1_1) / CDbl(Ore2_1)) * CDbl(peakvalue1) / pnow1
            masssumzg1 = (1 - CDbl(Ore1_1) / CDbl(Ore2_1))
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if onow11 * (pnow1 - ppre1) < 0 then
            masssum1 = - masssum1
        end if
        if (onow11 - opre11) * (pnow1-ppre1) < 0 then
            masssumzg1 = - masssumzg1
        end if


    '-----各計算i(pair2)-----

        if Ore2_2 = 10000 or Ore2_2 = 0 then
            masssum2 = 0
            masssumzg2 = 0
        else
            masssum2 = (1 - CDbl(Ore1_2) / CDbl(Ore2_2)) * CDbl(peakvalue2) / pnow2
            masssumzg2 = (1 - CDbl(Ore1_2) / CDbl(Ore2_2))
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if onow21 * (pnow2 - ppre2) < 0 then
            masssum2 = - masssum2
        end if
        if (onow21 - opre21) * (pnow2-ppre2) < 0 then
            masssumzg2 = - masssumzg2
        end if



    '-----各計算i(pair3)-----

        if Ore2_3 = 10000 or Ore2_3 = 0 then
            masssum3 = 0
            masssumzg3 = 0
        else
            masssum3 = (1 - CDbl(Ore1_3) / CDbl(Ore2_3)) * CDbl(peakvalue3) / pnow3
            masssumzg3 = (1 - CDbl(Ore1_3) / CDbl(Ore2_3))
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if onow31 * (pnow3 - ppre3) < 0 then
            masssum3 = - masssum3
        end if
        if (onow31 - opre31) * (pnow3-ppre3) < 0 then
            masssumzg3 = - masssumzg3
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsAnsCol, loop_name) = 0
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol11, loop_name) = onow11
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol1, loop_name) = pnow1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, loop_name) = masssum1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol1, loop_name) = masssumzg1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col1, loop_name) = Ore1_1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col1, loop_name) = Ore2_1
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol1, loop_name) = peakvalue1

        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol21, loop_name) = onow21
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol2, loop_name) = pnow2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, loop_name) = masssum2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol2, loop_name) = masssumzg2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col2, loop_name) = Ore1_2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col2, loop_name) = Ore2_2
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol2, loop_name) = peakvalue2

        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol31, loop_name) = onow31
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol3, loop_name) = pnow3
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, loop_name) = masssum3
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol3, loop_name) = masssumzg3
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col3, loop_name) = Ore1_3
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col3, loop_name) = Ore2_3
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol3, loop_name) = peakvalue3
    elseif writeflag = writeflag_off then
        masssum1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, loop_name)
        masssumzg1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol1, loop_name)
        masssum2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, loop_name)
        masssumzg2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol2, loop_name)
        masssum3 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, loop_name)
        masssumzg3 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol3, loop_name)
    End If

    end if

'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(Ore1_1)
'        check_str = check_str +"|" + CStr(Ore2_1)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(peakvalue1)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(onow11)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")

'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(Ore1_2)
'        check_str = check_str +"|" + CStr(Ore2_2)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(peakvalue2)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(onow21)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")

'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(Ore1_3)
'        check_str = check_str +"|" + CStr(Ore2_3)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(peakvalue3)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr(onow31)
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
'        check_str = check_str +"|" + CStr("")
    next    
    
    Dim check_str

    '周期間合算
    mass_sum = 0
    mass_sumzg = 0
    for i=1 to ubound(names)+1
        if pair1 = 1 then
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, i)
            mass_sum = mass_sum - hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, i)
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol1, i)
            mass_sumzg = mass_sumzg - hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol2, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol3, i)
        elseif pair1 = 2 then
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, i)
            mass_sum = mass_sum - hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, i)
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol1, i)
            mass_sumzg = mass_sumzg - hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol2, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol3, i)
        elseif pair1 = 3 then
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, i)
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, i)
            mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol1, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol2, i)
            mass_sumzg = mass_sumzg + hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol3, i)
        end if

        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPgr2Col1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOwdCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOmvCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakDateCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakPriceCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanDateCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanValueCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanPriceCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol11, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol12, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsCValueCol11, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOznCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsBnowCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOPratioCol1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOgr1Col1, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPmvCol1, i))

        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPgr2Col2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOwdCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOmvCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakDateCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakPriceCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanDateCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanValueCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanPriceCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol21, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol22, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsCValueCol21, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOznCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsBnowCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOPratioCol2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOgr1Col2, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPmvCol2, i))

        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre1Col3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOre2Col3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPgr2Col3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOwdCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOmvCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakDateCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakValueCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPeakPriceCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanDateCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanValueCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsTenkanPriceCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol31, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOValueCol32, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsCValueCol31, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPriceCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOznCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsBnowCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOPratioCol3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsOgr1Col3, i))
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsPmvCol3, i))
    next

    ans = mass_sum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol, 0) = mass_sumzg
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsAnsCol, 0) = ans
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumCol, 0)
        mass_sumzg = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsMassSumZGCol, 0)
        ans = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPairsAnsCol, 0)
    End If
    

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = mass_sum

'                    value = check_str
                Case 2
                    value = mass_sumzg
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroisetsuzoku3関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroisetsuzoku3( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, ByRef holdhes2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSetsuzoku3

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")

    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdPredictSoroiSabun3ColNum, Ubound(names)+1)
    end if

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する

        Dim onow1 : onow1 = 0
        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有

    Dim tmp_names : tmp_names = Split(names(loop_name-1),"_")    

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    Owd = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names(2) = tmp_indi(inIndiIDCol) Then
                    Omv = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            end if
        Next
    
    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
        if CDbl(Owd) - CDbl(Omv) < 0 then
            masssum = loop_name
        else
            masssum = 0
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if CDbl(onow1) < 0 then
            masssum = - masssum
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3OValueCol, loop_name) = onow1
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3OwdCol, loop_name) = Owd
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3OmvCol, loop_name) = Omv
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, loop_name) = masssum
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumZGCol, loop_name) = masssumzg
    End If

    end if

    next    
    
    Dim check_str

    '周期間合算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    mass_sum = 0
    for i=1 to ubound(names)+1
        Dim check_ans : check_ans = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, i)
        if CLng(check_ans) = i and CLng(mass_sum) >= i-1 then
            mass_sum = check_ans
        elseif CLng(check_ans) = -i and Clng(mass_sum) <= -(i-1)then
            mass_sum = check_ans
        end if
        
    next
    
    Dim mass_pre : mass_pre = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, 0)
    
    '１回前の状態を維持できるか確認
    if CLng(mass_pre) > 0 then
        check_ans = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, mass_pre)
        if CLng(check_ans) > 0 then
            '今回の単純合算よりも継続値のほうが接続範囲が大きい場合、置き換える
            if CLng(mass_sum) < CLng(check_ans) then
                mass_sum = check_ans
            end if
        end if
    elseif CLng(mass_pre) < 0 then
        check_ans = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, -mass_pre)
        if CLng(check_ans) < 0 then
            '今回の単純合算よりも継続値のほうが接続範囲が大きい場合、置き換える
            if CLng(mass_sum) > CLng(check_ans) then
                mass_sum = check_ans
            end if
        end if
    end if

    ans = mass_sum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3AnsCol, 0) = ans
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3MassSumCol, 0)
        ans = hold(periodnum, setrownum, pairnum, PredictSoroisetsuzoku3AnsCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = mass_sum
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroiSetsuzoku関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroiSetsuzoku( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, ByRef holdhes2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSetsuzoku

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")
    Dim names2 : names2 = Split(tmp_set(inSetName2Col),"|")
    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdPredictSoroiSetsuzokuColNum, Ubound(names)+1)
    end if
    if ubound(holdhes,5) < Ubound(names)+1 then
        Redim preserve holdhes(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if
    if ubound(holdhes2,5) < Ubound(names)+1 then
        Redim preserve holdhes2(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する

        Dim onow1 : onow1 = 0
        Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOValueCol, loop_name)
        Dim onow2 : onow2 = 0
        Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOValue2Col, loop_name)
        Dim cnow1 : cnow1 = 0
        Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuCValueCol, loop_name)
        Dim pnow : pnow = 0
        Dim ppre : ppre = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPriceCol, loop_name)
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
        Dim period : period=0
        Dim tenkandirect : tenkandirect=0
        Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanDateCol, loop_name)
        Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanTimeCol, loop_name)
        Dim tenkanprice : tenkanprice = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanPriceCol, loop_name)
        Dim tenkanvalue : tenkanvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanValueCol, loop_name)
        Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakDateCol, loop_name)
        Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakTimeCol, loop_name)
        Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakValueCol, loop_name)
        Dim peakprice : peakprice= hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakPriceCol, loop_name)
        Dim minipeakdate : minipeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakDateCol, loop_name)
        Dim minipeaktime : minipeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakTimeCol, loop_name)
        Dim minipeakprice : minipeakprice = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakPriceCol, loop_name)
        Dim minipeakvalue : minipeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakValueCol, loop_name)
        Dim pretenkandate : pretenkandate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanDateCol, loop_name)
        Dim pretenkantime : pretenkantime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanTimeCol, loop_name)
        Dim pretenkanprice : pretenkanprice = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanPriceCol, loop_name)
        Dim pretenkanvalue : pretenkanvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanValueCol, loop_name)
        Dim prepeakdate : prepeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakDateCol, loop_name)
        Dim prepeaktime : prepeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakTimeCol, loop_name)
        Dim prepeakvalue : prepeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakValueCol, loop_name)
        Dim prepeakprice : prepeakprice= hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakPriceCol, loop_name)
        Dim preminipeakdate : preminipeakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakDateCol, loop_name)
        Dim preminipeaktime : preminipeaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakTimeCol, loop_name)
        Dim preminipeakprice : preminipeakprice = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakPriceCol, loop_name)
        Dim preminipeakvalue : preminipeakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakValueCol, loop_name)
        Dim masssum : masssum = 0
        Dim masssumzg : masssumzg = 0
    
    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    pnow = tmp_price(inPricePriceCol)

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If names(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        Dim tmp_indi_id : tmp_indi_id = Split(tmp_set(inSetCodeCol),"|")
                        indi_id = tmp_indi_id(0)
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if tmp_set(inSetSubSettingCol) = "PIPS" then
                            pips_filter = pips
                        end if
        '            End If
                end if
                if tmp_set(inSetName2Col) <> "" then
                    If names2(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
        '            End If
                    End If
                end if
            end if
        Next
    
    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    '同逆を計算する(HeOsの計算)
        Dim hcode : hcode = tmp_set(inSetKairiCol)
        Dim hcodes : hcodes = Split(hcode, "|")
        Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
        if hmode <> "" then
            Dim holdhe, holdhe2
            Redim holdhe(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
            Redim holdhe2(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
            for loop_he = 1 to holdHeikenColNum
                holdhe(periodnum,setrownum,pairnum,loop_he) = holdhes(periodnum, setrownum, pairnum, loop_he, loop_name)
                holdhe2(periodnum,setrownum,pairnum,loop_he) = holdhes2(periodnum, setrownum, pairnum, loop_he, loop_name)
            next
            
            dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(loop_name-1), names(loop_name-1), hmode, true)
            onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)

            if tmp_set(inSetName2Col) <> "" then
                dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe2, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(loop_name-1+Ubound(names)+1), names2(loop_name-1), hmode, true)
                onow2 = holdhe2(periodnum, setrownum, pairnum, HeikenOpenCol)
            end if

            '保持用の配列へ値を格納
            for loop_he = 1 to holdHeikenColNum
                holdhes(periodnum, setrownum, pairnum, loop_he, loop_name) = holdhe(periodnum,setrownum,pairnum,loop_he)
                holdhes2(periodnum, setrownum, pairnum, loop_he, loop_name) = holdhe2(periodnum,setrownum,pairnum,loop_he)
            next

        end if


    if tmp_set(inSetName2Col) <> "" then
        cnow1 = (onow1 - opre1) - (onow2 - opre2)
    else
        cnow1 = onow1
    end if

    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '各計算i
        '転換している場合、値を更新する
        if CDbl(cnow1) * CDbl(cpre1) <= 0 then
'            pretenkandate = tenkandate
'            pretenkantime = tenkantime 
'            pretenkanprice = tenkanprice
'            pretenkanvalue = tenkanvalue
'            prepeakdate = peakdate
'            prepeaktime = peaktime
'            prepeakvalue = peakvalue
'            prepeakprice = peakprice
'            preminipeakdate = minipeakdate
'            preminipeaktime = minipeaktime
'            preminipeakprice = minipeakprice
'            preminipeakvalue = minipeakvalue

            if daymode = 1 then
                tenkandate = DateAdd("d", -asi, Nowdate)
                tenkantime = indi_time
            else
                tenkandate = DateAdd("n", -asi, Nowdate)
                tenkantime = DateAdd("n",-asi,indi_time)
            end if
'            tenkanprice = pnow
'            tenkanvalue = cnow1
            tenkanprice = ppre
            tenkanvalue = cpre1

            peakdate = Nowdate
            peaktime = indi_time 
            peakprice = pnow
            peakvalue = cnow1

            minipeakdate = Nowdate
            minipeaktime = indi_time
            minipeakprice = pnow
            minipeakvalue = cnow1
        else
            if CDbl(cnow1) >0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) > Cdbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            elseif CDbl(cnow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(cnow1) < CDbl(peakvalue) then
                    peakdate = Nowdate
                    peaktime = indi_time 
                    peakvalue = cnow1
                    peakprice = pnow

                    minipeakdate = Nowdate
                    minipeaktime = indi_time
                    minipeakprice = pnow
                    minipeakvalue = cnow1
                else
                    'ミニピーク値の更新の場合
                    if CDbl(cnow1) > CDbl(minipeakvalue) then
                        minipeakdate = Nowdate
                        minipeaktime = indi_time
                        minipeakprice = pnow
                        minipeakvalue = cnow1
                    end if
                end if
            end if
        end if
            

        Dim Owd : Owd = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd : Pwd = 0 '価格の振れ幅（基準100とする値)※マイナス、ゼロ有
        Dim Omv : Omv = 0 '直近の起点（転換、ピーク）からのOs変化量※マイナス、ゼロ有
        Dim Pmv : Pmv = 0 '直近の起点（転換、ピーク）からの価格変化量※マイナス、ゼロ有
        Dim Ore0 : Ore0 = 0'山の流れが終わるまでの本数（基準とする値）
        Dim Bnow : Bnow = 0 '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn : Ozn = 0 '現在のOsの残量
        Dim Pzn : Pzn = 0 '現在の価格の残量 ※マイナス、ゼロ有
        Dim OPratio : OPratio = 0 '価格変化量とOs変化量の比
        Dim OPzn : OPzn = 0 '現在のOs残量（価格ベース）
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値
        Dim Ore1_1 : Ore1_1 = 0 '現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値
        Dim Owd_min: Owd_min = 0 'Osの振れ幅（基準100とする値）
        Dim Pwd_min: Pwd_min = 0 '価格の振れ幅（基準100とする値)
        Dim Omv_min : Omv_min = 0 '直近の起点（転換、ピーク）からのOs変化量
        Dim Pmv_min : Pmv_min = 0 '直近の起点（転換、ピーク）からの価格変化量
        Dim Ore0_min : Ore0_min = 0 '山の流れが終わるまでの本数（基準とする値）
        Dim Bnow_min : Bnow_min = 0  '直近の起点（転換／ピーク）から現在までのバー本数
        Dim Ozn_min : Ozn_min = 0 '現在のOsの残量
        Dim Pzn_min : Pzn_min = 0 '現在の価格の残量
        Dim OPratio_min : OPratio_min = 0 '価格変化量とOs変化量の比
        Dim OPzn_min : OPzn_min = 0 '現在のOs残量（価格ベース）
        Dim Ore1_min : Ore1_min = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2_min : Ore2_min = 0 ' 現存Osの残量をOgr2で割った値
        Dim Ore1_1_min : Ore1_1_min = 0 ' 現在のOs残量（価格ベース）を価格ベースの成長率(Pgr2)で割った値

        Dim Pgr1 : Pgr1 = 0 '価格直近成長率
        Dim Pgr0 : Pgr0 = 0 '価格平均成長率
        Dim Pgr2 : Pgr2 = 0 '価格直近平均成長率
        Dim Ogr1 : Ogr1 = 0 'Os直近成長率
        Dim Ogr0 : Ogr0 = 0 'Os平均成長率
        Dim Ogr2 : Ogr2 = 0 'Os直近平均成長率

        Dim Pgr1_min : Pgr1_min = 0 '価格直近成長率
        Dim Pgr0_min : Pgr0_min = 0 '価格平均成長率
        Dim Pgr2_min : Pgr2_min = 0 '価格直近平均成長率
        Dim Ogr1_min : Ogr1_min = 0 'Os直近成長率
        Dim Ogr0_min : Ogr0_min = 0 'Os平均成長率
        Dim Ogr2_min : Ogr2_min = 0 'Os直近平均成長率

        Dim OPgr2 : OPgr2 = 0 '価格起因の平均成長率
        Dim OPgr2_min : OPgr2_min = 0 '価格起因の平均成長率

        '上増のとき
        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
            Owd = pretenkanvalue-prepeakvalue
            Pwd = pretenkanprice-prepeakprice
            Omv = cnow1 - tenkanvalue
            Pmv = pnow - tenkanprice
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            if peakvalue > minipeakvalue then
                Owd_min = peakvalue - minipeakvalue
                Pwd_min = peakprice - minipeakprice
                Omv_min = cnow1 - minipeakvalue
                Pmv_min = pnow - minipeakprice
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = preminipeakvalue - prepeakvalue
                Pwd_min = preminipeakprice - prepeakprice
                Omv_min = cnow1 - tenkanvalue
                Pmv_min = pnow - tenkanprice
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1

        '上減のとき
        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
            Owd = peakvalue-tenkanvalue
            Pwd = peakprice-tenkanprice
            Omv = peakvalue - cnow1
            Pmv = peakprice - pnow
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            Owd_min = preminipeakvalue - prepeakvalue
            Pwd_min = preminipeakprice - prepeakprice
            Omv_min = peakvalue - cnow1
            Pmv_min = peakprice - pnow
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下減のとき
        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
            Owd = prepeakvalue-pretenkanvalue
            Pwd = prepeakprice-pretenkanprice
            Omv = tenkanvalue - cnow1
            Pmv = tenkanprice - pnow
            Ore0 = DateDiff("n",CDate(pretenkandate), CDate(prepeakdate)) / asi2
            Bnow = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            Pgr1 = ppre-pnow
            Ogr1 = cpre1-cnow1

            if minipeakvalue > peakvalue then
                Owd_min = minipeakvalue - peakvalue
                Pwd_min = minipeakprice - peakprice
                Omv_min = minipeakvalue - cnow1
                Pmv_min = minipeakprice - pnow
                Ore0_min = DateDiff("n",CDate(peakdate), CDate(minipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(minipeakdate), CDate(Nowdate)) / asi2
            else
                Owd_min = prepeakvalue - preminipeakvalue
                Pwd_min = prepeakprice - preminipeakprice
                Omv_min = tenkanvalue - cnow1
                Pmv_min = tenkanprice - pnow
                Ore0_min = DateDiff("n",CDate(prepeakdate), CDate(preminipeakdate)) / asi2
                Bnow_min = DateDiff("n",CDate(tenkandate), CDate(Nowdate)) / asi2
            end if
            Pgr1_min = ppre-pnow
            Ogr1_min = cpre1-cnow1

        '下増のとき
        else
            Owd = tenkanvalue-peakvalue
            Pwd = tenkanprice-peakprice
            Omv = cnow1 - peakvalue
            Pmv = pnow - peakprice
            Ore0 = DateDiff("n",CDate(tenkandate), CDate(peakdate)) / asi2
            Bnow = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1 = pnow-ppre
            Ogr1 = cnow1-cpre1

            Owd_min = prepeakvalue - preminipeakvalue
            Pwd_min = prepeakprice - preminipeakprice
            Omv_min = cnow1 - peakvalue
            Pmv_min = pnow - peakprice
            Ore0_min = DateDiff("n",CDate(peakdate), CDate(preminipeakdate)) / asi2
            Bnow_min = DateDiff("n",CDate(peakdate), CDate(Nowdate)) / asi2
            Pgr1_min = pnow-ppre
            Ogr1_min = cnow1-cpre1
        end if

        if Ore0 = 0 then
            Ore0 = 1
        end if
        if Bnow = 0 then
            Bnow = 1
        end if
        if Ore0_min = 0 then
            Ore0_min = 1
        end if
        if Bnow_min = 0 then
            Bnow_min = 1
        end if
        
        if Pwd = 0 then
            OPratio = 1
        else
            OPratio = Owd/Pwd
        end if

        if Pwd_min=0 then
            OPratio_min = 1
        else
            OPratio_min = Owd_min / Pwd_min
        end if

        Pgr0 = Pwd/Ore0
        Pgr2 = Pmv/Bnow
        Ogr0 = Owd/Ore0
        Ogr2 = Omv/Bnow
        OPgr2 = CDbl(Pgr2)*CDbl(OPratio)

        Pgr0_min = Pwd_min/Ore0_min
        Pgr2_min = Pmv_min/Bnow_min
        Ogr0_min = Owd_min/Ore0_min
        Ogr2_min = Omv_min/Bnow_min
        OPgr2_min = CDbl(Pgr2_min)*CDbl(OPratio_min)

        Ozn = Owd - Omv
        Pzn = Pwd - Pmv
        OPzn = Pzn*OPratio

        if OPratio * Pgr2 = 0 then
            Ore1 = 10000
            Ore1_1 = 10000
        else
            Ore1 = Ozn/(OPratio * Pgr2)
            Ore1_1 = OPzn/(OPratio*Pgr2)
        end if

'        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = (Ore0-Bnow)*Ogr1/Ogr0
'                Ore1_1 = (Ore0-Bnow)*Ogr1/Ogr0
'            end if
'        '下増のとき
'        else
'            if Pgr2 = 0 then
'                Ore1 = 10000
'                Ore1_1 = 10000
'            else
'                Ore1 = Ozn/(OPratio * Pgr2)
'                Ore1_1 = OPzn/(OPratio*Pgr2)
'            end if
'        end if

        if Ogr1 = 0 then
            Ore2 = 10000
        else
            Ore2 = Ozn/Ogr1
        end if

        Ozn_min = Owd_min - Omv_min
        Pzn_min = Pwd_min - Pmv_min
        OPzn_min = Pzn_min*OPratio_min

        if OPratio_min*Pgr2_min=0 then
            Ore1_min = 10000
            Ore1_1_min = 10000
        else
            Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
            Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
        end if

        '上増のとき
'        if CDbl(cnow1) >= 0 and CDbl(cnow1 - cpre1) >= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '上減のとき
'        elseif CDbl(cnow1) > 0 and CDbl(cnow1 - cpre1) < 0 then
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        '下減のとき
'        elseif CDbl(cnow1) <= 0 and CDbl(cnow1 - cpre1) <= 0 then
'            if Ogr0_min = 0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'                Ore1_1_min = (Ore0_min-Bnow_min)*Ogr1_min/Ogr0_min
'            end if
'        '下増のとき
'        else
'            if OPratio_min*Pgr2_min=0 then
'                Ore1_min = 10000
'                Ore1_1_min = 10000
'            else
'                Ore1_min = Ozn_min/(OPratio_min * Pgr2_min)
'                Ore1_1_min = OPzn_min / (OPratio_min*Pgr2_min)
'            end if
'        end if

        if Ogr1_min=0 then
            Ore2_min = 10000
        else
            Ore2_min = Ozn_min / Ogr1_min
        end if


        'Osの進行方向
        if CDbl(cnow1)>0 then
            tenkandirect = 1
        elseif CDbl(cnow1)<0 then
            tenkandirect = 2
        end if

        if subset_flag = "MINI" then
            if CDbl(Owd_min) - CDbl(Omv_min) < 0 then
                masssum = loop_name
            else
                masssum = 0
            end if

            '進行方向がマイナスの場合、マイナスをかける
            if CDbl(onow1) < 0 then
                masssum = - masssum
            end if
        else
            if CDbl(Owd) - CDbl(Omv) < 0 then
                masssum = loop_name
            else
                masssum = 0
            end if

            '進行方向がマイナスの場合、マイナスをかける
            if CDbl(onow1) < 0 then
                masssum = - masssum
            end if
        end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuAnsCol, loop_name) = 0
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOValueCol, loop_name) = onow1
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOValue2Col, loop_name) = onow2
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuCValueCol, loop_name) = cnow1
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPriceCol, loop_name) = pnow
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanDirectCol, loop_name) = tenkandirect
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanDateCol, loop_name) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanTimeCol, loop_name) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanValueCol, loop_name) = tenkanvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanPriceCol, loop_name) = tenkanprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakDateCol, loop_name) = peakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakTimeCol, loop_name) = peaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakValueCol, loop_name) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakPriceCol, loop_name) = peakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakPriceCol, loop_name) = minipeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakValueCol, loop_name) = minipeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakDateCol, loop_name) = minipeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMiniPeakTimeCol, loop_name) = minipeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanDateCol, loop_name) = pretenkandate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanTimeCol, loop_name) = pretenkantime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanValueCol, loop_name) = pretenkanvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreTenkanPriceCol, loop_name) = pretenkanprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakDateCol, loop_name) = prepeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakTimeCol, loop_name) = prepeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakValueCol, loop_name) = prepeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPrePeakPriceCol, loop_name) = prepeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakPriceCol, loop_name) = preminipeakprice
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakValueCol, loop_name) = preminipeakvalue
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakDateCol, loop_name) = preminipeakdate
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPreMiniPeakTimeCol, loop_name) = preminipeaktime
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre1Col, loop_name) = Ore1
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre2Col, loop_name) = Ore2
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPgr2Col, loop_name) = Pgr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOPgr2Col, loop_name) = OPgr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOPznCol, loop_name) = OPzn
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOgr0Col, loop_name) = Ogr0
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOgr2Col, loop_name) = Ogr2
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOwdCol, loop_name) = Owd
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOmvCol, loop_name) = Omv
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOre1Col, loop_name) = Ore1_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOre2Col, loop_name) = Ore2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinPgr2Col, loop_name) = Pgr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOPgr2Col, loop_name) = OPgr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOPznCol, loop_name) = OPzn_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOgr0Col, loop_name) = Ogr0_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOgr2Col, loop_name) = Ogr2_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOwdCol, loop_name) = Owd_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOmvCol, loop_name) = Omv_min
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, loop_name) = masssum
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumZGCol, loop_name) = masssumzg
    elseif writeflag = writeflag_off then
        Ore1 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre1Col, loop_name)
        Ore2 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre2Col, loop_name)
        Pgr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPgr2Col, loop_name)
        OPgr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOPgr2Col, loop_name)
        OPzn = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOPznCol, loop_name)
        Ogr0 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOgr0Col, loop_name)
        Ogr2 = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOgr2Col, loop_name)
        Owd = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOwdCol, loop_name)
        Omv = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOmvCol, loop_name)
        Ore1_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOre1Col, loop_name)
        Ore2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOre2Col, loop_name)
        Pgr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinPgr2Col, loop_name)
        OPgr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOPgr2Col, loop_name)
        OPzn_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOPznCol, loop_name)
        Ogr0_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOgr0Col, loop_name)
        Ogr2_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOgr2Col, loop_name)
        Owd_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOwdCol, loop_name)
        Omv_min = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMinOmvCol, loop_name)
        masssum = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, loop_name)
        masssumzg = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumZGCol, loop_name)
    End If


    end if

    next    
    
    Dim check_str

    '周期間合算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    mass_sum = 0
    for i=1 to ubound(names)+1
        Dim check_ans : check_ans = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, i)
        if CLng(check_ans) = i and CLng(mass_sum) >= i-1 then
            mass_sum = check_ans
        elseif CLng(check_ans) = -i and Clng(mass_sum) <= -(i-1)then
            mass_sum = check_ans
        end if
        
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre1Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOre2Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakValueCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPgr2Col, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOwdCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuOmvCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakPriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanPriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPriceCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuPeakDateCol, i))
'        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuTenkanDateCol, i))
    next
    
    Dim mass_pre : mass_pre = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, 0)
    
    '１回前の状態を維持できるか確認
    if CLng(mass_pre) > 0 then
        check_ans = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, mass_pre)
        if CLng(check_ans) > 0 then
            '今回の単純合算よりも継続値のほうが接続範囲が大きい場合、置き換える
            if CLng(mass_sum) < CLng(check_ans) then
                mass_sum = check_ans
            end if
        end if
    elseif CLng(mass_pre) < 0 then
        check_ans = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, -mass_pre)
        if CLng(check_ans) < 0 then
            '今回の単純合算よりも継続値のほうが接続範囲が大きい場合、置き換える
            if CLng(mass_sum) > CLng(check_ans) then
                mass_sum = check_ans
            end if
        end if
    end if

    ans = mass_sum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuAnsCol, 0) = ans
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuMassSumCol, 0)
        ans = hold(periodnum, setrownum, pairnum, PredictSoroiSetsuzokuAnsCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = mass_sum
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroiSabun3関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroiSabun3( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, ByRef holdhes2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSabun3

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")

    Dim masssum : masssum = 0
    Dim masssumzg : masssumzg = 0

    For loop_name = 1 To Ubound(names)+1
        Dim tmp_names : tmp_names = Split(names(loop_name-1),"_")
    '各値を取得する

        Dim onow1 : onow1 = 0
        Dim opre1 : opre1 = 0
        Dim peakvalue : peakvalue = 0
        Dim Ore1 : Ore1 = 0 '現存Osの残量を価格ベースの成長率（Pgr2）で割った値
        Dim Ore2 : Ore2 = 0 '現存Osの残量をOgr2で割った値

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            Dim tmp_indip : tmp_indip = Split(indicatorpre1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    Ore1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    Ore2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    peakvalue = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    opre1 = GetArrayValueZero(tmp_indip,inIndiPriceCol)
                end if
            end if
        Next

    Dim Nowdate: Nowdate = CDate(indi_day + " " + indi_time)

    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        Dim tmp_masssum : tmp_masssum = 0
        Dim tmp_masssumzg : tmp_masssumzg = 0

        if Ore2 = 10000 or Ore2 = 0 then
            tmp_masssum = 0
            tmp_masssumzg = 0
        else
            tmp_masssum = (1 - CDbl(Ore1) / CDbl(Ore2)) * CDbl(peakvalue)
            tmp_masssumzg = (1 - CDbl(Ore1) / CDbl(Ore2))
        end if

        '進行方向がマイナスの場合、マイナスをかける
        if onow1 * peakvalue < 0 then
            tmp_masssum = - tmp_masssum
        end if
        if (onow1-opre1) < 0 then
            tmp_masssumzg = - tmp_masssumzg
        end if

        masssum = masssum + tmp_masssum
        masssumzg = masssumzg + tmp_masssumzg

    end if

    next    
    
    Dim check_str

    '周期間合算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun3MassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroiSabun3MassSumZGCol, 0) = mass_sumzg
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroiSabun3MassSumCol, 0)
        mass_sumzg = hold(periodnum, setrownum, pairnum, PredictSoroiSabun3MassSumZGCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = masssum
                Case 2
                    value = masssumzg
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroiSabun関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroiSabun( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, ByRef holdhes2, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroiSabun

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")
    Dim names2 : names2 = Split(tmp_set(inSetName2Col),"|")
    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdPredictSoroiSabunColNum, Ubound(names)+1)
    end if
    if ubound(holdhes,5) < Ubound(names)+1 then
        Redim preserve holdhes(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if
    if ubound(holdhes2,5) < Ubound(names)+1 then
        Redim preserve holdhes2(maxPeriod, UBound(setting, 1), MaxPairSet, holdHeikenColNum,Ubound(names)+1)
    end if

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する
        Dim onow1 : onow1 = 0
        Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunOValueCol,loop_name)
        Dim onow2 : onow2 = 0
        Dim opre2 : opre2 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunOValue2Col,loop_name)
        Dim cnow1 : cnow1 = 0
        Dim cpre1 : cpre1 = hold(periodnum, setrownum, pairnum, PredictSoroiSabunCValueCol,loop_name)
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
        Dim period : period=0
        Dim ore0 : ore0=100000
        Dim ore1 : ore1=100000
        Dim tenkandirect : tenkandirect=0
        Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictSoroiSabunTenkanDateCol,loop_name)
        Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictSoroiSabunTenkanTimeCol,loop_name)
        Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakDateCol,loop_name)
        Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakTimeCol,loop_name)
        Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakValueCol,loop_name)
        Dim masssum : masssum = 0

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If names(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        indi_id = tmp_set(inSetCodeCol)
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if tmp_set(inSetSubSettingCol) = "PIPS" then
                            pips_filter = pips
                        end if
        '            End If
                end if
                if tmp_set(inSetName2Col) <> "" then
                    If names2(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        onow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
        '            End If
                    End If
                end if
            end if
        Next
    
    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    '同逆を計算する(HeOsの計算)
        cnow1 = (onow1-opre1) - (onow2-opre2)
    
        '折れ予知の計算
        if cnow1 <> 0 then
            '転換している場合、値を更新する
            if CDbl(cnow1) * CDbl(cpre1) <= 0 then
                tenkandate = indi_day
                tenkantime = indi_time 
                peakdate = indi_day
                peaktime = indi_time 
                peakvalue = cnow1
            else
                if CDbl(cnow1) >0 then
                    'ピーク値の更新の場合
                    if CDbl(cnow1) > Cdbl(peakvalue) then
                        peakdate = indi_day
                        peaktime = indi_time 
                        peakvalue = cnow1
                    end if
                elseif CDbl(cnow1) < 0 then
                    'ピーク値の更新の場合
                    if CDbl(cnow1) < CDbl(peakvalue) then
                        peakdate = indi_day
                        peaktime = indi_time 
                        peakvalue = cnow1
                    end if
                end if
            end if
            
            '上減または下増のとき折れ（ゼロ点）の位置の算出
            if CDbl(cnow1) * CDbl(cnow1 - cpre1) < 0 then
                if peakdate <> EMPTY _
                    and peaktime <> EMPTY _
                    and tenkandate <> EMPTY _
                    and tenkantime <> EMPTY then
                    width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime)) / asi2 +1

                    if cpre1 <> cnow1 then
                        ore1 = round( cnow1 / (cpre1- cnow1) +0.5, 0)
                    end if
                    if width <> 0 then
                        ore0 = width
                    end if
                end if
            end if

            'Osの転換方向
            if CDbl(cnow1)>0 then
                tenkandirect = 2
            elseif CDbl(cnow1)<0 then
                tenkandirect = 1
            end if

        end if

        if ore0 = 100000 then
            masssum = peakvalue
        else
            masssum = CDbl(ore1) / CDbl(ore0) * CDbl(peakvalue)
        end if

        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunAnsCol, loop_name) = 0
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunOValueCol, loop_name) = onow1
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunOValue2Col, loop_name) = onow2
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunCValueCol, loop_name) = cnow1
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunOre0Col, loop_name) = ore0
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunOre1Col, loop_name) = ore1
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakDateCol, loop_name) = peakdate
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakTimeCol, loop_name) = peaktime
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunPeakValueCol, loop_name) = peakvalue
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunTenkanDateCol, loop_name) = tenkandate
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunTenkanTimeCol, loop_name) = tenkantime
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunTenkanDirectCol, loop_name) = tenkandirect
            hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol,loop_name) = masssum
        End If
    end if

    next    
    
    Dim check_str

    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    mass_sum = 0
    for i=1 to ubound(names)+1
        mass_sum = mass_sum + hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol, i)
        check_str = check_str +"|" + CStr(hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol, i))
    next
    Dim mass_pre : mass_pre = hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol, 0)

    if mass_sum>0 then
        ans = 1
    elseif mass_sum<0 then
        ans = -1
    elseif mass_pre>0 then
        ans = 1
    elseif mass_pre<0 then
        ans = -1
    else
        ans = 0
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol, 0) = mass_sum
        hold(periodnum, setrownum, pairnum, PredictSoroiSabunAnsCol, 0) = ans
    elseif writeflag = writeflag_off then
        mass_sum = hold(periodnum, setrownum, pairnum, PredictSoroiSabunMassSumCol, 0)
        ans = hold(periodnum, setrownum, pairnum, PredictSoroiSabunAnsCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictSoroi関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictSoroi( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictSoroi

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")

    Dim masssum : masssum = 0
    For loop_name = 1 To Ubound(names)+1
        Dim tmp_names : tmp_names = Split(names(loop_name-1),"_")
    '各値を取得する
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
        Dim ore0 : ore0=100000
        Dim ore1 : ore1=100000
        Dim peakvalue : peakvalue = 0

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If tmp_names(0) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    ore0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
                elseIf tmp_names(1) = tmp_indi(inIndiIDCol) Then
                    ore1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                elseIf tmp_names(2) = tmp_indi(inIndiIDCol) Then
                    peakvalue = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        Next
    
        if ore0 = 0 then
            ore0 = 100000
        end if
    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
        if ore0 = 100000 then
            masssum = masssum + peakvalue
        else
            masssum = massum + CDbl(ore1) / CDbl(ore0) * CDbl(peakvalue)
        end if
    end if

    next    
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictSoroiMassSumCol, 0) = masssum
    elseif writeflag = writeflag_off then
        masssum = hold(periodnum, setrownum, pairnum, PredictSoroiMassSumCol, 0)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = masssum
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictOre21関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictOre21( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictOre21

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, PredictOreVValueCol)
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictOreOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim katamuki : katamuki=0
    Dim period : period=0
    Dim ore0 : ore0=100000
    Dim ore1 : ore1=100000
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            elseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        'Names2分
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName2Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)
    end if

    '傾きの計算
    katamuki = vnow1 - vpre1
    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime)) / asi2 +1
                width_now = DateDiff("n",CDate(peakdate + " " + peaktime),CDate(indi_day + " " + indi_time)) / asi2

                if opre1 <> onow1 then
                    ore1 = round( onow1 / (opre1- onow1) +0.5, 0)
                end if
                if width <> 0 then
                    ore0 = width - width_now
                end if
            end if
        end if

        'Osの転換方向
        if CDbl(onow1)>0 then
            tenkandirect = 2
        elseif CDbl(onow1)<0 then
            tenkandirect = 1
        end if

    end if
    
    
    Dim ans : ans = 0
    
    if ore1 <> 100000 then
        if ore1 <= ore0 then
            ans = 1
        elseif ore1 > ore0 then
            ans = -1
        end if
    end if
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictOreAnsCol) = ans
        hold(periodnum, setrownum, pairnum, PredictOreVValueCol) = vnow1
        hold(periodnum, setrownum, pairnum, PredictOreOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, PredictOreKatamukiCol) = katamuki
        hold(periodnum, setrownum, pairnum, PredictOreOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, PredictOreOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDirectCol) = tenkandirect
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, PredictOreAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictOre関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictOre( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictOre

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim Ore0 : Ore0=100000
    Dim Ore1 : Ore1=100000

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                Ore0 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            elseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                Ore1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
        Dim ans : ans = ore0 - ore1
    
        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, PredictOreAnsCol) = ans
        elseif writeflag = writeflag_off then
            ans = hold(periodnum, setrownum, pairnum, PredictOreAnsCol)
        End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictOre0関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictOre0( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictOre0

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, PredictOreVValueCol)
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictOreOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim ore0 : ore0=100000
    Dim ore1 : ore1=100000
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol)

    if peakvalue = "" then
        peakvalue = 0
    end if

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if onow1 = "" then
                    onow1 = 0
                end if
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if


    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime)) / asi2 +1

                if opre1 <> onow1 then
                    ore1 = round( onow1 / (opre1- onow1) +0.5, 0)
                end if
                if width <> 0 then
                    ore0 = width
                end if
            end if
        end if

        'Osの転換方向
        if CDbl(onow1)>0 then
            tenkandirect = 2
        elseif CDbl(onow1)<0 then
            tenkandirect = 1
        end if

    end if
    
    
    Dim ans : ans = 0
    
    ans = ore0
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictOreAnsCol) = ans
        hold(periodnum, setrownum, pairnum, PredictOreVValueCol) = vnow1
        hold(periodnum, setrownum, pairnum, PredictOreOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, PredictOreOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, PredictOreOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDirectCol) = tenkandirect
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, PredictOreAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
                Case 2
                    value = peakvalue
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictOre1関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictOre1( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictOre1

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, PredictOreVValueCol)
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictOreOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim period : period=0
    Dim ore0 : ore0=100000
    Dim ore1 : ore1=100000
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime)) / asi2 +1
                width_now = DateDiff("n",CDate(peakdate + " " + peaktime),CDate(indi_day + " " + indi_time)) / asi2

                if opre1 <> onow1 then
                    ore1 = round( onow1 / (opre1- onow1) +0.5, 0)
                end if
                if width <> 0 then
                    ore0 = width - width_now
                end if
            end if
        end if

        'Osの転換方向
        if CDbl(onow1)>0 then
            tenkandirect = 2
        elseif CDbl(onow1)<0 then
            tenkandirect = 1
        end if

    end if
    
    
    Dim ans : ans = 0
    
    ans = ore1
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictOreAnsCol) = ans
        hold(periodnum, setrownum, pairnum, PredictOreVValueCol) = vnow1
        hold(periodnum, setrownum, pairnum, PredictOreOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, PredictOreOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, PredictOreOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDirectCol) = tenkandirect
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, PredictOreAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　PredictOre2関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPredictOre2( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionPredictOre2

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, PredictOreVValueCol)
    Dim onow1 : onow1 = 0
    Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, PredictOreOValueCol)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim katamuki : katamuki=0
    Dim period : period=0
    Dim ore0 : ore0=100000
    Dim ore1 : ore1=100000
    Dim tenkandirect : tenkandirect=0
    Dim tenkandate : tenkandate = hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol)
    Dim tenkantime : tenkantime = hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol)
    Dim peakdate : peakdate = hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol)
    Dim peaktime : peaktime = hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol)
    Dim peakvalue : peakvalue = hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        'Periodの取得
        period = tmp_set(inSetThreCol)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            elseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim asi : asi = GetAsi(periodnum)
    
    
    Dim asi2 : asi2 = asi
    '日足モードON
    if daymode = 1 then
        Select Case periodnum
            Case 1
                asi = 1
                asi2 = 1440
            Case 2
                asi = 7
                asi2 = 10080
            Case 3
                asi = 30
                asi2 = 43200
            Case 4
                asi = 30
                asi2 = 43200
            Case 5
                asi = 30
                asi2 = 43200
            Case Else
                asi = 1
                asi2 = 1440
        End Select
    end if

'同逆を計算する(HeOsの計算)
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    if hmode <> "" then
        'Names2分
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName2Col), hmode, true)
        onow1 = holdhe(periodnum, setrownum, pairnum, HeikenOpenCol)
    end if

    '傾きの計算
    katamuki = vnow1 - vpre1
    
    '折れ予知の計算
    if onow1 <> 0 then
        '転換している場合、値を更新する
        if CDbl(onow1) * CDbl(opre1) <= 0 then
            tenkandate = indi_day
            tenkantime = indi_time 
            peakdate = indi_day
            peaktime = indi_time 
            peakvalue = onow1
        else
            if CDbl(onow1) >0 then
                'ピーク値の更新の場合
                if CDbl(onow1) > Cdbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            elseif CDbl(onow1) < 0 then
                'ピーク値の更新の場合
                if CDbl(onow1) < CDbl(peakvalue) then
                    peakdate = indi_day
                    peaktime = indi_time 
                    peakvalue = onow1
                end if
            end if
        end if
            
        '上減または下増のとき折れ（ゼロ点）の位置の算出
        if CDbl(onow1) * CDbl(onow1 - opre1) < 0 then
            if peakdate <> EMPTY _
                and peaktime <> EMPTY _
                and tenkandate <> EMPTY _
                and tenkantime <> EMPTY then
                width = DateDiff("n", CDate(tenkandate + " " + tenkantime),CDate(peakdate + " " + peaktime)) / asi2 +1
                width_now = DateDiff("n",CDate(peakdate + " " + peaktime),CDate(indi_day + " " + indi_time)) / asi2

                if opre1 <> onow1 then
                    ore1 = round( onow1 / (opre1- onow1) +0.5, 0)
                end if
                if width <> 0 then
                    ore0 = width - width_now
                end if
            end if
        end if

        'Osの転換方向
        if CDbl(onow1)>0 then
            tenkandirect = 2
        elseif CDbl(onow1)<0 then
            tenkandirect = 1
        end if

    end if
    
    
    Dim ans : ans = 0
    
    ans = ore0
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PredictOreAnsCol) = ans
        hold(periodnum, setrownum, pairnum, PredictOreVValueCol) = vnow1
        hold(periodnum, setrownum, pairnum, PredictOreOValueCol) = onow1
        hold(periodnum, setrownum, pairnum, PredictOreKatamukiCol) = katamuki
        hold(periodnum, setrownum, pairnum, PredictOreOre0Col) = ore0
        hold(periodnum, setrownum, pairnum, PredictOreOre1Col) = ore1
        hold(periodnum, setrownum, pairnum, PredictOrePeakDateCol) = peakdate
        hold(periodnum, setrownum, pairnum, PredictOrePeakTimeCol) = peaktime
        hold(periodnum, setrownum, pairnum, PredictOrePeakValueCol) = peakvalue
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDateCol) = tenkandate
        hold(periodnum, setrownum, pairnum, PredictOreTenkanTimeCol) = tenkantime
        hold(periodnum, setrownum, pairnum, PredictOreTenkanDirectCol) = tenkandirect
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, PredictOreAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　SingleDDiffAve関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSingleDDiffAve( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionSingleDDiffAve

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, SingleDDiffAveValue1Col)
    Dim dpre1 : dpre1 = hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff1Col)
    Dim dpre2 : dpre2 = hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff2Col)
    Dim dpre3 : dpre3 = hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff3Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = (((vnow1 - vpre1) - dpre3)/3) /pips_filter
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SingleDDiffAveAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SingleDDiffAveValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff1Col) = vnow1 - vpre1
        hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff2Col) = dpre1
        hold(periodnum, setrownum, pairnum, SingleDDiffAveDiff3Col) = dpre2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SingleDDiffAveAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　SingleVDiffAve関数
' 目的   :  指標の変化量の平均（２）を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSingleVDiffAve( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionSingleVDiffAve

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, SingleVDiffAveValue1Col)
    Dim dpre1 : dpre1 = hold(periodnum, setrownum, pairnum, SingleVDiffAveDiff1Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                if tmp_set(inSetSubSettingCol) = "PIPS" then
                    pips_filter = pips
                end if
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = (((vnow1 - vpre1)+dpre1)/2)/pips_filter
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SingleVDiffAveAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SingleVDiffAveValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, SingleVDiffAveDiff1Col) = vnow1 - vpre1
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SingleVDiffAveAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　SingleDDiff関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSingleDDiff( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionSingleDDiff

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, SingleDDiffValue1Col)
    Dim dpre1 : dpre1 = hold(periodnum, setrownum, pairnum, SingleDDiffDiff1Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = ((vnow1 - vpre1) - dpre1)/pips_filter
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SingleDDiffAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SingleDDiffValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, SingleDDiffDiff1Col) = vnow1 - vpre1
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SingleDDiffAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　SingleValueDiff関数
' 目的   :  指標の変化量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSingleValueDiff( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionSingleValueDiff

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, SingleValueDiffValue1Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if tmp_set(inSetSubSettingCol) = "PIPS" then
                        pips_filter = pips
                    end if
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = (vnow1 - vpre1)/pips_filter
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SingleValueDiffAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SingleValueDiffValue1Col) = vnow1
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SingleValueDiffAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　TwoValueDiff関数
' 目的   :  ２つの指標の値の差分量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionTwoValueDiff( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionTwoValueDiff

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, TwoValueDiffValue1Col)
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, TwoValueDiffValue2Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            elseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        end if
    Next
    
'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = vnow1 - vnow2
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, TwoValueDiffAnsCol) = ans
        hold(periodnum, setrownum, pairnum, TwoValueDiffValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, TwoValueDiffValue2Col) = vnow2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, TwoValueDiffAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Minus関数
' 目的   :  ２つの指標を平均足化した上での値の差分量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionMinus( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator1_saki, price1_saki, _
    indicator1_ssaki, price1_ssaki, _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionMinus

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, MinusValue1Col)
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, MinusValue2Col)
    Dim subset_flag : subset_flag = 0
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

    'subset_flagの代入
    subset_flag = tmp_set(inSetSubSettingCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                end if
            end if
            If CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                if tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            End If
        end if
    Next

    For i = 1 To UBound(indicator1_saki, 1)
        '信号名が合致
        tmp_indi = Split(indicator1_saki(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            end if
            If CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                if tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            End If
        end if
    Next

    For i = 1 To UBound(indicator1_ssaki, 1)
        '信号名が合致
        tmp_indi = Split(indicator1_ssaki(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足が合致
            If CLng(periodnum + tmp_set(inSetAsi1Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                end if
            elseIf CLng(periodnum + tmp_set(inSetAsi2Col) - 1) = CLng(tmp_indi(inIndiAshiCol)) Then
                if tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'指標値の計算
    
    Dim ans : ans = 0
        
    Dim tmp_vnow1 : tmp_vnow1 = vnow1
    Dim tmp_vnow2 : tmp_vnow2 = vnow2
    if InStr(subset_flag,"Pre1")>0 then
        tmp_vnow1 = vpre1
    end if
    if InStr(subset_flag,"Pre2")>0 then
        tmp_vnow2 = vpre2
    end if

    
    ans = tmp_vnow1 - tmp_vnow2

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, MinusAnsCol) = ans
        hold(periodnum, setrownum, pairnum, MinusValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, MinusValue2Col) = vnow2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, MinusAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

'            value = CStr(vnow1) + "|" + CStr(vnow2) + "|" + CStr(value)

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　ZGAbsMinus関数
' 目的   :  ２つの指標を平均足化した上での変化量の差分量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionZGAbsMinus( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionZGAbsMinus

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, ZGAbsMinusValue1Col)
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, ZGAbsMinusValue2Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            elseif tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    
'指標値の計算
    
    Dim ans : ans = 0
    
    ans = Abs(vnow1-vpre1) - Abs(vnow2-vpre2)
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, ZGAbsMinusAnsCol) = ans
        hold(periodnum, setrownum, pairnum, ZGAbsMinusValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, ZGAbsMinusValue2Col) = vnow2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, ZGAbsMinusAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　ZGMinus関数
' 目的   :  ２つの指標を平均足化した上での変化量の差分量を出す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionZGMinus( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionZGMinus

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vnow2 : vnow2 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, ZGMinusValue1Col)
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, ZGMinusValue2Col)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            elseif tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    
'指標値の計算
    
    Dim ans : ans = 0
    
    ans = (vnow1-vpre1) - (vnow2-vpre2)
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, ZGMinusAnsCol) = ans
        hold(periodnum, setrownum, pairnum, ZGMinusValue1Col) = vnow1
        hold(periodnum, setrownum, pairnum, ZGMinusValue2Col) = vnow2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, ZGMinusAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　GoalPredict関数
' 目的   :  目標到達価格を予知する
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionGoalPredict( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx, _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionGoalPredict

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

    Dim signalnow
    Dim signalpre : signalpre = hold(periodnum, setrownum, pairnum, GoalPredictHeOsSignalNowCol)
    Dim signallog : signallog = hold(periodnum, setrownum, pairnum, GoalPredictHeOsSignalLogCol)
    Dim heosnow
    Dim heospre : heospre = hold(periodnum, setrownum, pairnum, GoalPredictHeOsOpenNowCol)
    Dim heoslog : heoslog = hold(periodnum, setrownum, pairnum, GoalPredictHeOsOpenLogCol)
    Dim heoscrosspointnow : heoscrosspointnow = hold(periodnum, setrownum, pairnum, GoalPredictCrossPointNowCol)
    Dim heoscrosspointpre : heoscrosspointpre = hold(periodnum, setrownum, pairnum, GoalPredictCrossPointPreCol)
    Dim heoscrosstype : heoscrosstype = hold(periodnum, setrownum, pairnum, GoalPredictCrossTypeCol)
    Dim heoscrosslog :  heoscrosslog = hold(periodnum, setrownum, pairnum, GoalPredictCrossTypeLogCol)
    Dim hprice0 : hprice0 = hold(periodnum, setrownum, pairnum, GoalPredictHighPrice0Col)
    Dim hprice1 : hprice1 = hold(periodnum, setrownum, pairnum, GoalPredictHighPrice1Col)
    Dim lprice0 : lprice0 = hold(periodnum, setrownum, pairnum, GoalPredictLowPrice0Col)
    Dim lprice1 : lprice1 = hold(periodnum, setrownum, pairnum, GoalPredictLowPrice1Col)
    Dim tmp_para : tmp_para = Split(tmp_set(inSetSubSettingCol),"|")
    Dim maperiod : maperiod = tmp_para(0)
    Dim bairitsu : bairitsu = tmp_para(1)
    Dim shift : shift = tmp_para(2) -1
    Dim heossabunnow
    Dim heossabunpre : heossabunpre = hold(periodnum, setrownum, pairnum, GoalPredictHeOsSabunNowCol)
    dim anshigh : anshigh = hold(periodnum, setrownum, pairnum, GoalPredictAnsHighCol)
    dim anslow : anslow = hold(periodnum, setrownum, pairnum, GoalPredictAnsLowCol)

'初期化
    if lprice0 = EMPTY then
        lprice0 = 999
    end if

'価格
    Dim pnow
    Dim ppre : ppre = hold(periodnum, setrownum, pairnum, GoalPredictOpenPriceCol)

'平均足の計算をする（同逆を計算する）
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)

    Call getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    'hcodeに「|」が含まれる場合、2指標差分評価での平均足変換処理が行われる
'    Call getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcode, tmp_set(inSetName1Col), hmode, true)
    heosnow = holdhe11(periodnum, setrownum, pairnum, HeikenOpenCol)
    heosnow = heosnow * CDbl(bairitsu)
    
'平均足の平均線を作成する
    'logを分割する
'    Dim vals : vals = Split(heoslog, "|")

    '末端の更新をする
    'SMA
'    if Ubound(vals) <=0 then
'        signalnow = signalpre + (heosnow - 0)/maperiod
'    else
'        signalnow = signalpre + (heosnow - vals(0))/maperiod
'    end if
'    '平均専用のlog値を更新する
'    if Ubound(vals) < maperiod then
'        if heoslog <> "" then
'            heoslog = heoslog & "|" & heosnow
'        else
'            heoslog = heosnow
'        end if
'    else
'        for i = 1 to Ubound(vals)
'            if i = 1 then
'                heoslog = vals(i)
'            else
'                heoslog = heoslog & "|" & vals(i)
'            end if
'        next
'        heoslog = heoslog & "|" & heosnow
'    end if
    'EMA
    signalnow = (signalpre*(maperiod-1) + heosnow*2)/(maperiod + 1)

'平均線との差分をとる
    dim difnow : difnow = heosnow - signalnow
    dim difpre : difpre = heospre - signalpre

'出力用の値取得
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        '信号名1が合致
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            
                '価格の更新
                Dim price_row: price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                pnow = tmp_price(inPricePriceCol)
            End If
        end if
    Next


    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'交点の有無を確認する
    If (CDbl(heosnow) - CDbl(difnow)) * (CDbl(heospre) - CDbl(difpre)) < 0 Then
        '上交点の場合
        If CDbl(heosnow) > CDbl(difnow) Then
            dim s1 : s1 = (difpre - heospre) / 2
            dim s2 : s2 = (heosnow - difnow) / 2
            heoscrosspoint = heospre + (heosnow - heospre) * s1 / (s1 + s2)
            heoscrosstype = 3
'            heossabunpre = heossabunnow
'            heossabunnow = lprice - heoscrosspoint
'            ans = pnow + heossabunpre
        '下交点の場合
        Elseif CDbl(heosnow) < CDbl(difnow) Then
            s1 = (difpre - heospre) / 2
            s2 = (heosnow - difnow) / 2
            heoscrosspoint = heospre + (heosnow - heospre) * s1 / (s1 + s2)
            heoscrosstype = 4
'            heossabunpre = heossabunnow
'            heossabunnow = lprice - heoscrosspoint
'            ans = pnow + heossabunpre
        End if
    else
        '上の場合
        If CDbl(heosnow) > CDbl(difnow) Then
            heoscrosstype = 1
        '下の場合
        Elseif CDbl(heosnow) < CDbl(difnow) Then
            heoscrosstype = 2
        '交点ができる前、または重なっているとき
        else
            heoscrosstype = 0
        End if
    End if

'    '差分値を更新する
'    If heoscrosstype = 1 Then
'        heossabunnow = hprice - heoscrosspoint
'    Elseif heoscrosstype = 2 Then
'        heossabunnow = lprice - heoscrosspoint
'    End if

'ログの更新
    Dim signalval
    Dim heosval
    Dim heoscrossval
'    Dim heossabunval
    Call UpdateLog(signallog, signalnow, shift, signalval)
    Call UpdateLog(heoslog, heosnow, shift, heosval)
    Call UpdateLog(heoscrosslog, heoscrosstype, shift, heoscrossval)
'    Call UpdateLog(heossabunlog, heossabunnow, shift, heossabunval)

'高値／安値を更新する
    if Ubound(heoscrossval) > 0 then
        '交点発生して、上のとき
        if CLng(heoscrossval(0)) = 3 then
            hprice1 = hprice0
            hprice0 = pnow
            lprice1 = lprice0
            lprice0 = pnow
        '交点発生して、下のとき
        elseif CLng(heoscrossval(0)) = 4 then
            hprice1 = hprice0
            hprice0 = pnow
            lprice1 = lprice0
            lprice0 = pnow
        '交点発生せず、上のとき
        elseif CLng(heoscrossval(0)) = 1 then
            if CDbl(hprice0) < CDbl(pnow) then
                hprice0 = pnow
            end if
            if CDbl(lprice0) > CDbl(pnow) then
                lprice0 = pnow
            end if
        '交点発生せず、下のとき
        elseif Clng(heoscrossval(0)) = 2 then
            if CDbl(hprice0) < CDbl(pnow) then
                hprice0 = pnow
            end if
            if CDbl(lprice0) > CDbl(pnow) then
                lprice0 = pnow
            end if
        end if
    end if

'シフトに合わせて差分を組みなおす
    Dim hprice : hprice = hprice0
    Dim lprice : lprice= lprice0
    if hprice < hprice1 then
        hprice = hprice1
    end if
    if lprice > lprice1 then
        lprice = lprice1
    end if
    'ログから直近の交点を探す
    Call SearchGoalPoint(heosval, signalval, heoscrossval, hprice, lprice, heossabunnow, heossabunpre, heoscrosspointnow, heoscrosspointpre, anshigh, anslow)

'指標値の保持
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, GoalPredictAnsHighCol) = anshigh
        hold(periodnum, setrownum, pairnum, GoalPredictAnsLowCol) = anslow
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsSignalNowCol) = signalnow
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsSignalPreCol) = signalpre
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsSignalLogCol) = signallog
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsOpenNowCol) = heosnow
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsOpenPreCol) = heospre
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsOpenLogCol) = heoslog
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsSabunNowCol) = heossabunnow
        hold(periodnum, setrownum, pairnum, GoalPredictHeOsSabunPreCol) = heossabunpre
        hold(periodnum, setrownum, pairnum, GoalPredictOpenPriceCol) = pnow
        hold(periodnum, setrownum, pairnum, GoalPredictHighPrice0Col) = hprice0
        hold(periodnum, setrownum, pairnum, GoalPredictHighPrice1Col) = hprice1
        hold(periodnum, setrownum, pairnum, GoalPredictLowPrice0Col) = lprice0
        hold(periodnum, setrownum, pairnum, GoalPredictLowPrice1Col) = lprice1
        hold(periodnum, setrownum, pairnum, GoalPredictCrossPointNowCol) = heoscrosspointnow
        hold(periodnum, setrownum, pairnum, GoalPredictCrossPointPreCol) = heoscrosspointpre
        hold(periodnum, setrownum, pairnum, GoalPredictCrossTypeCol) = heoscrosstype
        hold(periodnum, setrownum, pairnum, GoalPredictCrossTypeLogCol) = heoscrosslog
    elseif writeflag = writeflag_off then
        anshigh = hold(periodnum, setrownum, pairnum, GoalPredictAnsHighCol)
        anslow = hold(periodnum, setrownum, pairnum, GoalPredictAnsLowCol)
    End If

    end if    

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum
        if heoscrossval(0) = 1 or heoscrossval(0) = 3 then
            ans = anslow
        elseif heoscrossval(0) = 2 or heoscrossval(0) = 4 then
            ans = anshigh
        else
            ans = 0
        end if
        if ans = "" or ans = empty then
            ans = 0
        end if

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Ryou関数
' 目的   :  指標の中での最大管理番号を返す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRyou( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2  _
)
    Dim FunctionName :FunctionName = FunctionRyou

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim vnow2 : vnow2 = 0

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        
            '信号名(Name2)が合致
            If tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        end if        
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then


'同逆を計算する
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    'Names1分
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    vnow1 = dougyaku1 * vnow1
    
    'Names2分
    Dim dougyaku2 : dougyaku2 = 1
'    ReDim holdKairiHeiken12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku2 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName2Col), hmode, true)
    vnow2 = dougyaku2 * vnow2
        
'指標値の計算
    
    Dim ans : ans = 0
    Dim maxval : maxval = 0
    Dim maxnum : maxnum = 0
    
    ans = vnow1 - vnow2
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RyouPMAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, RyouPMAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　RyouPM関数
' 目的   :  指標の中での最大管理番号を返す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRyouPM( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2  _
)
    Dim FunctionName :FunctionName = FunctionRyouPM

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim names 
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    names = Split(tmp_set(inSetName2Col), "|")
    Dim vnows 
    ReDim vnows(UBound(names))

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        
            '設定ファイルのNames2に「|」区切りで複数の指標コードが記載されている場合の対応
            For j = 0 To UBound(vnows)
                If names(j) = tmp_indi(inIndiIDCol) Then
                    vnows(j) = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            Next
        end if        
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then


'同逆を計算する
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    'Names1分
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    vnow1 = dougyaku1 * vnow1
    
    'Names2分
    For i = 0 To UBound(vnows)
'        ReDim holdKairiHeiken12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(i + 1), names(i), hmode, true)
        vnows(i) = dougyaku1 * vnows(i)
    Next
        
'指標値の計算
    
    Dim ans : ans = 0
    Dim maxval : maxval = 0
    Dim maxnum : maxnum = 0
    
    maxval = Abs(vnow1)
    If vnow1 > 0 Then
        maxnum = 1
    Else
        maxnum = -1
    End If
    
    If Abs(vnows(0) - vnow1) > maxval Then
        maxval = Abs(vnows(0) - vnow1)
        If vnows(0) - vnow1 > 0 Then
            maxnum = 2
        Else
            maxnum = -2
        End If
    End If
    
    For i = 1 To UBound(vnows)
        Dim tmp_vnow: tmp_vnow = vnows(i) - vnows(i - 1)
        If Abs(tmp_vnow) > maxval Then
            maxval = Abs(tmp_vnow)
            If tmp_vnow > 0 Then
                maxnum = i + 2
            Else
                maxnum = -(i + 2)
            End If
        End If
    Next
    
    ans = maxnum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RyouPMAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, RyouPMAnsCol)
    End If
    
    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　RyouM関数
' 目的   :  マイナス側の指標の中での最大管理番号を返す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRyouM( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionRyouM

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim names 
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    names = Split(tmp_set(inSetName2Col), "|")
    Dim vnows 
    ReDim vnows(UBound(names))

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        
            '設定ファイルのNames2に「|」区切りで複数の指標コードが記載されている場合の対応
            For j = 0 To UBound(vnows)
                If names(j) = tmp_indi(inIndiIDCol) Then
                    vnows(j) = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            Next
        end if        
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'同逆を計算する
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    'Names1分
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    vnow1 = dougyaku1 * vnow1
    
    'Names2分
    For i = 0 To UBound(vnows)
'        ReDim holdKairiHeiken12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(i + 1), names(i), hmode, true)
        vnows(i) = dougyaku1 * vnows(i)
    Next
    
'指標値の計算
    
    Dim ans : ans = 0
    Dim maxval : maxval = 0
    Dim maxnum : maxnum = 0
    
    If vnow1 < 0 Then
        maxnum = -1
        maxval = Abs(vnow1)
    End If
    
    If vnows(0) - vnow1 < 0 Then
        If Abs(vnows(0) - vnow1) > maxval Then
            maxval = Abs(vnows(0) - vnow1)
            maxnum = -2
        End If
    End If
    
    For i = 1 To UBound(vnows)
        Dim tmp_vnow: tmp_vnow = vnows(i) - vnows(i - 1)
        If tmp_vnow < 0 Then
            If Abs(tmp_vnow) > maxval Then
                maxval = Abs(tmp_vnow)
                If tmp_vnow > 0 Then
                    maxnum = i + 2
                Else
                    maxnum = -(i + 2)
                End If
            End If
        End If
    Next
    
    ans = maxnum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RyouMAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, RyouMAnsCol)
    End If

    end if    
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　RyouP関数
' 目的   :  プラス側の指標の中での最大管理番号を返す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRyouP( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhe11, ByRef holdhe12, _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2 _
)
    Dim FunctionName :FunctionName = FunctionRyouP

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim names 
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    names = Split(tmp_set(inSetName2Col), "|")
    Dim vnows 
    ReDim vnows(UBound(names))

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        
            '設定ファイルのNames2に「|」区切りで複数の指標コードが記載されている場合の対応
            For j = 0 To UBound(vnows)
                If names(j) = tmp_indi(inIndiIDCol) Then
                    vnows(j) = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            Next
        end if        
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then


'同逆を計算する
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    'Names1分
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    vnow1 = dougyaku1 * vnow1
    
    'Names2分
    For i = 0 To UBound(vnows)
'        ReDim holdKairiHeiken12(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(i + 1), names(i), hmode, true)
        vnows(i) = dougyaku1 * vnows(i)
    Next
        
'指標値の計算
    
    Dim ans : ans = 0
    Dim maxval : maxval = 0
    Dim maxnum : maxnum = 0
    
    If vnow1 > 0 Then
        maxnum = 1
        maxval = Abs(vnow1)
    End If
    
    If vnows(0) - vnow1 > 0 Then
        If Abs(vnows(0) - vnow1) > maxval Then
            maxval = Abs(vnows(0) - vnow1)
            maxnum = 2
        End If
    End If
    
    For i = 1 To UBound(vnows)
        Dim tmp_vnow: tmp_vnow = vnows(i) - vnows(i - 1)
        If tmp_vnow > 0 Then
            If Abs(tmp_vnow) > maxval Then
                maxval = Abs(tmp_vnow)
                If tmp_vnow > 0 Then
                    maxnum = i + 2
                Else
                    maxnum = -(i + 2)
                End If
            End If
        End If
    Next
    
    ans = maxnum
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RyouPAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, RyouPAnsCol)
    End If

    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　DualDirection関数
' 目的   :  2通貨ペア間の流れの方向の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionDualDirection( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , pair_keisu2 , pair_keisu3, _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2, pair3 _
)
    Dim FunctionName :FunctionName = Functiondualdirection

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim subset_flag : subset_flag = ""


'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, DualDirectionVnow1Col)
    Dim vnow2 : vnow2 = 0
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, DualDirectionVnow2Col)
    Dim vnow3 : vnow3 = 0
    Dim vpre3 : vpre3 = hold(periodnum, setrownum, pairnum, DualDirectionVnow3Col)

'同逆を計算する
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    Dim pnow1: pnow1 = tmp_price(inPricePriceCol)
    tmp_price = Split(price2(price_row), ",")
    Dim pnow2: pnow2 = tmp_price(inPricePriceCol)

    'subset_flagの代入
    subset_flag = tmp_set(inSetSubSettingCol)

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    
    '出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    For i = 1 To UBound(indicator2, 1) - 1
        '信号名が合致
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

    For i = 1 To UBound(indicator3, 1) - 1
        '信号名が合致
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = 0
    
    ans = pair_keisu1 * (vnow1 - vpre1)/pnow1 - pair_keisu2 * (vnow2 - vpre2)/pnow2
    if CLng(subset_flag) = 12 then
        ans = pair_keisu1 * (vnow1 - vpre1)/pnow1 - pair_keisu2 * (vnow2 - vpre2)/pnow2
    elseif CLng(subset_flag) = 13 then
        ans = pair_keisu1 * (vnow1 - vpre1)/pnow1 - pair_keisu3 * (vnow3 - vpre3)/pnow3
    elseif CLng(subset_flag) = 21 then
        ans = pair_keisu2 * (vnow2 - vpre2)/pnow2 - pair_keisu1 * (vnow1 - vpre1)/pnow1
    elseif CLng(subset_flag) = 23 then
        ans = pair_keisu2 * (vnow2 - vpre2)/pnow2 - pair_keisu3 * (vnow3 - vpre3)/pnow3
    elseif CLng(subset_flag) = 31 then
        ans = pair_keisu3 * (vnow3 - vpre3)/pnow3 - pair_keisu1 * (vnow1 - vpre1)/pnow1
    elseif CLng(subset_flag) = 32 then
        ans = pair_keisu3 * (vnow3 - vpre3)/pnow3 - pair_keisu2 * (vnow2 - vpre2)/pnow2
    end if

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, DualDirectionAnsCol) = ans
        hold(periodnum, setrownum, pairnum, DualDirectionVnow1Col) = vnow1
        hold(periodnum, setrownum, pairnum, DualDirectionVnow2Col) = vnow2
        hold(periodnum, setrownum, pairnum, DualDirectionVnow3Col) = vnow3
        hold(periodnum, setrownum, pairnum, DualDirectionVpre1Col) = vpre1
        hold(periodnum, setrownum, pairnum, DualDirectionVpre2Col) = vpre2
        hold(periodnum, setrownum, pairnum, DualDirectionVpre3Col) = vpre3
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, DualDirectionAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　DualKairi関数
' 目的   :  2通貨ペア間の流れのかい離の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionDualKairi( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    pair_keisu1 , pair_keisu2 , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    pair1 , pair2  _
)
    Dim FunctionName :FunctionName = FunctionDualKairi
'    msgbox "dualkairi" & periodnum & "," & setrownum & "," & pairnum
'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim vnow1 : vnow1 = 0
    Dim vpre1 : vpre1 = hold(periodnum, setrownum, pairnum, DualKairiVnow1Col)
    Dim vnow2 : vnow2 = 0
    Dim vpre2 : vpre2 = hold(periodnum, setrownum, pairnum, DualKairiVnow2Col)

'同逆を計算する
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
'    ReDim holdKairiHeiken21(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
'    Dim hcode : hcode = tmp_set(inSetKairiCol)
'    Dim hcodes : hcodes = Split(hcode, "|")
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
'    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, holdKairiHeiken11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col))
'    dougyaku2 = getKairiDougyaku(setting, indicator2, price2, holdKairiHeiken21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col))
        
'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            End If
        end if
    Next

    For i = 1 To UBound(indicator2, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans : ans = KairiNasi
    
    'かい離有無（積が負の場合、かい離）
    If dougyaku1 * (vnow1 - vpre1) * dougyaku2 * (vnow2 - vpre2) < 0 Then
        ans = KairiAri
    End If
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, DualKairiAnsCol) = ans
        hold(periodnum, setrownum, pairnum, DualKairiVnow1Col) = vnow1
        hold(periodnum, setrownum, pairnum, DualKairiVnow2Col) = vnow2
        hold(periodnum, setrownum, pairnum, DualKairiVpre1Col) = vpre1
        hold(periodnum, setrownum, pairnum, DualKairiVpre2Col) = vpre2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, DualKairiAnsCol)
    End If
    
    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Heiken関数
' 目的   :  Heiken足の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionHeiken( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    set_code  _
)
    Dim FunctionName :FunctionName = FunctionHeiken

'    msgbox "heiken" & periodnum & "," & setrownum & "," & pairnum
'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim hopre : hopre = hold(periodnum, setrownum, pairnum, HeikenOpenCol)
    Dim hhpre : hhpre = hold(periodnum, setrownum, pairnum, HeikenHighCol)
    Dim hlpre : hlpre = hold(periodnum, setrownum, pairnum, HeikenLowCol)
    Dim hcpre : hcpre = hold(periodnum, setrownum, pairnum, HeikenCloseCol)
    Dim monow 
    Dim mhnow 
    Dim mlnow 
    Dim mcnow 
    Dim honow 
    Dim hhnow 
    Dim hlnow 
    Dim hcnow 

'出力用の値取得
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    if InStr(1,tmp_set(inSetCodeCol),"|") > 0 then
        Dim tmp_str: tmp_str = Split(tmp_set(inSetCodeCol), "|")
        indi_id = tmp_str(0)
        indi_id2 = tmp_str(1)
    else
        indi_id = tmp_set(inSetCodeCol)
        indi_id2 = tmp_set(inSetCodeCol)
    end if

    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            Dim tmp_set_num : tmp_set_num = Mid(set_code, 3, 10)
            If ("AA" + tmp_set_num) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    monow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
    '            End If
            ElseIf ("AB" + tmp_set_num) = tmp_indi(inIndiIDCol) Then
                mhnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            ElseIf ("AC" + tmp_set_num) = tmp_indi(inIndiIDCol) Then
                mlnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            ElseIf ("AD" + tmp_set_num) = tmp_indi(inIndiIDCol) Then
                mcnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    honow = (hopre + hcpre) / 2
    hhnow = mhnow
    hlnow = mlnow
'    msgbox "monow:"+monow +",mhnow:"+mhnow+",mlnow:"+mlnow+",mcnow:"+mcnow
    hcnow = (CDbl(monow) + CDbl(mhnow) + CDbl(mlnow) + CDbl(mcnow)) / 4
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, HeikenOpenCol) = honow
        hold(periodnum, setrownum, pairnum, HeikenHighCol) = hhnow
        hold(periodnum, setrownum, pairnum, HeikenLowCol) = hlnow
        hold(periodnum, setrownum, pairnum, HeikenCloseCol) = hcnow
    elseif writeflag = writeflag_off then
        honow = hold(periodnum, setrownum, pairnum, HeikenOpenCol)
        hcnow = hold(periodnum, setrownum, pairnum, HeikenCloseCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        ashi = periodnum
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = honow
                Case 2
                    value = hcnow
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　HeOsUD関数
' 目的   :  OsによるHeiken足の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionHeOsUD( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    set_code  _
)
    Dim FunctionName :FunctionName = FunctionHeOsUD

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim hopre : hopre = hold(periodnum, setrownum, pairnum, HeikenOpenCol)
    Dim hhpre : hhpre = hold(periodnum, setrownum, pairnum, HeikenHighCol)
    Dim hlpre : hlpre = hold(periodnum, setrownum, pairnum, HeikenLowCol)
    Dim hcpre : hcpre = hold(periodnum, setrownum, pairnum, HeikenCloseCol)
    Dim monow 
    Dim mhnow 
    Dim mlnow 
    Dim mcnow 
    Dim honow 
    Dim hhnow 
    Dim hlnow 
    Dim hcnow 


    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
'    if InStr(1,tmp_set(inSetCodeCol),"|") > 0 then
'        Dim tmp_str: tmp_str = Split(tmp_set(inSetCodeCol), "|")
'        indi_id = tmp_str(0)
'        indi_id2 = tmp_str(1)
'    else
'        indi_id = tmp_set(inSetCodeCol)
'        indi_id2 = tmp_set(inSetCodeCol)
'    end if

'set_codenに「|」が含まれるか否かで2指標差分計算か、単体指標計算かの処理を切り替える
    '「|」が含まれるとき（2指標差分）
    if InStr(1,set_code,"|") > 0 then
    '「|」が含まれないとき（単体指標）

    '出力用の値取得
        '関数の目的と合致
        Dim set_codes : set_codes = Split(set_code, "|")
        
        Dim tmp_code1 : tmp_code1 = Split(set_codes(0), "_")
        Dim tmp_code2 : tmp_code2 = Split(set_codes(1), "_")

        Dim monow2
        Dim mhnow2
        Dim mlnow2
        Dim mcnow2
    

        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If tmp_code1(0) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        monow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
        '            End If
                ElseIf tmp_code1(1) = tmp_indi(inIndiIDCol) Then
                    mhnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code1(2) = tmp_indi(inIndiIDCol) Then
                    mlnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code1(3) = tmp_indi(inIndiIDCol) Then
                    mcnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)

                ElseIf tmp_code2(0) = tmp_indi(inIndiIDCol) Then
                    monow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code2(1) = tmp_indi(inIndiIDCol) Then
                    mhnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code2(2) = tmp_indi(inIndiIDCol) Then
                    mlnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code2(3) = tmp_indi(inIndiIDCol) Then
                    mcnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        Next

        monow = monow - monow2
        mhnow = mhnow - mhnow2
        mlnow = mlnow - mlnow2
        mcnow = mcnow - mcnow2

    else
    '出力用の値取得
        '関数の目的と合致
        Dim tmp_code : tmp_code = Split(set_code, "_")

        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If tmp_code(0) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        monow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
        '            End If
                ElseIf tmp_code(1) = tmp_indi(inIndiIDCol) Then
                    mhnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code(2) = tmp_indi(inIndiIDCol) Then
                    mlnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf tmp_code(3) = tmp_indi(inIndiIDCol) Then
                    mcnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        Next

    end if

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    honow = (hopre + hcpre) / 2
    hhnow = mhnow
    hlnow = mlnow
'    msgbox "monow:"+monow +",mhnow:"+mhnow+",mlnow:"+mlnow+",mcnow:"+mcnow
    hcnow = (CDbl(monow) + CDbl(mhnow) + CDbl(mlnow) + CDbl(mcnow)) / 4
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, HeikenOpenCol) = honow
        hold(periodnum, setrownum, pairnum, HeikenHighCol) = hhnow
        hold(periodnum, setrownum, pairnum, HeikenLowCol) = hlnow
        hold(periodnum, setrownum, pairnum, HeikenCloseCol) = hcnow
    elseif writeflag = writeflag_off then
        honow = hold(periodnum, setrownum, pairnum, HeikenOpenCol)
        hcnow = hold(periodnum, setrownum, pairnum, HeikenCloseCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        ashi = periodnum
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = honow
                Case 2
                    value = hcnow
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　HeOsZG関数
' 目的   :  OsによるHeiken足の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionHeOsZG( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx , _
    loop_time, _
    set_code  _
)
    Dim FunctionName :FunctionName = FunctionHeOsZG

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_id2 
    Dim indi_day 
    Dim indi_time 

'各値を取得する
    Dim hopre : hopre = hold(periodnum, setrownum, pairnum, HeOsZGOpenCol)
    Dim hhpre : hhpre = hold(periodnum, setrownum, pairnum, HeOsZGHighCol)
    Dim hlpre : hlpre = hold(periodnum, setrownum, pairnum, HeOsZGLowCol)
    Dim hcpre : hcpre = hold(periodnum, setrownum, pairnum, HeOsZGCloseCol)
    Dim mopre
    Dim mhpre
    Dim mlpre
    Dim mcpre
    Dim monow 
    Dim mhnow 
    Dim mlnow 
    Dim mcnow 
    Dim honow 
    Dim hhnow 
    Dim hlnow 
    Dim hcnow 

    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    if InStr(1,tmp_set(inSetCodeCol),"|") > 0 then
        Dim tmp_str: tmp_str = Split(tmp_set(inSetCodeCol), "|")
        indi_id = tmp_str(0)
        indi_id2 = tmp_str(1)
    else
        indi_id = tmp_set(inSetCodeCol)
        indi_id2 = tmp_set(inSetCodeCol)
    end if

'set_codenに「|」が含まれるか否かで2指標差分計算か、単体指標計算かの処理を切り替える
    '「|」が含まれるとき（2指標差分）
    if InStr(1,set_code,"|") > 0 then
    '「|」が含まれないとき（単体指標）

    '出力用の値取得
        '関数の目的と合致
        Dim set_codes : set_codes = Split(set_code, "|")
        
        Dim tmp_code1 : tmp_code1 = Split(set_codes(0), "_")
        Dim tmp_code2 : tmp_code2 = Split(set_codes(1), "_")

        Dim monow2
        Dim mhnow2
        Dim mlnow2
        Dim mcnow2
        Dim mopre2
        Dim mhpre2
        Dim mlpre2
        Dim mcpre2
    

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                Dim tmp_indipre
                if Ubound(indicatorpre1) > 0 then
                    tmp_indipre = Split(indicatorpre1(i), ",")
                end if
                If tmp_code1(0) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        monow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if Ubound(tmp_indipre) > 0 then
                            mopre = tmp_indipre(inIndiPriceCol)
                        end if
        '            End If
                ElseIf tmp_code1(1) = tmp_indi(inIndiIDCol) Then
                    mhnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mhpre = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code1(2) = tmp_indi(inIndiIDCol) Then
                    mlnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mlpre = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code1(3) = tmp_indi(inIndiIDCol) Then
                    mcnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mcpre = tmp_indipre(inIndiPriceCol)
                    end if

                ElseIf tmp_code2(0) = tmp_indi(inIndiIDCol) Then
                    monow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mopre2 = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code2(1) = tmp_indi(inIndiIDCol) Then
                    mhnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mhpre2 = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code2(2) = tmp_indi(inIndiIDCol) Then
                    mlnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mlpre2 = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code2(3) = tmp_indi(inIndiIDCol) Then
                    mcnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mcpre2 = tmp_indipre(inIndiPriceCol)
                    end if
                End If
            end if
        Next

        monow = monow - monow2
        mhnow = mhnow - mhnow2
        mlnow = mlnow - mlnow2
        mcnow = mcnow - mcnow2
        mopre = mopre - mopre2
        mhpre = mhpre - mhpre2
        mlpre = mlpre - mlpre2
        mcpre = mcpre - mcpre2

    else
    '出力用の値取得
        '関数の目的と合致
        Dim tmp_code : tmp_code = Split(set_code, "_")

        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                if Ubound(indicatorpre1) > 0 then
                    tmp_indipre = Split(indicatorpre1(i), ",")
                end if

                If tmp_code(0) = tmp_indi(inIndiIDCol) Then
                    '足が合致
        '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                        indi_day = tmp_indi(inIndiDateCol)
                        indi_time = tmp_indi(inIndiTimeCol)
                        monow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if Ubound(tmp_indipre) > 0 then
                            mopre = tmp_indipre(inIndiPriceCol)
                        end if
        '            End If
                ElseIf tmp_code(1) = tmp_indi(inIndiIDCol) Then
                    mhnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mhpre = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code(2) = tmp_indi(inIndiIDCol) Then
                    mlnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mlpre = tmp_indipre(inIndiPriceCol)
                    end if
                ElseIf tmp_code(3) = tmp_indi(inIndiIDCol) Then
                    mcnow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    if Ubound(tmp_indipre) > 0 then
                        mcpre = tmp_indipre(inIndiPriceCol)
                    end if
                End If
            end if
        Next

    end if



'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    honow = (hopre + hcpre) / 2
    hhnow = (mhnow - mhpre)
    hlnow = (mlnow - mlpre)
'    msgbox "monow:"+monow +",mhnow:"+mhnow+",mlnow:"+mlnow+",mcnow:"+mcnow
    hcnow = (CDbl(monow-mopre) + CDbl(mhnow-mhpre) + CDbl(mlnow-mlpre) + CDbl(mcnow-mcpre)) / 4
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, HeOsZGOpenCol) = honow
        hold(periodnum, setrownum, pairnum, HeOsZGHighCol) = hhnow
        hold(periodnum, setrownum, pairnum, HeOsZGLowCol) = hlnow
        hold(periodnum, setrownum, pairnum, HeOsZGCloseCol) = hcnow
    elseif writeflag = writeflag_off then
        honow = hold(periodnum, setrownum, pairnum, HeOsZGOpenCol)
        hcnow = hold(periodnum, setrownum, pairnum, HeOsZGCloseCol)
    End If

    end if


'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        ashi = periodnum
        
        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = honow
                Case 2
                    value = hcnow
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Rsum関数
' 目的   :  Ratioの合計値
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRSum( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionRSum

'    msgbox "rsum" & periodnum & "," & setrownum & "," & pairnum

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim tmp
    '第1通貨の処理でない場合、重複となるため、計算しない
'    If pair1 = 1 Then
        Call calcFunctionRatio(setting, indicator1, price1, indicatorpre1, pricepre1, holdr1, periodnum, setrownum, pair1, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator2, price2, indicatorpre2, pricepre2, holdr2, periodnum, setrownum, pair2, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator3, price3, indicatorpre3, pricepre3, holdr3, periodnum, setrownum, pair3, outflag_off, writeflag, tmp, inSetName1Col)
'    End If
    Dim ratio1: ratio1 = holdr1(periodnum, setrownum, pair1, RatioRatioCol)
    Dim ratio2: ratio2 = holdr2(periodnum, setrownum, pair2, RatioRatioCol)
    Dim ratio3: ratio3 = holdr3(periodnum, setrownum, pair3, RatioRatioCol)
    Dim onow1: onow1 = holdr1(periodnum, setrownum, pair1, RatioOnowCol)
    Dim onow2: onow2 = holdr2(periodnum, setrownum, pair2, RatioOnowCol)
    Dim onow3: onow3 = holdr3(periodnum, setrownum, pair3, RatioOnowCol)
    Dim leader: leader = hold(periodnum, setrownum, pairnum, LeaderDirectionLeaderCol)
    Dim maxratio: maxratio = hold(periodnum, setrownum, pairnum, LeaderDirectionMaxRatioCol)

'同逆を計算する
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
'    if pair1 = 1 then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
'    else
'        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'    end if

    ratio1 = dougyaku1 * pair_keisu1 * ratio1
    ratio2 = dougyaku2 * pair_keisu2 * ratio2
    ratio3 = dougyaku3 * pair_keisu3 * ratio3
    onow1 = dougyaku1 * pair_keisu1 * onow1
    onow2 = dougyaku2 * pair_keisu2 * onow2
    onow3 = dougyaku3 * pair_keisu3 * onow3
    
'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
	tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
    '            End If
            End If
        end if
    Next

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
    Dim ans: ans = 0
    ans = ratio1 + ratio2 + ratio3
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RSumAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, RSumAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　OSum関数
' 目的   :  Osの合計値
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionOSum( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionOSum

'    msgbox "osum" & periodnum & "," & setrownum & "," & pairnum

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time
    Dim subset_flag : subset_flag = ""


'各値を取得する
    Dim tmp
    Dim vnow1
    Dim vnow2
    Dim vnow3
    Dim vpre1: vpre1 = hold(periodnum, setrownum, pairnum, OSumVnow1Col)
    Dim vpre2: vpre2 = hold(periodnum, setrownum, pairnum, OSumVnow2Col)
    Dim vpre3: vpre3 = hold(periodnum, setrownum, pairnum, OSumVnow3Col)
    Dim onow1
    Dim onow2
    Dim onow3

    '価格の取得
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    Dim pnow1 : pnow1 = tmp_price(inPricePriceCol)
    tmp_price = Split(price2(price_row), ",")
    Dim pnow2 : pnow2 = tmp_price(inPricePriceCol)
    tmp_price = Split(price3(price_row), ",")
    Dim pnow3 : pnow3 = tmp_price(inPricePriceCol)

'出力用の値取得
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        'subset_flagの代入
        subset_flag = tmp_set(inSetSubSettingCol)
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                vnow1 = vnow1

                indi_id = tmp_set(inSetCodeCol)
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            End If
        end if
    Next

    'indicator2より取得
    For i = 1 To UBound(indicator2, 1)
        '信号名が合致
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                vnow2 = vnow2
            End If
        end if
    Next

    'indicator3より取得
    For i = 1 To UBound(indicator3, 1)
        '信号名が合致
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                vnow3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                vnow3 = vnow3
            End If
        end if
    Next

    '正規化フラグ有無
    if InStr(1,subset_flag,"NORMAL")>0 then
        vnow2 = (vnow2 / pnow2) * pnow1
        vnow3 = (vnow3 / pnow3) * pnow1
    end if

    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1

    dougyaku1 = getKairiDougyaku2(setting, indicator1, price1, indicatorpre1, pricepre1, hcode, tmp_set(inSetName2Col), hmode)
    dougyaku2 = getKairiDougyaku2(setting, indicator2, price2, indicatorpre1, pricepre1, hcode, tmp_set(inSetName2Col), hmode)
    dougyaku3 = getKairiDougyaku2(setting, indicator3, price3, indicatorpre1, pricepre1, hcode, tmp_set(inSetName2Col), hmode)
        
    if InStr(1,subset_flag,"ZG")>0 then
        onow1 = dougyaku1 * pair_keisu1 * (vnow1-vpre1)
        onow2 = dougyaku2 * pair_keisu2 * (vnow2-vpre2)
        onow3 = dougyaku3 * pair_keisu3 * (vnow3-vpre3)
    else
        onow1 = dougyaku1 * pair_keisu1 * vnow1
        onow2 = dougyaku2 * pair_keisu2 * vnow2
        onow3 = dougyaku3 * pair_keisu3 * vnow3
    end if

    if CLng(PeriodArraySet(periodnum-1)) > 0 then
'指標値の計算

    Dim ans: ans = 0
    ans = onow1 + onow2 + onow3
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, OSumAnsCol) = ans
        hold(periodnum, setrownum, pairnum, OSumVnow1Col) = vnow1
        hold(periodnum, setrownum, pairnum, OSumVnow2Col) = vnow2
        hold(periodnum, setrownum, pairnum, OSumVnow3Col) = vnow3
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, OSumAnsCol)
        vnow1 = hold(periodnum, setrownum, pairnum, OSumVnow1Col)
        vnow2 = hold(periodnum, setrownum, pairnum, OSumVnow2Col)
        vnow3 = hold(periodnum, setrownum, pairnum, OSumVnow3Col)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Plus関数
' 目的   :  Osの合計値
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionPlus( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    ByRef holdhes1, ByRef holdhes2, ByRef holdhes3, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionPlus

'    msgbox "Plus" & periodnum & "," & setrownum & "," & pairnum

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim names 
    Dim tmp_set : tmp_set = Split(setting(setrownum), ",")
    names = Split(tmp_set(inSetName1Col), "|")
    Dim vnows1
    ReDim vnows1(UBound(names))

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '設定ファイルのNamesに「|」区切りで複数の指標コードが記載されている場合の対応
            For j = 0 To UBound(vnows1)
                If names(j) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    vnows1(j) = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            Next
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'指標値の計算
    
        Dim ans: ans = 0
    For j = 0 To Ubound(vnows1,1)
        ans = ans + vnows1(j)
    Next
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, PlusAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, PlusAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　MaxRatioPairNum関数
' 目的   :  最大Ratioのペア番号
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionMaxRatioPairNum( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionMaxRatioPairNum

'    msgbox "maxratio" & periodnum & "," & setrownum & "," & pairnum

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time
    Dim subset_flag : subset_flag = ""

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        'subset_flagの代入
        subset_flag = tmp_set(inSetSubSettingCol)
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
    '            End If
            End If
        end if
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'各値を取得する
    Dim tmp
    '第1通貨の処理でない場合、重複となるため、計算しない
'    If pair1 = 1 Then
        Call calcFunctionRatio(setting, indicator1, price1, indicatorpre1, pricepre1, holdr1, periodnum, setrownum, pair1, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator2, price2, indicatorpre2, pricepre2, holdr2, periodnum, setrownum, pair2, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator3, price3, indicatorpre3, pricepre3, holdr3, periodnum, setrownum, pair3, outflag_off, writeflag, tmp, inSetName1Col)
'    End If
    Dim ratio1: ratio1 = holdr1(periodnum, setrownum, pair1, RatioRatioCol)
    Dim ratio2: ratio2 = holdr2(periodnum, setrownum, pair2, RatioRatioCol)
    Dim ratio3: ratio3 = holdr3(periodnum, setrownum, pair3, RatioRatioCol)
    Dim onow1: onow1 = holdr1(periodnum, setrownum, pair1, RatioOnowCol)
    Dim onow2: onow2 = holdr2(periodnum, setrownum, pair2, RatioOnowCol)
    Dim onow3: onow3 = holdr3(periodnum, setrownum, pair3, RatioOnowCol)
    Dim leader: leader = hold(periodnum, setrownum, pairnum, LeaderDirectionLeaderCol)
    Dim maxratio: maxratio = hold(periodnum, setrownum, pairnum, LeaderDirectionMaxRatioCol)

    ratio1 = pair_keisu1 * ratio1
    ratio2 = pair_keisu1 * ratio2
    ratio3 = pair_keisu1 * ratio3
    onow1 = pair_keisu1 * onow1
    onow2 = pair_keisu1 * onow2
    onow3 = pair_keisu1 * onow3

    if subset_flag = "OS" then
        ratio1 = onow1
        ratio2 = onow2
        ratio3 = onow3
    end if
    
'指標値の計算
    'MaxRatioのペア番号の算出
    If Abs(ratio1) >= Abs(ratio2) And Abs(ratio1) >= Abs(ratio3) Then
        maxratio = 1
    ElseIf Abs(ratio2) >= Abs(ratio1) And Abs(ratio2) >= Abs(ratio3) Then
        maxratio = 2
    ElseIf Abs(ratio3) >= Abs(ratio1) And Abs(ratio3) >= Abs(ratio2) Then
        maxratio = 3
    End If

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, MaxRatioPairNumAnsCol) = maxratio
    elseif writeflag = writeflag_off then
        maxratio = hold(periodnum, setrownum, pairnum, MaxRatioPairNumAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = maxratio
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　LeaderNum関数
' 目的   :  リーダーの方向
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionLeaderNum( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionLeaderNum

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time
    Dim subset_flag : subset_flag = ""

    Dim onow11 : onow11 = 0
    Dim onow21 : onow21 = 0
    Dim onow31 : onow31 = 0
    Dim opre11 : opre11 = hold(periodnum, setrownum, pairnum, LeaderNumOnow11Col)
    Dim opre21 : opre21 = hold(periodnum, setrownum, pairnum, LeaderNumOnow21Col)
    Dim opre31 : opre31 = hold(periodnum, setrownum, pairnum, LeaderNumOnow31Col)

    '関数の目的と合致
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    'subset_flagの代入
    subset_flag = tmp_set(inSetSubSettingCol)
    
    '価格の更新
    Dim price_row: price_row = tmp_set(inSetPriceCol)
    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
    Dim pnow1 : pnow1 = tmp_price(inPricePriceCol)
    tmp_price = Split(price2(price_row), ",")
    Dim pnow2 : pnow2 = tmp_price(inPricePriceCol)
    tmp_price = Split(price3(price_row), ",")
    Dim pnow3 : pnow3 = tmp_price(inPricePriceCol)

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
                onow11 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next
    For i = 1 To UBound(indicator2, 1)
        '信号名が合致
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                onow21 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next
    For i = 1 To UBound(indicator3, 1)
        '信号名が合致
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                onow31 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            End If
        end if
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'各値を取得する
    Dim tmp
    '第1通貨の処理でない場合、重複となるため、計算しない
    Dim ratio1: ratio1 = onow11
    Dim ratio2: ratio2 = onow21
    Dim ratio3: ratio3 = onow31
    Dim leader: leader = 0

    '上下増減判断
    if InStr(1,subset_flag,"UD") >0 then
        ratio1 = onow11
        ratio2 = onow21
        ratio3 = onow31
    elseif InStr(1,subset_flag ,"ZG")>0 then
        ratio1 = onow11 - opre11
        ratio2 = onow21 - opre21
        ratio3 = onow31 - opre31
    end if

    '正規化判断
    If InStr(1,subset_flag,"NORMAL") > 0 then
        ratio1 = ratio1 / pnow1
        ratio2 = ratio2 / pnow2
        ratio3 = ratio3 / pnow3
    end if

    ratio1 = pair_keisu1 * ratio1
    ratio2 = pair_keisu2 * ratio2
    ratio3 = pair_keisu3 * ratio3
    
'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
    dougyaku1 = getKairiDougyaku2(setting, indicator1, price1, indicatorpre1, pricepre1, hcode, tmp_set(inSetName2Col), hmode)
    dougyaku2 = getKairiDougyaku2(setting, indicator2, price2, indicatorpre2, pricepre2, hcode, tmp_set(inSetName2Col), hmode)
    dougyaku3 = getKairiDougyaku2(setting, indicator3, price3, indicatorpre3, pricepre3, hcode, tmp_set(inSetName2Col), hmode)

'指標値の計算
    'リーダーの算出
      '//通貨1がリーダー候補
      If dougyaku1 > 0 Then
         '//通貨1,2がリーダー候補
         If dougyaku2 > 0 Then
            '//通貨1,2,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(ratio1, ratio2, ratio3)
            '//通貨1,2がリーダー候補
            Else
                leader = getLargestAbs(ratio1, ratio2, 0)
            End If
         '//通貨1がリーダー候補
         Else
            '//通貨1,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(ratio1, 0, ratio3)
            '//通貨1のみがリーダー候補
            Else
                leader = getLargestAbs(ratio1, 0, 0)
            End If
         End If
      '//通貨1がリーダー候補でない
      Else
         '//通貨2がリーダー候補
         If dougyaku2 > 0 Then
            '//通貨2,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(0, ratio2, ratio3)
            '//通貨2がリーダー候補
            Else
                leader = getLargestAbs(0, ratio2, 0)
            End If
         '//リーダー候補なし
         Else
            '//通貨3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(0, 0, ratio3)
            '//リーダー候補なし
            Else
                leader = 0
            End If
         End If
      End If

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, LeaderNumAnsCol) = leader
        hold(periodnum, setrownum, pairnum, LeaderNumOnow11Col) = onow11
        hold(periodnum, setrownum, pairnum, LeaderNumOnow21Col) = onow21
        hold(periodnum, setrownum, pairnum, LeaderNumOnow31Col) = onow31
    elseif writeflag = writeflag_off then
        leader = hold(periodnum, setrownum, pairnum, LeaderNumAnsCol)
    End If

    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = leader
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　LeaderShukiNum関数
' 目的   :  リーダーの方向
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionLeaderShukiNum( _
    setting , _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold , _
    ByRef holdhes, _
    periodnum , _
    setrownum , _
    pairnum , _
    outputflag , _
    writeflag , _
    ByRef outmtx,  _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionLeaderShukiNum

'ファイル出力時に使用する変数
    Dim indi_id 
    Dim indi_day 
    Dim indi_time 
    Dim pips_filter
    pips_filter = 1

    '関数の目的と合致
    tmp_set = Split(setting(setrownum), ",")
    'Periodの取得
    period = tmp_set(inSetThreCol)
    Dim subset_flag :subset_flag = tmp_set(inSetSubSettingCol)
    Dim names : names = Split(tmp_set(inSetName1Col),"|")
    '配列の拡張
    if ubound(hold,5) < Ubound(names)+1 then
        Redim preserve hold(maxPeriod, UBound(setting, 1), MaxPairSet, holdLeaderShukiNumColNum, Ubound(names)+1)
    end if

    Dim vnows
    Redim vnows(Ubound(names)+1)
    Dim maxvnow: maxvnow = 0
    Dim maxnum : maxnum = 1

    For loop_name = 1 To Ubound(names)+1
    '各値を取得する
        Dim onow1 : onow1 = 0
        Dim opre1 : opre1 = hold(periodnum, setrownum, pairnum, LeaderShukiNumOnow1Col,loop_name)
        Dim tmp_set : tmp_set = Split(setting(setrownum), ",")

    '出力用の値取得
        For i = 1 To UBound(indicator1, 1)
            '信号名が合致
            Dim tmp_indi : tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If names(loop_name-1) = tmp_indi(inIndiIDCol) Then
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                    onow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        Next
    
    '指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
        if subset_flag = "ZG" then
            vnows(loop_name) = onow1 - opre1
        else
            vnows(loop_name) = onow1
        end if

        '最大値の更新
        if maxvnow < Abs(vnows(loop_name)) then
            maxvnow = Abs(vnows(loop_name))
            maxnum = loop_name
        end if

        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, LeaderShukiNumAnsCol, loop_name) = 0
            hold(periodnum, setrownum, pairnum, LeaderShukiNumOnow1Col, loop_name) = onow1
            hold(periodnum, setrownum, pairnum, LeaderShukiNumOpre1Col, loop_name) = opre1
        End If
    end if

    next    
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

        ans = maxnum*2
        
        If writeflag = writeflag_on Then
            hold(periodnum, setrownum, pairnum, LeaderShukiNumAnsCol, 0) = ans
        elseif writeflag = writeflag_off then
            ans = hold(periodnum, setrownum, pairnum, LeaderShukiNumAnsCol, 0)
        End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day 
        Dim time 
        Dim id 
        Dim ashi 
        Dim value 
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　LeaderDirection関数
' 目的   :  リーダーの方向
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionLeaderDirection( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdr1, ByRef holdr2, ByRef holdr3, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionLeaderDirection

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'出力用の値取得
    For i = 1 To UBound(indicator1, 1)
        '関数の目的と合致
        Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
    '            End If
            End If
        end if
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'各値を取得する
    Dim tmp
    '第1通貨の処理でない場合、重複となるため、計算しない
'    If pair1 = 1 Then
        Call calcFunctionRatio(setting, indicator1, price1, indicatorpre1, pricepre1, holdr1, periodnum, setrownum, pair1, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator2, price2, indicatorpre2, pricepre2, holdr2, periodnum, setrownum, pair2, outflag_off, writeflag, tmp, inSetName1Col)
        Call calcFunctionRatio(setting, indicator3, price3, indicatorpre3, pricepre3, holdr3, periodnum, setrownum, pair3, outflag_off, writeflag, tmp, inSetName1Col)
'    End If
    Dim ratio1: ratio1 = holdr1(periodnum, setrownum, pair1, RatioRatioCol)
    Dim ratio2: ratio2 = holdr2(periodnum, setrownum, pair2, RatioRatioCol)
    Dim ratio3: ratio3 = holdr3(periodnum, setrownum, pair3, RatioRatioCol)
    Dim onow1: onow1 = holdr1(periodnum, setrownum, pair1, RatioOnowCol)
    Dim onow2: onow2 = holdr2(periodnum, setrownum, pair2, RatioOnowCol)
    Dim onow3: onow3 = holdr3(periodnum, setrownum, pair3, RatioOnowCol)
    Dim opre1: opre1 = holdr1(periodnum, setrownum, pair1, RatioOpreCol)
    Dim opre2: opre2 = holdr2(periodnum, setrownum, pair2, RatioOpreCol)
    Dim opre3: opre3 = holdr3(periodnum, setrownum, pair3, RatioOpreCol)
    Dim leader: leader = hold(periodnum, setrownum, pairnum, LeaderDirectionLeaderCol)
    Dim maxratio: maxratio = hold(periodnum, setrownum, pairnum, LeaderDirectionMaxRatioCol)

    ratio1 = pair_keisu1 * ratio1
    ratio2 = pair_keisu2 * ratio2
    ratio3 = pair_keisu3 * ratio3
    onow1 = pair_keisu1 * onow1
    onow2 = pair_keisu2 * onow2
    onow3 = pair_keisu3 * onow3
    opre1 = pair_keisu1 * onow1
    opre2 = pair_keisu2 * opre2
    opre3 = pair_keisu3 * opre3
    
'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
'    if pair1 = 1 then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
'    else
'        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'    end if
        
'指標値の計算
    'リーダーの算出
      '//通貨1がリーダー候補
      If dougyaku1 > 0 Then
         '//通貨1,2がリーダー候補
         If dougyaku2 > 0 Then
            '//通貨1,2,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(ratio1, ratio2, ratio3)
            '//通貨1,2がリーダー候補
            Else
                leader = getLargestAbs(ratio1, ratio2, 0)
            End If
         '//通貨1がリーダー候補
         Else
            '//通貨1,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(ratio1, 0, ratio3)
            '//通貨1のみがリーダー候補
            Else
                leader = getLargestAbs(ratio1, 0, 0)
            End If
         End If
      '//通貨1がリーダー候補でない
      Else
         '//通貨2がリーダー候補
         If dougyaku2 > 0 Then
            '//通貨2,3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(0, ratio2, ratio3)
            '//通貨2がリーダー候補
            Else
                leader = getLargestAbs(0, ratio2, 0)
            End If
         '//リーダー候補なし
         Else
            '//通貨3がリーダー候補
            If dougyaku3 > 0 Then
                leader = getLargestAbs(0, 0, ratio3)
            '//リーダー候補なし
            Else
                leader = 0
            End If
         End If
      End If

    'リーダー加味の方向の算出
    Dim ans: ans = 0
    ans = ratio1 + ratio2 + ratio3
    If leader = 2 Then
        If Abs(ratio1) > Abs(ratio2 + ratio3) Then
            ans = ratio1
        End If
    ElseIf leader = 4 Then
        If Abs(ratio2) > Abs(ratio1 + ratio3) Then
            ans = ratio2
        End If
    ElseIf leader = 6 Then
        If Abs(ratio3) > Abs(ratio1 + ratio2) Then
            ans = ratio3
        End If
    End If
   
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, LeaderDirectionAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, LeaderDirectionAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next

    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　getLargestAbs関数
' 目的   :  絶対値が最大の番号を返す
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function getLargestAbs( _
    val1, _
    val2, _
    val3 _
)
    Dim FunctionName :FunctionName = "getLargestAbs"

    Dim ans
    If Abs(val1) = Abs(val2) And Abs(val1) = Abs(val3) Then
        ans = 0
    elseIf Abs(val1) >= Abs(val2) And Abs(val1) >= Abs(val3) Then
        ans = 2
    ElseIf Abs(val2) >= Abs(val1) And Abs(val2) >= Abs(val3) Then
        ans = 4
    ElseIf Abs(val3) >= Abs(val1) And Abs(val3) >= Abs(val2) Then
        ans = 6
    End If

    getLargestAbs = ans

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　Maehenka関数
' 目的   :  １本前での他通貨の変化有無
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionMaehenka( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionMaehenka

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim vnow1: vnow1 = hold(periodnum, setrownum, pairnum, MaehenkaVnow1Col)
    Dim vpre1: vpre1 = hold(periodnum, setrownum, pairnum, MaehenkaVpre1Col)
    Dim vnow2: vnow2 = hold(periodnum, setrownum, pairnum, MaehenkaVnow2Col)
    Dim vpre2: vpre2 = hold(periodnum, setrownum, pairnum, MaehenkaVpre2Col)

'指標値の更新
    vppre1 = vpre1
    vpre1 = vnow1
    vppre2 = vpre2
    vpre2 = vnow2
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '足の合致
    '        If asi = tmp_indi(inIndiAshiCol) Then
                If "EA001" = tmp_indi(inIndiIDCol) Then
                    vnow1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                ElseIf "EB001" = tmp_indi(inIndiIDCol) Then
                    vnow2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
    '        End If
        end if
    Next
    

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    Dim ans: ans = 0
    
    If vnow1 > vnow2 And vpre1 <= vpre2 Then
        ans = 1
    ElseIf vnow1 < vnow2 And vpre1 >= vpre2 Then
        ans = 1
    Else
        ans = -1
    End If
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, MaehenkaAnsCol) = ans
        hold(periodnum, setrownum, pairnum, MaehenkaVnow1Col) = vnow1
        hold(periodnum, setrownum, pairnum, MaehenkaVnow2Col) = vnow2
        hold(periodnum, setrownum, pairnum, MaehenkaVpre1Col) = vpre1
        hold(periodnum, setrownum, pairnum, MaehenkaVpre2Col) = vpre2
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, MaehenkaAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　Sabun関数
' 目的   :  自他通貨の優先通貨
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSabun( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, _
    pair_keisu2, _
    pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionSabun

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim onow11: onow11 = hold(periodnum, setrownum, pairnum, SabunOnow1_1Col)
    Dim opre11: opre11 = hold(periodnum, setrownum, pairnum, SabunOpre1_1Col)
    Dim onow12: onow12 = hold(periodnum, setrownum, pairnum, SabunOnow1_2Col)
    Dim opre12: opre12 = hold(periodnum, setrownum, pairnum, SabunOpre1_2Col)
    Dim onow21: onow21 = hold(periodnum, setrownum, pairnum, SabunOnow2_1Col)
    Dim opre21: opre21 = hold(periodnum, setrownum, pairnum, SabunOpre2_1Col)
    Dim onow22: onow22 = hold(periodnum, setrownum, pairnum, SabunOnow2_2Col)
    Dim opre22: opre22 = hold(periodnum, setrownum, pairnum, SabunOpre2_2Col)
    Dim onow31: onow31 = hold(periodnum, setrownum, pairnum, SabunOnow3_1Col)
    Dim opre31: opre31 = hold(periodnum, setrownum, pairnum, SabunOpre3_1Col)
    Dim onow32: onow32 = hold(periodnum, setrownum, pairnum, SabunOnow3_2Col)
    Dim opre32: opre32 = hold(periodnum, setrownum, pairnum, SabunOpre3_2Col)

'指標値の更新
    Dim ho1
    Dim hc1
    Dim ho2
    Dim hc2
    Dim ho3
    Dim hc3
    
    opre11 = onow11
    opre12 = onow12
    opre21 = onow21
    opre22 = onow22
    opre31 = onow31
    opre32 = onow32
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow11 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow11 = onow11 / pnow
    '            End If
            '信号名2が合致
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow12 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow12 = onow12 / pnow
    '            End If
            End If
        
            '足の合致
    '        If asi = tmp_indi(inIndiAshiCol) Then
                If "EA001" = tmp_indi(inIndiIDCol) Then
                    ho1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf "EB001" = tmp_indi(inIndiIDCol) Then
                    hc1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
    '        End If
        end if
    Next
    
    'indicator2より取得
    For i = 1 To UBound(indicator2, 1) - 1
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow21 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow21 = onow21 / pnow
    '            End If
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow22 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow22 = onow22 / pnow
    '            End If
            End If
        
            '足の合致
    '        If asi = tmp_indi(inIndiAshiCol) Then
                If "EA001" = tmp_indi(inIndiIDCol) Then
                    ho2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf "EB001" = tmp_indi(inIndiIDCol) Then
                    hc2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
    '        End If
        end if
    Next
    
    'indicator3より取得
    For i = 1 To UBound(indicator3, 1) - 1
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow31 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow31 = onow31 / pnow
    '            End If
            '信号名2が合致
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow32 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow32 = onow32 / pnow
    '            End If
            End If
        
            '足の合致
    '        If asi = tmp_indi(inIndiAshiCol) Then
                If "EA001" = tmp_indi(inIndiIDCol) Then
                    ho3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                ElseIf "EB001" = tmp_indi(inIndiIDCol) Then
                    hc3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
    '        End If
        end if
    Next
    

'指標値の計算
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

    Dim dougyaku1: dougyaku1 = 1
    Dim dougyaku2: dougyaku2 = 1
    Dim dougyaku3: dougyaku3 = 1
    
    Dim sum_value: sum_value = 0
            
'    '//逆
'    If val1 * (hc1 - ho1) < 0 Then
'        dougyaku1 = -1
'    '//同
'    Else
'        douyauku1 = 1
'    End If
'
'    '//逆
'    If val2 * (hc2 - ho2) < 0 Then
'        dougyaku2 = -1
'    '//同
'    Else
'        douyauku2 = 1
'    End If
'
'    '//逆
'    If val3 * (hc3 - ho3) < 0 Then
'        dougyaku3 = -1
'    '//同
'    Else
'        douyauku3 = 1
'    End If
    
    '//差分量
    Dim ans: ans = dougyaku1 * pair_keisu1 * ((onow11 - opre11) - (onow12 - opre12)) _
                        + dougyaku2 * pair_keisu2 * ((onow21 - opre21) - (onow22 - opre22)) _
                        + dougyaku3 * pair_keisu3 * ((onow31 - opre31) - (onow32 - opre32))

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SabunAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SabunOnow1_1Col) = onow11
        hold(periodnum, setrownum, pairnum, SabunOpre1_1Col) = opre11
        hold(periodnum, setrownum, pairnum, SabunOnow1_2Col) = onow12
        hold(periodnum, setrownum, pairnum, SabunOpre1_2Col) = opre12
        hold(periodnum, setrownum, pairnum, SabunOnow2_1Col) = onow21
        hold(periodnum, setrownum, pairnum, SabunOpre2_1Col) = opre21
        hold(periodnum, setrownum, pairnum, SabunOnow2_2Col) = onow22
        hold(periodnum, setrownum, pairnum, SabunOpre2_2Col) = opre22
        hold(periodnum, setrownum, pairnum, SabunOnow3_1Col) = onow31
        hold(periodnum, setrownum, pairnum, SabunOpre3_1Col) = opre31
        hold(periodnum, setrownum, pairnum, SabunOnow3_2Col) = onow32
        hold(periodnum, setrownum, pairnum, SabunOpre3_2Col) = opre32
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SabunAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　SabunDougyaku関数
' 目的   :  自他通貨の優先通貨（同逆変換加味）
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSabunDougyaku( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    ByRef holdhe12, ByRef holdhe22, ByRef holdhe32, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionSabunDougyaku

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim onow11: onow11 = hold(periodnum, setrownum, pairnum, SabunOnow1_1Col)
    Dim opre11: opre11 = hold(periodnum, setrownum, pairnum, SabunOpre1_1Col)
    Dim onow12: onow12 = hold(periodnum, setrownum, pairnum, SabunOnow1_2Col)
    Dim opre12: opre12 = hold(periodnum, setrownum, pairnum, SabunOpre1_2Col)

'指標値の更新
    opre11 = onow11
    opre12 = onow12
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow11 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow11 = onow11 / pnow
    '            End If
            '信号名2が合致
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow12 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow12 = onow12 / pnow
    '            End If
            End If
        end if        
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'同逆を計算する
    Dim tmp 
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku11 : dougyaku11 = 1
    Dim dougyaku12 : dougyaku12 = 1

    DIm tmp_hcode : tmp_hcode = Split(hcode,"|")
    dougyaku11 = getKairiDougyaku2(setting, indicator1, price1, indicatorpre1, pricepre1, tmp_hcode(0), tmp_set(inSetName1Col), hmode)
    dougyaku12 = getKairiDougyaku2(setting, indicator1, price1, indicatorpre1, pricepre1, tmp_hcode(1), tmp_set(inSetName2Col), hmode)

'指標値の計算
    '//差分量
    Dim ans
    
    ans = pair_keisu1 * (dougyaku11 * (onow11 - opre11) - dougyaku12 * (onow12 - opre12))


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SabunAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SabunOnow1_1Col) = onow11
        hold(periodnum, setrownum, pairnum, SabunOpre1_1Col) = opre11
        hold(periodnum, setrownum, pairnum, SabunOnow1_2Col) = onow12
        hold(periodnum, setrownum, pairnum, SabunOpre1_2Col) = opre12
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SabunAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function



'***********************************************************
' 機能   :　SabunDougyaku2関数
' 目的   :  自他通貨の優先通貨（同逆変換加味） 量による考え方【未完成】
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionSabunDougyaku2( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    ByRef holdhe12, ByRef holdhe22, ByRef holdhe32, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionSabunDougyaku2

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim onow11: onow11 = hold(periodnum, setrownum, pairnum, SabunOnow1_1Col)
    Dim opre11: opre11 = hold(periodnum, setrownum, pairnum, SabunOpre1_1Col)
    Dim onow12: onow12 = hold(periodnum, setrownum, pairnum, SabunOnow1_2Col)
    Dim opre12: opre12 = hold(periodnum, setrownum, pairnum, SabunOpre1_2Col)
    Dim onow21: onow21 = hold(periodnum, setrownum, pairnum, SabunOnow2_1Col)
    Dim opre21: opre21 = hold(periodnum, setrownum, pairnum, SabunOpre2_1Col)
    Dim onow22: onow22 = hold(periodnum, setrownum, pairnum, SabunOnow2_2Col)
    Dim opre22: opre22 = hold(periodnum, setrownum, pairnum, SabunOpre2_2Col)
    Dim onow31: onow31 = hold(periodnum, setrownum, pairnum, SabunOnow3_1Col)
    Dim opre31: opre31 = hold(periodnum, setrownum, pairnum, SabunOpre3_1Col)
    Dim onow32: onow32 = hold(periodnum, setrownum, pairnum, SabunOnow3_2Col)
    Dim opre32: opre32 = hold(periodnum, setrownum, pairnum, SabunOpre3_2Col)

'指標値の更新
    opre11 = onow11
    opre12 = onow12
    opre21 = onow21
    opre22 = onow22
    opre31 = onow31
    opre32 = onow32
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow11 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow11 = onow11 / pnow
    '            End If
            '信号名2が合致
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow12 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow12 = onow12 / pnow
    '            End If
            End If
        end if        
    Next
    
    'indicator2より取得
    For i = 1 To UBound(indicator2, 1) - 1
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow21 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow21 = onow21 / pnow
    '            End If
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow22 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow22 = onow22 / pnow
    '            End If
            End If
        end if        
    Next
    
    'indicator3より取得
    For i = 1 To UBound(indicator3, 1) - 1
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow31 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow31 = onow31 / pnow
    '            End If
            '信号名2が合致
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow32 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow32 = onow32 / pnow
    '            End If
            End If
        end if        
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'同逆を計算する
    Dim tmp 
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku11 : dougyaku11 = 1
    Dim dougyaku21 : dougyaku21 = 1
    Dim dougyaku31 : dougyaku31 = 1
    Dim dougyaku12 : dougyaku12 = 1
    Dim dougyaku22 : dougyaku22 = 1
    Dim dougyaku32 : dougyaku32 = 1
'    if pair1 = 1 then
        dougyaku11 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku21 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku31 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku12 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
        dougyaku22 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe22, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
        dougyaku32 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe32, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, true)
'    else
'        dougyaku11 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku21 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku31 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku12 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe12, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, false)
'        dougyaku22 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe22, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, false)
'        dougyaku32 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe32, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(1), tmp_set(inSetName2Col), hmode, false)
'    end if
        
'指標値の計算
    '//差分量
    Dim ans
    
    ans = pair_keisu1 * (dougyaku11 * (onow11 - opre11) - dougyaku12 * (onow12 - opre12)) _
                    + pair_keisu2 * (dougyaku21 * (onow21 - opre21) - dougyaku22 * (onow22 - opre22)) _
                    + pair_keisu3 * (dougyaku31 * (onow31 - opre31) - dougyaku32 * (onow32 - opre32))


    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, SabunAnsCol) = ans
        hold(periodnum, setrownum, pairnum, SabunOnow1_1Col) = onow11
        hold(periodnum, setrownum, pairnum, SabunOpre1_1Col) = opre11
        hold(periodnum, setrownum, pairnum, SabunOnow1_2Col) = onow12
        hold(periodnum, setrownum, pairnum, SabunOpre1_2Col) = opre12
        hold(periodnum, setrownum, pairnum, SabunOnow2_1Col) = onow21
        hold(periodnum, setrownum, pairnum, SabunOpre2_1Col) = opre21
        hold(periodnum, setrownum, pairnum, SabunOnow2_2Col) = onow22
        hold(periodnum, setrownum, pairnum, SabunOpre2_2Col) = opre22
        hold(periodnum, setrownum, pairnum, SabunOnow3_1Col) = onow31
        hold(periodnum, setrownum, pairnum, SabunOpre3_1Col) = opre31
        hold(periodnum, setrownum, pairnum, SabunOnow3_2Col) = onow32
        hold(periodnum, setrownum, pairnum, SabunOpre3_2Col) = opre32
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, SabunAnsCol)
    End If

    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function




'***********************************************************
' 機能   :　Jita関数
' 目的   :  自他通貨の優先通貨
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJita( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionJita

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'指標値の更新
    Dim val1
    Dim val2
    Dim val3
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val1 = val1 / pnow
    '            End If
            End If
        end if
    Next
    
    'indicator2より取得
    For i = 1 To UBound(indicator2, 1) - 1
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
        '信号名1が合致
        If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
            '足が合致
'            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                val2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                '価格の更新
                price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                tmp_price = Split(price2(price_row), ",")
                pnow = tmp_price(inPricePriceCol)
                
                '正規化
                val2 = val2 / pnow
'            End If
        End If
        end if
    Next
    
    'indicator3より取得
    For i = 1 To UBound(indicator3, 1) - 1
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
        '信号名1が合致
        If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
            '足が合致
'            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                val3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                '価格の更新
                price_row = tmp_set(inSetPriceCol)
                ppre = pnow
                tmp_price = Split(price3(price_row), ",")
                pnow = tmp_price(inPricePriceCol)
                
                '正規化
                val3 = val3 / pnow
'            End If
        End If
        end if
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then


'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
    dougyaku1 = getKairiDougyaku2(setting, indicator1, price1, indicatorpre1, pricepre1, hcode, tmp_set(inSetName1Col), hmode)
    dougyaku2 = getKairiDougyaku2(setting, indicator2, price2, indicatorpre1, pricepre1, hcode, tmp_set(inSetName1Col), hmode)
    dougyaku3 = getKairiDougyaku2(setting, indicator3, price3, indicatorpre1, pricepre1, hcode, tmp_set(inSetName1Col), hmode)
        
'指標値の計算
    '//差分量
    Dim ans: ans = 0
    If Abs(dougyaku2 * pair_keisu2 * val2 + dougyaku3 * pair_keisu3 * val3) > Abs(dougyaku1 * pair_keisu1 * val1) Then
        ans = -1
    Else
        ans = 1
    End If

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JitaAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, JitaAnsCol)
    End If
    
    end if

'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
    
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　JTvalue関数
' 目的   :  自他通貨の差分値
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJTvalue( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionJTvalue

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'指標値の更新
    Dim val1
    Dim val2
    Dim val3
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val1 = val1 / pnow
    '            End If
            End If
        end if        
    Next
    
    'indicator2より取得
    For i = 1 To UBound(indicator2, 1) - 1
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val2 = val2 / pnow
    '            End If
            End If
        end if        
    Next
    
    'indicator3より取得
    For i = 1 To UBound(indicator3, 1) - 1
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
            
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val3 = val3 / pnow
    '            End If
            End If
        end if        
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
'    if pair1 = 1 then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
'    else
'        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'    end if
        
'指標値の計算
    '//差分量
    Dim ans: ans = dougyaku2 * pair_keisu2 * val2 + dougyaku3 * pair_keisu3 * val3 - dougyaku1 * pair_keisu1 * val1

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JTvalueAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, JTvalueAnsCol)
    End If

    end if 
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Tvalue関数
' 目的   :  自他通貨の優先通貨
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionTvalue( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    indicator2 , price2 , indicatorpre2 , pricepre2 , _
    indicator3 , price3 , indicatorpre3 , pricepre3 , _
    ByRef hold, _
    ByRef holdhe11, ByRef holdhe21, ByRef holdhe31, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu2, pair_keisu3, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pair1, pair2, pair3 _
)
    Dim FunctionName :FunctionName = FunctionTvalue

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'指標値の更新
    Dim val2
    Dim val3
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator2より取得
    For i = 1 To UBound(indicator2, 1) - 1
        tmp_indi = Split(indicator2(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price2(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val2 = val2 / pnow
    '            End If
            End If
        end if        
    Next
    
    'indicator3より取得
    For i = 1 To UBound(indicator3, 1) - 1
        tmp_indi = Split(indicator3(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val3 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    '価格の更新
                    price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    tmp_price = Split(price3(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val3 = val3 / pnow
    '            End If
            End If
        end if        
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
    Dim dougyaku2 : dougyaku2 = 1
    Dim dougyaku3 : dougyaku3 = 1
'    if pair1 = 1 then
        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
'    else    
'        dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku2 = getKairiDougyaku(setting, indicator2, price2, indicatorpre2, pricepre2, holdhe21, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'        dougyaku3 = getKairiDougyaku(setting, indicator3, price3, indicatorpre3, pricepre3, holdhe31, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, false)
'    end If

'指標値の計算
    '//差分量
    Dim ans: ans = dougyaku2 * pair_keisu2 * val2 + dougyaku3 * pair_keisu3 * val3

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, TvalueAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, TvalueAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Jvalue関数
' 目的   :  自通貨の値
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionJvalue( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold, _
    ByRef holdhe11, _
    periodnum, _
    setrownum, _
    pairnum, _
    pair_keisu1, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time _
)
    Dim FunctionName :FunctionName = FunctionJvalue

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'指標値の更新
    Dim val1
    
    Dim asi
    
    Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
    asi = tmp_set(inSetAsi1Col)
    
    'indicator1より取得
    For i = 1 To UBound(indicator1, 1)
        Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            '信号名1が合致
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    val1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
                    ppre = pnow
                    Dim tmp_price: tmp_price = Split(price1(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                
                    '正規化
                    val1 = val1 / pnow
    '            End If
            End If
        end if        
    Next
    
    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
    dougyaku1 = getKairiDougyaku(setting, indicator1, price1, indicatorpre1, pricepre1, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    
'指標値の計算
    '//差分量
    Dim ans: ans = dougyaku1 * pair_keisu1 * val1

    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, JitaAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, JitaAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　AbsIchi関数
' 目的   :  25近接の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionAbsIchi( _
    setting, _
    indicator , price , indicatorpre , pricepre , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionAbsIchi

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

    Dim val1
    Dim val2
    Dim lev
    
'指標値の更新
    For i = 1 To UBound(indicator, 1)
        '関数の目的と合致
        Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
        '信号名1が合致
        Dim tmp_indi: tmp_indi = Split(indicator(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                
                    val1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
    '            End If
            ElseIf tmp_set(inSetName2Col) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi2Col) = tmp_indi(inIndiAshiCol) Then                '
                
                    val2 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
    '            End If
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'閾値の変数保持
    tmp_set = Split(setting(setrownum), ",")
    lev = tmp_set(inSetThreCol) * pips
    
'回答の格納
    Dim ans
    If Abs(val1 - val2) > lev Then
        ans = 1
    Else
        ans = -1
    End If
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, AbsIchiAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, AbsIchiAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　Abs関数
' 目的   :  絶対値化関数
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionAbs( _
    setting, _
    indicator , price , indicatorpre , pricepre , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    pips _
)
    Dim FunctionName :FunctionName = FunctionAbs

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

    Dim val1
    
'指標値の更新
    For i = 1 To UBound(indicator, 1)
        '関数の目的と合致
        Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
        '信号名1が合致
        Dim tmp_indi: tmp_indi = Split(indicator(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(inSetName1Col) = tmp_indi(inIndiIDCol) Then
                
                val1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                
                indi_day = tmp_indi(inIndiDateCol)
                indi_time = tmp_indi(inIndiTimeCol)
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then
    
'閾値の変数保持
    Dim ans : ans = Abs(val1)
    
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, AbsAnsCol) = ans
    elseif writeflag = writeflag_off then
        ans = hold(periodnum, setrownum, pairnum, AbsAnsCol)
    End If

    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ans
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　Ratio関数
' 目的   :  価格Os比の計算
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function calcFunctionRatio( _
    setting, _
    indicator , price , indicatorpre , pricepre , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    loop_time, _
    setnamecol _
)
    Dim FunctionName :FunctionName = FunctionRatio

'ファイル出力時に使用する変数
    Dim indi_id
    Dim indi_day
    Dim indi_time

'各値を取得する
    Dim omax: omax = hold(periodnum, setrownum, pairnum, RatioOMaxCol)
    Dim ost: ost = hold(periodnum, setrownum, pairnum, RatioOStCol)
    Dim pmax: pmax = hold(periodnum, setrownum, pairnum, RatioPMaxCol)
    Dim pst: pst = hold(periodnum, setrownum, pairnum, RatioPStCol)
    Dim onow: onow = hold(periodnum, setrownum, pairnum, RatioOnowCol)
    Dim opre: opre = hold(periodnum, setrownum, pairnum, RatioOpreCol)
    Dim pnow: pnow = hold(periodnum, setrownum, pairnum, RatioPnowCol)
    Dim ppre: ppre = hold(periodnum, setrownum, pairnum, RatioPpreCol)
    Dim ratio: ratio = hold(periodnum, setrownum, pairnum, RatioRatioCol)
    Dim obli: obli = hold(periodnum, setrownum, pairnum, RatioObliCol)
    Dim aveval: aveval = hold(periodnum, setrownum, pairnum, RatioAvevalCol)
    Dim avecount: avecount = hold(periodnum, setrownum, pairnum, RatioAvecountCol)
    
    Dim pnow2: pnow2 = hold(periodnum, setrownum, pairnum, RatioPnowCol)
    Dim ppre2: ppre2 = hold(periodnum, setrownum, pairnum, RatioPpreCol)
    
'指標値の更新
    opre = onow
    For i = 1 To UBound(indicator, 1)
        '関数の目的と合致
        Dim tmp_set: tmp_set = Split(setting(setrownum), ",")
        '信号名が合致
        Dim tmp_indi: tmp_indi = Split(indicator(i), ",")
        if Ubound(tmp_indi,1) > 1 then
            If tmp_set(setnamecol) = tmp_indi(inIndiIDCol) Then
                '足が合致
    '            If tmp_set(inSetAsi1Col) = tmp_indi(inIndiAshiCol) Then                '
                    onow = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    indi_id = tmp_set(inSetCodeCol)
                    indi_day = tmp_indi(inIndiDateCol)
                    indi_time = tmp_indi(inIndiTimeCol)
                
                    '価格の更新
                    Dim price_row: price_row = tmp_set(inSetPriceCol)
    '                Msgbox Ubound(tmp_set) & "," & price_row & "," & Ubound(price) & "," & price(0) &"," & price(1) &"," & price(2) &"," & price(3) &"," & price(4) &"," & price(5)
                    ppre = pnow
                    ppre2 = pnow2
                    Dim tmp_price: tmp_price = Split(price(price_row), ",")
                    pnow = tmp_price(inPricePriceCol)
                    pnow2 = tmp_price(inPricePriceCol)
                
                    '正規化
                    onow = onow / pnow
                    ppre = ppre / pnow
                    pnow = pnow / pnow
                    Exit For
    '            End If
            End If
        end if
    Next

    if CLng(PeriodArraySet(periodnum-1)) > 0 then

'指標の計算
    '//上転換時
    If onow > 0 And opre < 0 Then
       If avecount > 0 Then
            aveval = (omax - ost) / avecount
       Else
            aveval = omax - ost
       End If
       
       '//分母が0でない
       If omax <> ost Then
           obli = (pmax - pst) / (omax - ost)
       End If
       
       '//比率の算出
       Dim div_onow: div_onow = onow - opre
       Dim div_omax: div_omax = omax - ost

       omax = onow
       pmax = pnow
       ost = opre
       pst = ppre
       
       '//Os差分値が積算差分値よりも大きい場合、Osの変化量を出力値とする
       '//下転換後の最大値を用いる（初回のため、最大値と値がイコールになってしまうため）
       If div_omax = 0 Then
           ratio = 0
       Else
           ratio = (pnow - ppre) - (pmax - pst) * (div_onow) / (div_omax)
       End If
       
       avecount = 1
    '//下転換時
    ElseIf onow < 0 And opre > 0 Then
        If avecount > 0 Then
            aveval = (omax - ost) / avecount
        Else
            aveval = omax - ost
        End If
       
       '//分母が0でない
       If omax <> ost Then
           obli = (pmax - pst) / (omax - ost)
       End If
       
       div_omax = omax - ost
       div_onow = onow - opre
       
       '１回前の最大Os,最大価格を使用するため、更新を計算後に行う
       omax = onow
       pmax = pnow
       ost = opre
       pst = ppre
       
       '//比率の算出
       '//Os差分値が積算差分値よりも大きい場合、Osの変化量を出力値とする
       '//上転換後の最大値を用いる（初回のため、最大値と値がイコールになってしまうため）←反映保留
       If div_omax = 0 Then
           ratio = 0
       Else
           ratio = (pnow - ppre) - (pmax - pst) * (div_onow) / (div_omax)
       End If
    
       avecount = 1
    '//上転換後状態
    ElseIf onow > 0 And avecount > 0 Then
       '//開始位置の値の保持
       aveval = (omax - ost) / avecount

       '//分母が0でない
       If omax <> ost Then
           obli = (pmax - pst) / (omax - ost)
       End If
       
       '//最大値の更新・保持
       If omax < ost _
        And pmax < pnow _
        And opre < onow _
        And ppre < pnow Then
           omax = onow
           pmax = pnow
           avecount = avecount + 1
       End If
          
       '//比率の算出
       div_onow = onow - opre
       div_omax = omax - ost
       
       '//Os差分値が積算差分値よりも大きい場合、Osの変化量を出力値とする
       If div_omax = 0 Then
           ratio = 0
       Else
           ratio = (pnow - ppre) - (pmax - pst) * (div_onow) / (div_omax)
       End If
    '//下転換後状態
    ElseIf onow < 0 And avecount > 0 Then
       '//開始位置の値の保持
       aveval = (omax - ost) / avecount

       '//分母が0でない
       If omax <> ost Then
           obli = (pmax - pst) / (omax - ost)
       End If
                   
       '//最大値の更新・保持
       If omax > onow _
        And pmax > pnow _
        And opre > onow _
        And ppre > pnow Then
           omax = onow
           pmax = pnow
           avecount = avecount + 1
       End If
                   
       '//比率の算出
       div_onow = onow - opre
       div_omax = omax - ost
       ''//Os差分値が積算差分値よりも大きい場合、Osの変化量を出力値とする
       If div_omax = 0 Then
           ratio = 0
       Else
           ratio = (pnow - ppre) - (pmax - pst) * (div_onow) / (div_omax)
       End If
    End If
    
'同逆を計算する
    tmp_set = Split(setting(setrownum), ",")
    Dim hcode : hcode = tmp_set(inSetKairiCol)
    Dim hcodes : hcodes = Split(hcode, "|")
    Dim hmode : hmode = tmp_set(inSetHmodeCol)
    
    Dim dougyaku1 : dougyaku1 = 1
'    ReDim holdKairiHeiken11(maxPeriod, UBound(inSetMtx, 1), MaxPairSet, holdHeikenColNum)
'    dougyaku1 = getKairiDougyaku(setting, indicator, price, indicatorpre, pricepre, holdhe11, periodnum, setrownum, pairnum, outflag_off, writeflag_on, tmp, hcodes(0), tmp_set(inSetName1Col), hmode, true)
    
    ratio = ratio * dougyaku1
    
'各値を保持する
    '空の場合に追記する
    If writeflag = writeflag_on Then
        hold(periodnum, setrownum, pairnum, RatioOMaxCol) = omax
        hold(periodnum, setrownum, pairnum, RatioOStCol) = ost
        hold(periodnum, setrownum, pairnum, RatioPMaxCol) = pmax
        hold(periodnum, setrownum, pairnum, RatioPStCol) = pst
        hold(periodnum, setrownum, pairnum, RatioOnowCol) = onow
        hold(periodnum, setrownum, pairnum, RatioOpreCol) = opre
        hold(periodnum, setrownum, pairnum, RatioPnowCol) = pnow2
        hold(periodnum, setrownum, pairnum, RatioPpreCol) = ppre2
        hold(periodnum, setrownum, pairnum, RatioRatioCol) = ratio
        hold(periodnum, setrownum, pairnum, RatioObliCol) = obli
        hold(periodnum, setrownum, pairnum, RatioAvevalCol) = aveval
        hold(periodnum, setrownum, pairnum, RatioAvecountCol) = avecount
    elseif writeflag = writeflag_off then
        ratio = hold(periodnum, setrownum, pairnum, RatioRatioCol)
    End If
    
    end if
    
'出力配列への格納
    If outputflag = outflag_on Then
        Dim day
        Dim time
        Dim id
        Dim ashi
        Dim value
        
        day = indi_day
        time = indi_time
        id = indi_id
        ashi = periodnum

        Dim tmp_id : tmp_id = Split(tmp_set(inSetCodeCol), "|")
        Dim tmp_num : tmp_num = Split(tmp_set(inSetNumberCol), "|")

        For loop_id = 0  To Ubound(tmp_id,1)
            Select Case tmp_num(loop_id)
                Case 1
                    value = ratio
            End Select

            if CLng(PeriodArraySet(periodnum-1)) <= 0 then
                value = 0
            end if

            id = tmp_id(loop_id)
            '配列へ値の格納
            Call SetOutputMtx2(outmtx, id, value, loop_time)
            Call UpdateInputMtx2(pairnum, id, value, loop_time)
        Next
        
    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　getKairiDougyaku関数
' 目的   :  自他通貨の優先通貨
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function getKairiDougyaku( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    ByRef hold, _
    periodnum, _
    setrownum, _
    pairnum, _
    outputflag, _
    writeflag, _
    ByRef outmtx, _
    hcode, _
    valcode, _
    mode, _
    cal_flag _
)
    Dim FunctionName :FunctionName = "getKairiDougyaku"

'指標値の更新
    Dim ho1: ho1 = 0
    Dim hc1: hc1 = 0
    
    Dim dval1: dval1 = 0
    
    'Heiken関数の計算を行う
    Dim tmp
    if cal_flag = true then
        if mode = "UD" then
            Call calcFunctionHeOsUD(setting, indicator1, price1, indicatorpre1, pricepre1, hold, periodnum, setrownum, pairnum, outflag_off, writeflag, tmp, hcode)
        elseif mode = "ZG" then
            Call calcFunctionHeOsZG(setting, indicator1, price1, indicatorpre1, pricepre1, hold, periodnum, setrownum, pairnum, outflag_off, writeflag, tmp, hcode)
        elseif mode = "AA" then
            Call calcFunctionHeiken(setting, indicator1, price1, indicatorpre1, pricepre1, hold, periodnum, setrownum, pairnum, outflag_off, writeflag, tmp, hcode)
        end if
    end if
    
    if mode ="UD" or mode ="ZG" or mode = "AA" then
        'holdより取得
            ho1 = hold(periodnum, setrownum, pairnum, HeikenOpenCol)
            hc1 = hold(periodnum, setrownum, pairnum, HeikenCloseCol)
    
        'indicator1より取得
        For i = 1 To UBound(indicator1, 1)
            Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If valcode = tmp_indi(inIndiIDCol) Then
                    dval1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If
            end if
        Next
    elseif mode = "PRICE" then
        '価格の増減より取得
            Dim price_row: price_row = inPriceOpenRow
            Dim tmp_price: tmp_price = Split(pricepre1(price_row), ",")
            ho1 = tmp_price(inPricePriceCol)
'            price_row: price_row = inPriceCloseRow
            tmp_price: tmp_price = Split(price1(price_row), ",")
            hc1 = tmp_price(inPricePriceCol)
    
        'indicator1より取得
        For i = 1 To UBound(indicator1, 1)
            tmp_indi: tmp_indi = Split(indicator1(i), ",")
            Dim tmp_indi_pre: tmp_indi_pre = Split(indicatorpre1(i), ",")
            Dim dval_now, dval_pre
            if Ubound(tmp_indi,1) > 1 then
                If valcode = tmp_indi(inIndiIDCol) Then
                    dval_now = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    dval_pre = tmp_indi_pre(inIndiPriceCol)
                    dval1 = dval_now - dval_pre
                End If
            end if
        Next
    end if
    if dval1 = "" then
        dval1 = 0
    end if
    
'指標値の計算
    Dim dougyaku1: dougyaku1 = 1
            
    '//逆
    If dval1 * (hc1 - ho1) < 0 Then
        dougyaku1 = -1
    '//同
    Else
        douyauku1 = 1
    End If
    
    getKairiDougyaku = dougyaku1
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　getKairiDougyaku関数（新版）
' 目的   :  自他通貨の優先通貨
' 引数   :  指標、価格、保持値
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function getKairiDougyaku2( _
    setting, _
    indicator1 , price1 , indicatorpre1 , pricepre1 , _
    hcode, _
    valcode, _
    mode _
)
    Dim FunctionName :FunctionName = "getKairiDougyaku2"

'指標値の更新
    Dim ho1: ho1 = 0
    Dim hc1: hc1 = 0
    
    Dim dval1: dval1 = 0
    
    '指標の値を取得する
    
    if mode = "PRICE" then
        '価格の増減より取得
            Dim price_row: price_row = inPriceOpenRow
            Dim tmp_price: tmp_price = Split(pricepre1(price_row), ",")
            ho1 = tmp_price(inPricePriceCol)
'            price_row: price_row = inPriceCloseRow
            tmp_price: tmp_price = Split(price1(price_row), ",")
            hc1 = tmp_price(inPricePriceCol)
    
        'indicator1より取得
        For i = 1 To UBound(indicator1, 1)
            tmp_indi: tmp_indi = Split(indicator1(i), ",")
            Dim tmp_indi_pre: tmp_indi_pre = Split(indicatorpre1(i), ",")
            Dim dval_now, dval_pre
            if Ubound(tmp_indi,1) > 1 then
                If valcode = tmp_indi(inIndiIDCol) Then
                    dval_now = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                    dval_pre = tmp_indi_pre(inIndiPriceCol)
                    dval1 = dval_now - dval_pre
                End If
            end if
        Next
    elseif mode ="HCODE" then
        Dim tmp_codes : tmp_codes = Split(hcode,"_")
        'indicator1より取得
        For i = 1 To UBound(indicator1, 1)
            Dim tmp_indi: tmp_indi = Split(indicator1(i), ",")
            if Ubound(tmp_indi,1) > 1 then
                If valcode = tmp_indi(inIndiIDCol) Then
                    dval1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                End If

                if hcode <> "" then
                    if tmp_codes(0) = tmp_indi(inIndiIDCol) then
                        ho1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if ho1 = "" then
                            ho1 = 0
                        end if
                    elseif tmp_codes(1) = tmp_indi(inIndiIDCol) then
                        hc1 = GetArrayValueZero(tmp_indi,inIndiPriceCol)
                        if hc1 = "" then
                            hc1 = 0
                        end if
                    end if
                end if
            end if
        Next
    end if
    
    if dval1 = "" then
        dval1 = 0
    end if


'指標値の計算
    Dim dougyaku1: dougyaku1 = 1
            
    '//逆
    If dval1 * (hc1 - ho1) < 0 Then
        dougyaku1 = -1
    '//同
    Else
        douyauku1 = 1
    End If
    
    getKairiDougyaku2 = dougyaku1
    
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function
    
'***********************************************************
' 機能   : 出力用配列への情報格納
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Function SetOutputMtx( _
    outmtx, _
    id, _
    day, _
    time, _
    ashi, _
    value, _
    code _
)
    Dim FunctionName :FunctionName = "SetOutputMtx"

    For i = 1 To outPutRowNum - 1
        '空行を探す
        If outmtx(i, 0) = "" Then
            'カラム行の追加
            If i = 1 Then
                outmtx(0, outIDCol) = "ID"
                outmtx(0, outDayCol) = "Day"
                outmtx(0, outTimeCol) = "Time"
                outmtx(0, outAshiCol) = "Ashi"
                outmtx(0, outPriceCol) = "Price"
            End If
            '値の格納
            outmtx(i, outIDCol) = id
            outmtx(i, outDayCol) = day
            outmtx(i, outTimeCol) = time
            outmtx(i, outAshiCol) = ashi
            outmtx(i, outPriceCol) = value
            Exit For
        End If
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function
    
'***********************************************************
' 機能   : 出力用配列への情報格納
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Function SetOutputMtx2( _
    outmtx, _
    id, _
    value, _
    loop_time _
)
    Dim FunctionName :FunctionName = "SetOutputMtx2"

    For loop_col = 0 to Ubound(outmtx,2)
        if outmtx(holdAllIndiNameRow,loop_col) = id then
            outmtx(loop_time,loop_col) = value
            Exit For
        end if
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : 出力用配列への情報格納
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Function UpdateInputMtx2( _
    pairnum, _
    id, _
    value, _
    loop_time _
)
    Dim FunctionName :FunctionName = "UpdateInputMtx2"

    if pairnum = 1 then
        For loop_col = 0 to Ubound(holdInAllIndicatorMtx1,2)
            if holdInAllIndicatorMtx1(holdAllIndiNameRow,loop_col) = id then
                holdInAllIndicatorMtx1(loop_time,loop_col) = value
                Exit For
            end if
        Next
    elseif pairnum = 2 then
        For loop_col = 0 to Ubound(holdInAllIndicatorMtx2,2)
            if holdInAllIndicatorMtx2(holdAllIndiNameRow,loop_col) = id then
                holdInAllIndicatorMtx2(loop_time,loop_col) = value
                Exit For
            end if
        Next
    elseif pairnum = 3 then
        For loop_col = 0 to Ubound(holdInAllIndicatorMtx3,2)
            if holdInAllIndicatorMtx3(holdAllIndiNameRow,loop_col) = id then
                holdInAllIndicatorMtx3(loop_time,loop_col) = value
                Exit For
            end if
        Next
    end if

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : ファイル出力
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Sub OutputFiles(outdir, loop_period)
end sub
'***********************************************************
' 機能   : ファイル出力
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Sub OutputFilesRL(watchDir, outDir, mtx1, mtx2, loop_period)
    Dim FunctionName :FunctionName = "OutputFilesRL"

    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim objWatchDir
    Set objWatchDir = CreateObject("Scripting.FileSystemObject").GetFolder(watchDir)
    
    'Priceファイルが飛んできたら処理を開始
    targetPriceName = watchDir & "\" & inPriceFil & loop_period & ".csv"
    destinationName = outDir & "\" & inPriceFil & loop_period & ".csv"
    If objFSO.FileExists(targetPriceName) Then
    
        Dim outmtx
        Dim row_num : row_num = Ubound(mtx1,1) + Ubound(mtx2,2)
        ReDim outmtx(row_num,outPutColNum)

        Dim write_row : write_row = 0
        'カラム行の代入
'        outmtx(write_row, outIDCol) = "ID"
'        outmtx(write_row, outDayCol) = "Date"
'        outmtx(write_row, outTimeCol) = "Time"
'        outmtx(write_row, outAshiCol) = "Ashi"
'        outmtx(write_row, outPriceCol) = "Price"
'        write_row = write_row + 1

        '配列の中身を出力用配列へ格納する
        For loop_row = Lbound(mtx1,1) To Ubound(mtx1,1)
        Dim tmp_mtx: tmp_mtx = Split(mtx1(loop_row),",")
        For loop_col = Lbound(tmp_mtx,1) To Ubound(tmp_mtx,1)
            outmtx(loop_row, loop_col) = tmp_mtx(loop_col)
        Next
            write_row = write_row + 1
        Next

        Dim loop_row : loop_row = holdAllIndiNameRow+1
        For loop_col = holdAllIndiDateCol+1 To Ubound(mtx2,2)
            outmtx(write_row, outIDCol) = mtx2(holdAllIndiNameRow, loop_col)
            outmtx(write_row, outDayCol) = FormatDateTime(mtx2(loop_row, holdAllIndiDateCol), 2)
            outmtx(write_row, outTimeCol) = FormatDateTime(mtx2(loop_row, holdAllIndiDateCol), 4)
            outmtx(write_row, outAshiCol) = loop_period
            outmtx(write_row, outPriceCol) = mtx2(loop_row, loop_col)
            write_row = write_row + 1
        Next
    
        'ファイルパス指定
        Dim directory_out : directory_out = outdir & "\" & "predict" & "\"
        Dim directory_cash : directory_cash  = outdir & "\"
        Dim filePath_out : filePath_out = outdir & "\" & "predict" & "\" & "realtime_nesl_value" & loop_period & ".csv"

        'nesl配列出力
        Call OutputTextJoin(outmtx, filePath_out, 0)
        objFSO.CopyFile filePath_out, directory_cash
    
        '移動先のPriceファイルの移動
        If objFSO.FileExists(destinationName) Then
            objFSO.DeleteFile destinationName
        End If
        objFSO.CopyFile targetPriceName, directory_out
        objFSO.MoveFile targetPriceName, directory_cash
    End If
    Set objFSO = Nothing

                
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

'***********************************************************
' 機能   : ファイル出力（バックテスト用）
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 春山
'***********************************************************
Sub OutputFilesBT(outdir, mtx, date_str, loop_time, loop_period, setting, loop_setrow)
    Dim FunctionName :FunctionName = "OutputFilesBT"
    
    '１次元配列の２次元化
'    Dim mtx2d
'    ReDim mtx2d(UBound(mtx), inIndiColNum)
'    For i = 0 To UBound(mtx)
'        Dim mtx_split
'        mtx_split = Split(mtx(i), ",")
'        For j = 0 To UBound(mtx_split)
'            mtx2d(i, j) = mtx_split(j)
'        Next
'    Next
'    
'    Dim mtx2dbk
'    Call ChangeMtxToBT(mtx2dbk, mtx2d)
'    
    Dim tmp_set : tmp_set = Split(setting(loop_setrow),",")
    Dim codes : codes = tmp_set(inSetCodeCol)
    Dim tmp_code : tmp_code = Split(codes,"|")
    
    For loop_code = 1 To Ubound(mtx,2)
        Dim code_name : code_name = mtx(holdAllIndiNameRow,loop_code)

        Dim check_code :  check_code = 0
        '設定ファイル上の出力ｺｰﾄﾞに存在するかチェック
        For loop_check = 0 To Ubound(tmp_code)
            if tmp_code(loop_check) = code_name then
                check_code = 1
                Exit For
            end if
        Next

        if check_code = 1 then
            'ファイルパス指定
            Dim tmp_code_name : tmp_code_name = SmallCodeConvert(code_name)
            filePath = CombineString2(outdir, "\", loop_period , "\" , tmp_code_name, "\" , outFil, "_", date_str, ".csv")
    
            Dim outmtx
            '既存ファイル有無確認
            if GetFileExists(filePath) = 1 then
                if rewritemode = 1 then
                    '対象配列抽出
                    Call ChangeMtxToSingle(outmtx, mtx, loop_code)
                    '配列出力
                    Call OutputTextJoin(outmtx, filePath, 0)
                end if
            else
                '対象配列抽出
                Call ChangeMtxToSingle(outmtx, mtx, loop_code)
                '配列出力
                Call OutputTextJoin(outmtx, filePath, 0)
            end if
        end if
    Next
    
'    Dim filePath
''    filePath = outdir & "\" & outFil & "_" & date_str & "\" & outFil & "_" & date_str & "_" & ZeroPadding(loop_time, 4) & "_"  & loop_period & "_" & ZeroPadding(0, 2) & ".csv"
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(0, 2), "_", ZeroPadding(childNumber,3), ".csv")
'    If mtx2dbk(0, 1) <> "" Then
'    if Clng(zerofile) = 1 then
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    end if
'    
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(functionNumberRatio, 2), "_", ZeroPadding(childNumber,3), ".csv")
'    If outRatio(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRatio)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberAbsIchi, 2), "_", ZeroPadding(childNumber,3), ".csv")
'    If outAbsIchi(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outAbsIchi)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberAbs, 2), "_", ZeroPadding(childNumber,3), ".csv")
'    If outAbs(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outAbs)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJita, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJita(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJita)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJvalue, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJvalue(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJvalue)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberTvalue, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outTvalue(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outTvalue)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJTvalue, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJTvalue(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJTvalue)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSabun, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSabun(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSabun)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSabunDougyaku, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSabunDougyaku(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSabunDougyaku)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSabunDougyaku2, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSabunDougyaku2(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSabunDougyaku2)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberMaehenka, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outMaehenka(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outMaehenka)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberLeaderDirection, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outLeaderDirection(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outLeaderDirection)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberLeaderNum, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outLeaderNum(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outLeaderNum)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberLeaderShukiNum, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outLeaderShukiNum(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outLeaderShukiNum)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberMaxRatioPairNum, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outMaxRatioPairNum(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outMaxRatioPairNum)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberOSum, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outOSum(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outOSum)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPlus, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPlus(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPlus)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberRSum, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outRSum(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRSum)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberHeiken, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outHeiken(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outHeiken)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberHeOsUD, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outHeOsUD(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outHeOsUD)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberHeOsZG, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outHeOsZG(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outHeOsZG)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberDualKairi, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outDualKairi(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outDualKairi)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberDualDirection, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outDualDirection(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outDualDirection)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberRyouP, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outRyouP(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRyouP)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberRyouM, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outRyouM(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRyouM)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberRyouPM, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outRyouPM(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRyouPM)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberRyou, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outRyou(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outRyou)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberGoalPredict, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outGoalPredict(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outGoalPredict)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberMinus, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outMinus(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outMinus)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberZGMinus, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outZGMinus(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outZGMinus)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberZGAbsMinus, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outZGAbsMinus(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outZGAbsMinus)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberTwoValueDiff, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outTwoValueDiff(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outTwoValueDiff)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSingleValueDiff, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSingleValueDiff(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSingleValueDiff)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSingleDDiff, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSingleDDiff(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSingleDDiff)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSingleVDiffAve, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSingleVDiffAve(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSingleVDiffAve)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberSingleDDiffAve, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outSingleDDiffAve(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outSingleDDiffAve)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictOre0, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictOre0(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictOre0)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictOre1, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictOre1(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictOre1)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictOre2, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictOre2(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictOre2)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictOre, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictOre(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictOre)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictOre21, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictOre21(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictOre21)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroi, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroi(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroi)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSabun, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSabun(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSabun)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTrace, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTrace(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTrace)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTrace2, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTrace2(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTrace2)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceMini, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceMini(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceMini)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceFull, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceFull(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceFull)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceFull3, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceFull3(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceFull3)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceFull5, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceFull5(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceFull5)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceFull5Abs, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceFull5Abs(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceFull5Abs)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceSabun, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceSabun(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceSabun)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceSabun3, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceSabun3(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceSabun3)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceSabun4, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceSabun4(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceSabun4)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceSabun5, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceSabun5(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceSabun5)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceTime, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceTime(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceTime)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberJisseiTraceTimeHendou, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outJisseiTraceTimeHendou(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outJisseiTraceTimeHendou)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullBlockNamasi, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullBlockNamasi(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullBlockNamasi)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullBlockNamasi, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullBlockNamasi(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullBlockNamasi)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullBlockDirection, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullBlockDirection(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullBlockDirection)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullBlockBar, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullBlockBar(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullBlockBar)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullPrices, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullPrices(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullPrices)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberNamasiFullBlockNumber, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outNamasiFullBlockNumber(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outNamasiFullBlockNumber)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberDivide, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outDivide(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outDivide)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberTradeVolume, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outTradeVolume(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outTradeVolume)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberGoalPredict100, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outGoalPredict100(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outGoalPredict100)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSabun2, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSabun2(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSabun2)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSabun3, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSabun3(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSabun3)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSetsuzoku, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSetsuzoku(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSetsuzoku)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSetsuzoku3, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSetsuzoku3(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSetsuzoku3)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If
'    filePath = CombineString(outdir, "\", outFil, "_", date_str, "\", outFil, "_", date_str, "_", ZeroPadding(loop_time, 4), "_", loop_period, "_", ZeroPadding(FunctionNumberPredictSoroiSabunPairs, 2), "_", ZeroPadding(childNumber,3),".csv")
'    If outPredictSoroiSabunPairs(0, 1) <> "" Then
'        Call ChangeMtxToBT(mtx2dbk, outPredictSoroiSabunPairs)
'        Call OutputTextJoin(mtx2dbk, filePath, 1)
'    End If

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

'***********************************************************
' 機能   : 文字列結合
' 引数   :  複数の文字列
' 戻り値 : 結合した文字列
' 作成者  : 佐藤
'***********************************************************
Function CombineString(Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, Str11, Str12, Str13, Str14, Str15, Str16, Str17, Str18)
    Dim FunctionName :FunctionName = "CombineString"

	joinLst = Array(Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, Str11, Str12, Str13, Str14, Str15, Str16, Str17, Str18)
	CombineString = join(joinLst, "")

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : 文字列結合
' 引数   :  複数の文字列
' 戻り値 : 結合した文字列
' 作成者  : 佐藤
'***********************************************************
Function CombineString2(Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10)
    Dim FunctionName :FunctionName = "CombineString2"

	joinLst = Array(Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10)
	CombineString2 = join(joinLst, "")

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : 文字列結合
' 引数   :  複数の文字列
' 戻り値 : 結合した文字列
' 作成者  : 佐藤
'***********************************************************
Function CombineStringReal(Str1, Str2, Str3, Str4, Str5, Str6, Str7)
    Dim FunctionName :FunctionName = "CombineStringReal"

	joinLst = Array(Str1, Str2, Str3, Str4, Str5, Str6, Str7)
	CombineStringReal = join(joinLst, "")

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　配列の変換（リアル形式→バックテスト形式）
' 目的   :  配列を並び替える
' 引数   :
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function ChangeMtxToBT(ByRef mtx1, ByVal mtx2)
    Dim FunctionName :FunctionName = "ChangeMtxToBT"
    
    ReDim mtx1(UBound(mtx2, 1), UBound(mtx2, 2) - 1)
    
    For i = 0 To UBound(mtx2, 1)
        For j = 0 To UBound(mtx2, 2)
            'ID
            If j = 0 Then
                mtx1(i, j) = mtx2(i, j)
            'Date
            ElseIf j = 2 Then
'                mtx1(i, j - 1) = Format(mtx2(i, j - 1) & " " & mtx2(i, j), "yyyy/mm/dd hh:mm")
                if i=0 then
                    mtx1(i, j - 1) = mtx2(i, j - 1) & " " & mtx2(i, j)
                else
                    mtx1(i, j - 1) = FormatDateTime(mtx2(i, j - 1),2) & " " & FormatDateTime(mtx2(i, j), 4)
                end if
            ElseIf j > 2 Then
                mtx1(i, j - 1) = mtx2(i, j)
            End If
        Next
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   :　配列の変換（複数ｺｰﾄﾞ配列→単一ｺｰﾄﾞ配列（出力用配列））
' 目的   :  配列を抽出する
' 引数   :
' 戻り値 :  なし
' 作成者  : 春山
'***********************************************************
Function ChangeMtxToSingle(ByRef mtx1, ByVal mtx2, Byval col)
    Dim FunctionName :FunctionName = "ChangeMtxToSingle"
    
    ReDim mtx1(UBound(mtx2, 1),tmpIndiColNum)
    
    For i = 0 To UBound(mtx2, 1)
        mtx1(i,tmpIndiDatecol) = mtx2(i,holdAllIndiDateCol)
        mtx1(i,tmpIndiPricecol) = mtx2(i,col)
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   :　バブルソート2次元配列
' 目的   :  配列を並び替える
' 引数   :  ソートした配列
' 戻り値 :  なし
' 作成者  : 野島
'***********************************************************
Sub BubbleSortAsc2(ByRef argAry, ByVal keyPos)
    Dim FunctionName :FunctionName = "BubbleSortAsc2"

    Dim vSwap
    Dim i
    Dim j
    Dim k
    For i = LBound(argAry, 1) To UBound(argAry, 1)
        For j = UBound(argAry, 1) To i Step -1
            If argAry(i, keyPos) > argAry(j, keyPos) Then
                For k = LBound(argAry, 2) To UBound(argAry, 2)
                    vSwap = argAry(i, k)
                    argAry(i, k) = argAry(j, k)
                    argAry(j, k) = vSwap
                Next
            End If
        Next
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

Sub BubbleSortDisc2(ByRef argAry, ByVal keyPos)
    Dim vSwap
    Dim i
    Dim j
    Dim k
    For i = LBound(argAry, 1) To UBound(argAry, 1)
        For j = UBound(argAry, 1) To i Step -1
            If argAry(i, keyPos) < argAry(j, keyPos) Then
                For k = LBound(argAry, 2) To UBound(argAry, 2)
                    vSwap = argAry(i, k)
                    argAry(i, k) = argAry(j, k)
                    argAry(j, k) = vSwap
                Next
            End If
        Next
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

'***********************************************************
' 機能   : ファイル保存処理
' 引数   :  ArrayData:配列変数
'           filePath:ファイル保存場所
' 戻り値?､ : なし
' 作成者  : 佐藤
'***********************************************************
Sub OutputTextJoin(ArrayData, filePath, row_start)
    Dim FunctionName :FunctionName = "OutputTextJoin"

    Call makeFolder(filePath)

    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
        
    Dim outputFile
    Set outputFile = fso.OpenTextFile(filePath, 2, True)
        
    maxRowIndex = UBound(ArrayData, 1)
    maxColIndex = UBound(ArrayData, 2)
        
    dim outlst()
    redim outlst(0)
'    ReDim outlst(maxRowIndex)
    
    For i = row_start To UBound(ArrayData)
        Dim rowStrLst
        ReDim rowStrLst(maxColIndex)
        For j = LBound(ArrayData, 2) To UBound(ArrayData, 2)
            rowStrLst(j) = ArrayData(i, j)
        Next

        if rowStrLst(0) <> "" then
            dim size: size = UBound(outlst)
            if outlst(size) <> "" then
                Redim preserve outlst(size+1)
            end if
            if Ubound(outlst)=0  then
                outlst(size) = Join(rowStrLst, ",")
            else
                outlst(size+1) = Join(rowStrLst, ",")
            end if
        end if
    Next
    
    outText = Join(outlst, vbCrLf)
    outputFile.Write (outText)
    outputFile.Write (vbCrLf)
    
    ' バッファを Flush してファイルを閉じる
    outputFile.Close
    Set fso = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub


'***********************************************************
' 機能   : フォルダの作成
' 引数   : フォルダ名称（絶対パス）
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************

Function makeFolder(folderName)
    Dim FunctionName :FunctionName = "makeFolder"

    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim fname_sp
    fname_sp = Split(folderName, "\")
    
    Dim i
    For i = 0 To UBound(fname_sp) - 1
        Dim tmp_name
        Dim j
        For j = 0 To i
            If j = 0 Then
                tmp_name = fname_sp(j) & "\"
            Else
                tmp_name = tmp_name & fname_sp(j) & "\"
            End If
        Next
        
        If Not objFSO.folderexists(tmp_name) Then '同名のフォルダがない場合フォルダを作成'
'            MkDir tmp_name
            objFSO.Createfolder(tmp_name)
        End If
    Next
    Set objFSO = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : CSV読込処理
' 引数   :
' 戻り値 : なし
' 作成者  : 佐藤
'***********************************************************
Function readCsv(File_Target)
    Dim FunctionName :FunctionName = "readCSV"

    Dim tmp_size: tmp_size = FileSize(File_Target)
    WScript.Sleep WaitSec * 750
    'ファイルサイズが等しくなるまで待つ（他編集作業完了待ち）
    Do While tmp_size <> FileSize(File_Target)
        tmp_size = FileSize(File_Target)
        WScript.Sleep WaitSec * 1000
    Loop
    With CreateObject("Scripting.FileSystemObject")
        Set fp = .OpenTextFile(File_Target,1,false)
        if fp.AtEndOfStream = true then
        else
            Lines = fp.ReadAll
        end if
        fp.Close
    End With

    Dim str_Strings
    str_Strings = Split(Lines, vbCrLf)

    readCsv = str_Strings


if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'**************************************************
'VB/VBAからShell関数を使い.vbsを実行する
'**************************************************
Sub Shellbat(vbsPath, parameters)
    '起動用のオブジェクトを生成
    Dim objWsh
    Set objWsh = WScript.CreateObject("WScript.Shell")
     
    objWsh.Run (vbsPath & " " & parameters)

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub

'**************************************************
'数値の前方を0埋めする
'**************************************************
Function ZeroPadding(value, length)
    Dim FunctionName :FunctionName = "ZeroPadding"

    ZeroPadding = Replace(Space(length - Len(value)) & value, Space(1), "0")

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

Function CombineFile(watchDir, combiDir, ashiNum)
    Dim FunctionName :FunctionName = "CombineFile"

    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim objWatchDir
    Set objWatchDir = CreateObject("Scripting.FileSystemObject").GetFolder(watchDir)
    
    'Priceファイルが飛んできたら処理を開始
    targetPriceName = watchDir & "\" & inPriceFil & ashiNum & ".csv"
    destinationName = combiDir & "\" & inPriceFil & ashiNum & ".csv"
    If objFSO.FileExists(targetPriceName) Then
    
        'CSVファイルの読み込み件数をカウント
        fileCount = 0
        For Each objFile In objWatchDir.Files
        
            Dim watchDirFile
            watchDirFile = watchDir & "\" & objFile.Name
        
            '対象の時間足のファイルのみ結合対象として処理する
            targetNeslName = inIndiFil & ashiNum
            If InStr(watchDirFile, targetNeslName) > 0 Then
                fileCount = fileCount + 1
        
                'ファイル書き込み処理を呼び出し
                combiFile = combiDir & "\" & inIndiFil & ashiNum & ".csv"
                
                If fileCount = 1 Then
                    Call WriteFile(watchDirFile, combiFile)
                Else
                    Call AppendFile(watchDirFile, combiFile, 0)
                End If
                objFSO.DeleteFile watchDirFile
                
            End If
        Next
    
        'Neslファイルのコピー
        objFSO.CopyFIle combiFile, combiDir & "\predict\"
        
        'Priceファイルの移動
        If objFSO.FileExists(destinationName) Then
            objFSO.DeleteFile destinationName
        End If
        objFSO.CopyFile targetPriceName, combiDir & "\predict\"
        objFSO.MoveFile targetPriceName, combiDir & "\"
    End If
    Set objFSO = Nothing

    CombineFile = fileCount

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

Function CombineFileBT(watchDir, combiDir, date_str)
    Dim FunctionName :FunctionName = "CombineFileBT"

    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim objWatchDir
    Set objWatchDir = CreateObject("Scripting.FileSystemObject").GetFolder(watchDir & "\" & inIndiFil & "_" & date_str)

    MsgBox "Combine"
        
    'CSVファイルの読み込み件数をカウント
    fileCount = 0
    For Each objFile In objWatchDir.Files
    
        Dim watchDirFile
        watchDirFile = watchDir & "\" & inIndiFil & "_" & date_str & "\" & objFile.Name
'    	msgbox watchDir & "\" & inIndiFil & "_" & date_str
    
        '対象の時間足のファイルのみ結合対象として処理する
        targetNeslName = inIndiFil
        If InStr(watchDirFile, targetNeslName) > 0 Then
            fileCount = fileCount + 1
    
            'ファイル書き込み処理を呼び出し
            combiFile = combiDir & "\" & inIndiFil & "_" & date_str & ".csv"
            
            If fileCount = 1 Then
                Call WriteFile(watchDirFile, combiFile)
            Else
                Call AppendFile(watchDirFile, combiFile, 1)
            End If
            objFSO.DeleteFile watchDirFile
            
        End If
    Next    
    Set objFSO = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

Function WriteFile(singleFile, combiFile)
    Dim FunctionName :FunctionName = "WriteFile"

    Call OutLog("Write:" & combiFile, logPath)

    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set fileIn = objFSO.OpenTextFile(singleFile)    '読み込みファイル
    Set fileOut = objFSO.OpenTextFile(combiFile, 2, True)  '書き込みファイル

    Do While Not fileIn.AtEndOfStream

        '先頭と末尾の両方のスペースを削除した文字列を返す
        Line = Trim(fileIn.ReadLine)

        fileOut.Write Line
        fileOut.WriteLine
    Loop
    
    fileIn.Close    '読み込みファイル閉じる
    fileOut.Close    '読み込みファイル閉じる
    Set objFSO = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

Function AppendFile(singleFile, combiFile, flag)
    Dim FunctionName :FunctionName = "AppendFile"

    Call OutLog("Write:" & combiFile, logPath)

    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set fileIn = objFSO.OpenTextFile(singleFile)    '読み込みファイル
    Set fileOut = objFSO.OpenTextFile(combiFile, 8, False)  '書き込みファイル

    countB = 0    '書き込み件数
    Do While Not fileIn.AtEndOfStream

        countB = countB + 1
        '先頭と末尾の両方のスペースを削除した文字列を返す
        Line = Trim(fileIn.ReadLine)

        'ヘッダーを削除して書き込む条件
        if flag = 0 then
            If countB > 1Then
                fileOut.Write Line
                fileOut.WriteLine
            End If
        else
            fileOut.Write Line
            fileOut.WriteLine
        end if
    Loop
    
    fileIn.Close    '読み込みファイル閉じる
    fileOut.Close    '読み込みファイル閉じる
    Set objFSO = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'**************************************************
'** ファイルに書き込み処理
'**  str ログメッセージ
'**  path ファイルパス
'**************************************************
Sub OutLog(str, path)
    Dim FunctionName :FunctionName = "OutLog"

On Error Resume Next
    Dim fso, fi
    Set fso = CreateObject("Scripting.FileSystemObject")
     
    'ファイルを開く
     'もしも存在しない場合には作成する
    if fso.FileExists(path) then
        Set fi = fso.OpenTextFile(path, 8, True)
     
        fi.WriteLine (Date & " " & time() & ": " & str)   'ログを書き込む
        fi.Close
        Set fi = Nothing
    end if
    Set fso = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Sub


'***********************************************************
' 機能   : 文字列連結による簡易ログ作成・更新
' 引数   :
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function UpdateLog(ByRef heoslog, heosnow, maperiod, ByRef vals)
    Dim FunctionName :FunctionName = "UpdateLog"

    'logを分割する
    vals = Split(heoslog, "|")
'    msgbox Ubound(vals) & "," & maperiod
    'log値を更新する
    if Ubound(vals) < Clng(maperiod) then
        if heoslog <> "" then
            heoslog = heoslog & "|" & heosnow
        else
            heoslog = heosnow
        end if
    else
        for i = 1 to Ubound(vals)
            if i = 1 then
                heoslog = vals(i)
            else
                heoslog = heoslog & "|" & vals(i)
            end if
        next
        heoslog = heoslog & "|" & heosnow
    end if

    '実際に評価時に使用する配列データに入れ替える vals(0)が現在になるようにする
    vals = Split(heoslog, "|")

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
end Function

'***********************************************************
' 機能   : ログから直近の到達価格を探す
' 引数   :
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function SearchGoalPoint(heosval, signalval, hecrossval, hprice, lprice, ByRef heossabunnow, ByRef heossabunpre, ByRef heoscrosspointnow, ByRef heoscrosspointpre, ByRef anshigh, ByRef anslow)
    Dim FunctionName :FunctionName = "SearchGoalPoint"

'交点の有無を確認する
    for i = 1 To Ubound(hecrossval)
        Dim difnow: difnow = heosval(i) - signalval(i)
        Dim difpre: difpre = heosval(i-1) - signalval(i-1)
        Dim heosnow : heosnow = heosval(i)
        Dim heospre : heospre = heosval(i-1)

        '交点発生時
        '上交点の場合
        If  hecrossval(i) = 3 Then
            dim s1 : s1 = (difpre - heospre) / 2
            dim s2 : s2 = (heosnow - difnow) / 2
            heoscrosspointnow = heospre + (heosnow - heospre) * s1 / (s1 + s2)
            heoscrosstype = 1
            heossabunpre = hprice - heoscrosspointpre
'                heossabunnow = hprice - heoscrosspointnow
            anshigh = pnow + heossabunpre
            '次の足であり、次の時刻時の処理用に値の更新をかける
            if i = 1 then
                heoscrosspointpre = heoscrosspointnow
            end if
            '次の到達地点を計算するための交点が見つかったので、ansが求められたためブレークする
            Exit for
        '下交点の場合
        Elseif hecrossval(i) = 4 Then
            s1 = (difpre - heospre) / 2
            s2 = (heosnow - difnow) / 2
            heoscrosspoint = heospre + (heosnow - heospre) * s1 / (s1 + s2)
            heoscrosstype = 2
            heossabunpre = lprice - heoscrosspointpre
'                heossabunnow = lprice - heoscrosspointnow
            anslow = pnow + heossabunpre
            '次の足であり、次の時刻時の処理用に値の更新をかける
            if i = 1 then
                heoscrosspointpre = heoscrosspointnow
            end if
            '次の到達地点を計算するための交点が見つかったので、ansが求められたためブレークする
            Exit for
        End if
    Next

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
end Function

'***********************************************************
' 機能   : ファイルサイズ取得
' 引数   :
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function FileSize(path)
    Dim FunctionName :FunctionName = "FileSize"

'    SysWriter "FileSize関数を開始します。", sysLogPath
    Dim objFso
    Dim objFile
    Set objFso = CreateObject("Scripting.FileSystemObject")
    If objFso.FileExists(path) Then
        Set objFile = objFso.GetFile(path)
        FileSize = objFile.Size
'        SysWriter "ファイルサイズ：" & objFile.Size, sysLogPath
    Else
        FileSize = 0
'        SysWriter "ファイルサイズ：0", sysLogPath
    End If
'    SysWriter "FileSize関数を終了します。", sysLogPath
    Set objFile = Nothing
    Set objFso = Nothing

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : ファイルの有無確認
' 引数   : ファイルアドレス（絶対パス）
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function GetFileExists(filePath)
    Dim FunctionName :FunctionName = "GetFileExists"

    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim check_ans : check_ans = 0
    
    If objFSO.FileExists(filePath) Then '同名のフォルダがない場合フォルダを作成'
        check_ans = 1
    End If

    Set objFSO = Nothing

    GetFileExists = check_ans

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : フォルダ名用ｺｰﾄﾞ変換
' 引数   : フォルダ名は大文字と小文字の区別がないため、小文字の場合に変換をかける
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function SmallCodeConvert(str)
    Dim FunctionName :FunctionName = "SmallCodeConvert"

    Dim str1 : str1 = Mid(str,1,1)
    Dim str2 : str2 = Mid(str,2,1)
    Dim str3 : str3 = Mid(str,3,100)

    Dim tmp_str : tmp_str = UCase(str1)
    if str1 <> tmp_str then
        str1 = "s" + str1
    end if
    tmp_str = UCase(str2)
    if str2 <> tmp_str then
        str2 = "s" + str2
    end if

    tmp_str = str1 + str2 + str3

    SmallCodeConvert = tmp_str

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : 空白時に0で埋める
' 引数   : 配列、カラム番号
' 戻り値 : なし
' 作成者  : 春山
'***********************************************************
Function GetArrayValueZero(mtx, col)
    Dim FunctionName :FunctionName = "GetArrayValueZero"

    Dim ans : ans = mtx(col)
    if ans = "" then
        ans = 0
    end if

    GetArrayValueZero = ans

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function


'***********************************************************
' 機能   : フォルダ名変更処理
' 引数   : 配列、カラム番号
' 戻り値 : なし
' 作成者  : 佐藤
'***********************************************************
Function ChangeFolderNameZZ()
    Dim FunctionName :FunctionName = "ChangeFolderNameZZ"

    Dim FSO, FolderObject
    Set FSO = CreateObject("Scripting.FileSystemObject")

    For loop_period = 1 To maxPeriod
        if CLng(PeriodArraySet(loop_period-1)) >= 0 then
            Dim asi : asi = GetAsi(periodnum)

'            Dim FolderName1 : FolderName1 = inDir1 & "\" & asi & "\"
'            Dim FolderName2 : FolderName2 = inDir2 & "\" & asi & "\"
'            Dim FolderName3 : FolderName3 = inDir3 & "\" & asi & "\"
'    
'            if FSO.FolderExists(FolderName1) then
'                Set FolderObject = FSO.GetFolder(FolderName1)
'                Call GetObjIndexFolders(FSO, FolderObject)
'            end if
'            if FSO.FolderExists(FolderName2) then
'                Set FolderObject = FSO.GetFolder(FolderName2)
'                Call GetObjIndexFolders(FSO, FolderObject)
'            end if
'            if FSO.FolderExists(FolderName3) then
'                Set FolderObject = FSO.GetFolder(FolderName3)
'                Call GetObjIndexFolders(FSO, FolderObject)
'            end if
        end if
    Next

    Set FolderObject = Nothing
    Set FSO = Nothing
if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If
End Function

'***********************************************************
' 機能   : フォルダ名変更（内部関数）
' 引数   : 配列、カラム番号
' 戻り値 : なし
' 作成者  : 佐藤
'***********************************************************
Function GetObjIndexFolders(objFso, objFolder)
    Dim FunctionName :FunctionName = "GetObjIndexFolders"

    Set objIndexFolders = objFolder.SubFolders

    '並び順変更のためのフォルダ名の変更
    For Each objIndexFolder In objIndexFolders
        indexName = objIndexFolder.Name
        If InStr(indexName, "ZZ00") > 0 Then
            If Left(indexName, 1) <> "0" Then
                objIndexFolder.Name = "0" & indexName
            End If
        End If
    Next
    
    '再取得
    Set objIndexFolders = objFolder.SubFolders
    Set GetObjIndexFolders = objIndexFolders

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If

End Function

'***********************************************************
' 機能   : 足の取得
' 引数   : 配列、カラム番号
' 戻り値 : なし
' 作成者  : 佐藤
'***********************************************************
Function GetAsi(loop_period)
    Dim FunctionName :FunctionName = "GetAsi"

    if loop_period > MaxPeriod then loop_period = MaxPeriod
    
    Dim asi : asi = 1
    Select Case loop_period
        Case 1
            asi = 1
        Case 2
            asi = 5
        Case 3
            asi = 15
        Case 4
            asi = 30
        Case 5
            asi = 60
        Case 6
            asi = 240
        Case 7
            asi = 1440
        Case Else
            asi = 1
    End Select

    GetAsi = asi

if Err.Number <> 0 then
'エラー番号に応じた処理を記述する
    Dim log_str : log_str = "ERROR" & "|" & filenumber & "|" & FunctionName & "|" & Err.number & "|" & Err.Description
    Call OutLog(log_str , ErrPath)
  
  'エラー情報をクリアする
    Err.Clear
End If

End Function
